
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e8  080031e8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031f0  080031f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000006c  08003264  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003264  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001695  00000000  00000000  000290c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002a760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000998  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bf8  00000000  00000000  0002bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b8c  00000000  00000000  0003f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e03c  00000000  00000000  000472dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  000c5394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003164 	.word	0x08003164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003164 	.word	0x08003164

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fbfc 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f844 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f93a 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000448:	f000 f908 	bl	800065c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800044c:	f000 f8b0 	bl	80005b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <main+0x7c>)
 8000452:	2200      	movs	r2, #0
 8000454:	2101      	movs	r1, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fea6 	bl	80011a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 800045c:	23a0      	movs	r3, #160	; 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fe9f 	bl	80011a8 <HAL_GPIO_WritePin>
  TIM2->SR &= ~TIM_SR_UIF;						//!< clear update interrupt Flag
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	691a      	ldr	r2, [r3, #16]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2101      	movs	r1, #1
 8000476:	438a      	bics	r2, r1
 8000478:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <main+0x80>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fe2b 	bl	80020d8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	seuil_l = seuil[a][0];
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <main+0x84>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <main+0x88>)
 8000488:	00d2      	lsls	r2, r2, #3
 800048a:	58d2      	ldr	r2, [r2, r3]
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <main+0x8c>)
 800048e:	601a      	str	r2, [r3, #0]
	seuil_h = seuil[a][1];
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <main+0x84>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <main+0x88>)
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	3304      	adds	r3, #4
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <main+0x90>)
 80004a0:	601a      	str	r2, [r3, #0]

	irrigation(seuil_l, seuil_h);
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <main+0x8c>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <main+0x90>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	0019      	movs	r1, r3
 80004ac:	0010      	movs	r0, r2
 80004ae:	f000 fa0f 	bl	80008d0 <irrigation>
	seuil_l = seuil[a][0];
 80004b2:	e7e6      	b.n	8000482 <main+0x4a>
 80004b4:	50000800 	.word	0x50000800
 80004b8:	2000009c 	.word	0x2000009c
 80004bc:	20000090 	.word	0x20000090
 80004c0:	20000050 	.word	0x20000050
 80004c4:	20000098 	.word	0x20000098
 80004c8:	20000094 	.word	0x20000094

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09f      	sub	sp, #124	; 0x7c
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2440      	movs	r4, #64	; 0x40
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2338      	movs	r3, #56	; 0x38
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f002 fe39 	bl	8003154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	232c      	movs	r3, #44	; 0x2c
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fe31 	bl	8003154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	0018      	movs	r0, r3
 80004f6:	2328      	movs	r3, #40	; 0x28
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f002 fe2a 	bl	8003154 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <SystemClock_Config+0xdc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a29      	ldr	r2, [pc, #164]	; (80005ac <SystemClock_Config+0xe0>)
 8000506:	401a      	ands	r2, r3
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <SystemClock_Config+0xdc>)
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0109      	lsls	r1, r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2202      	movs	r2, #2
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2210      	movs	r2, #16
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	02d2      	lsls	r2, r2, #11
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	03d2      	lsls	r2, r2, #15
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	187b      	adds	r3, r7, r1
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fe73 	bl	8001230 <HAL_RCC_OscConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800054e:	f000 fa45 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	212c      	movs	r1, #44	; 0x2c
 8000554:	187b      	adds	r3, r7, r1
 8000556:	220f      	movs	r2, #15
 8000558:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2203      	movs	r2, #3
 800055e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2101      	movs	r1, #1
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fa2a 	bl	80019d0 <HAL_RCC_ClockConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000580:	f000 fa2c 	bl	80009dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fc00 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800059c:	f000 fa1e 	bl	80009dc <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b01f      	add	sp, #124	; 0x7c
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	2308      	movs	r3, #8
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2310      	movs	r3, #16
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 fdc7 	bl	8003154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2308      	movs	r3, #8
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 fdc0 	bl	8003154 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	05d2      	lsls	r2, r2, #23
 80005da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005de:	22fa      	movs	r2, #250	; 0xfa
 80005e0:	01d2      	lsls	r2, r2, #7
 80005e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <MX_TIM2_Init+0xa8>)
 80005ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_TIM2_Init+0xa4>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 fd3e 	bl	8002080 <HAL_TIM_Base_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000608:	f000 f9e8 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	2108      	movs	r1, #8
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0152      	lsls	r2, r2, #5
 8000614:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000616:	187a      	adds	r2, r7, r1
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_TIM2_Init+0xa4>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fe87 	bl	8002330 <HAL_TIM_ConfigClockSource>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000626:	f000 f9d9 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	003b      	movs	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000636:	003a      	movs	r2, r7
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_TIM2_Init+0xa4>)
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f002 f855 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000646:	f000 f9c9 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b006      	add	sp, #24
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	2000009c 	.word	0x2000009c
 8000658:	00002710 	.word	0x00002710

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART2_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000668:	22e1      	movs	r2, #225	; 0xe1
 800066a:	0252      	lsls	r2, r2, #9
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f867 	bl	8002774 <HAL_UART_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f997 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000d8 	.word	0x200000d8
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	240c      	movs	r4, #12
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f002 fd41 	bl	8003154 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <MX_GPIO_Init+0x100>)
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4b39      	ldr	r3, [pc, #228]	; (80007bc <MX_GPIO_Init+0x100>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <MX_GPIO_Init+0x100>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	2204      	movs	r2, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <MX_GPIO_Init+0x100>)
 80006ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_GPIO_Init+0x100>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	430a      	orrs	r2, r1
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_GPIO_Init+0x100>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_GPIO_Init+0x100>)
 8000704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_GPIO_Init+0x100>)
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_GPIO_Init+0x100>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_GPIO_Init+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fd41 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fd3a 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0192      	lsls	r2, r2, #6
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0x108>)
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	193b      	adds	r3, r7, r4
 800074a:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <MX_GPIO_Init+0x104>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 fbac 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2201      	movs	r2, #1
 8000760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	000c      	movs	r4, r1
 8000770:	187b      	adds	r3, r7, r1
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_GPIO_Init+0x104>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f000 fb98 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	0021      	movs	r1, r4
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2220      	movs	r2, #32
 8000782:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000796:	187a      	adds	r2, r7, r1
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fb84 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2007      	movs	r0, #7
 80007aa:	f000 fb4d 	bl	8000e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fb5f 	bl	8000e72 <HAL_NVIC_EnableIRQ>

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b009      	add	sp, #36	; 0x24
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	50000800 	.word	0x50000800
 80007c4:	10210000 	.word	0x10210000

080007c8 <MX_TIM2_Init_5s>:

/* USER CODE BEGIN 4 */
static void MX_TIM2_Init_5s(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	2308      	movs	r3, #8
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	2310      	movs	r3, #16
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f002 fcbb 	bl	8003154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	003b      	movs	r3, r7
 80007e0:	0018      	movs	r0, r3
 80007e2:	2308      	movs	r3, #8
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f002 fcb4 	bl	8003154 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	05d2      	lsls	r2, r2, #23
 80007f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 80007f6:	22fa      	movs	r2, #250	; 0xfa
 80007f8:	01d2      	lsls	r2, r2, #7
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <MX_TIM2_Init_5s+0xa8>)
 8000806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fc32 	bl	8002080 <HAL_TIM_Base_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init_5s+0x5c>
  {
    Error_Handler();
 8000820:	f000 f8dc 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	2108      	movs	r1, #8
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0152      	lsls	r2, r2, #5
 800082c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	187a      	adds	r2, r7, r1
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fd7b 	bl	8002330 <HAL_TIM_ConfigClockSource>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init_5s+0x7a>
  {
    Error_Handler();
 800083e:	f000 f8cd 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	003b      	movs	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	003b      	movs	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	003a      	movs	r2, r7
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_TIM2_Init_5s+0xa4>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f001 ff49 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init_5s+0x9a>
  {
    Error_Handler();
 800085e:	f000 f8bd 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b006      	add	sp, #24
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	2000009c 	.word	0x2000009c
 8000870:	00001388 	.word	0x00001388

08000874 <delay_ms>:
  * HCLK = 32MHz, system clock= HCLK/8 = 4MHz
  * 	pour avoir 1 ms de delay, il faut 4000 ticks
  * 	LOAD registre a 24 bits, donc la valeur la plus large de nms = 2^24/4000 = 4194.3ns = 4.19s
  */
void delay_ms(uint16_t nms)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	SysTick->LOAD = (uint32_t)4000*nms;
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	881a      	ldrh	r2, [r3, #0]
 8000884:	4911      	ldr	r1, [pc, #68]	; (80008cc <delay_ms+0x58>)
 8000886:	0013      	movs	r3, r2
 8000888:	015b      	lsls	r3, r3, #5
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	189b      	adds	r3, r3, r2
 8000890:	015b      	lsls	r3, r3, #5
 8000892:	604b      	str	r3, [r1, #4]
	SysTick->VAL=0X00;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <delay_ms+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=0X01;//使能，减到零是无动作，采用外部时钟源
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <delay_ms+0x58>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]

	do
	{
		temp=SysTick->CTRL;//读取当前倒计
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <delay_ms+0x58>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
	}
	while((temp&0x01)&&(!(temp&(1<<16))));//等待时间到达
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	4013      	ands	r3, r2
 80008ac:	d004      	beq.n	80008b8 <delay_ms+0x44>
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	025b      	lsls	r3, r3, #9
 80008b4:	4013      	ands	r3, r2
 80008b6:	d0f3      	beq.n	80008a0 <delay_ms+0x2c>

	SysTick->CTRL=0x00; //关闭计数
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <delay_ms+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00; //清空计数
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <delay_ms+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <irrigation>:
 *
 *
  */

void irrigation(int seuil_low, int seuil_high)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
 	if (flag == 0)
 80008da:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <irrigation+0xf0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d169      	bne.n	80009b6 <irrigation+0xe6>
	{
		flag = 1;
 80008e2:	4b37      	ldr	r3, [pc, #220]	; (80009c0 <irrigation+0xf0>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]

		if (Humitide_sol[i]> seuil_high)
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <irrigation+0xf4>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <irrigation+0xf8>)
 80008ee:	0092      	lsls	r2, r2, #2
 80008f0:	58d3      	ldr	r3, [r2, r3]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	da28      	bge.n	800094a <irrigation+0x7a>
		{

			if (htim2.Init.Period == 5000)
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <irrigation+0xfc>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <irrigation+0x100>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d111      	bne.n	8000926 <irrigation+0x56>
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 8000902:	4b32      	ldr	r3, [pc, #200]	; (80009cc <irrigation+0xfc>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fc09 	bl	800211c <HAL_TIM_Base_Stop_IT>
				MX_TIM2_Init();
 800090a:	f7ff fe51 	bl	80005b0 <MX_TIM2_Init>
				TIM2->SR &= ~TIM_SR_UIF;
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	2101      	movs	r1, #1
 800091a:	438a      	bics	r2, r1
 800091c:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim2);
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <irrigation+0xfc>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fbd9 	bl	80020d8 <HAL_TIM_Base_Start_IT>
			}
			/* LED on for 4s */
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,SET);
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <irrigation+0x104>)
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fc3b 	bl	80011a8 <HAL_GPIO_WritePin>
			delay_ms(4000);
 8000932:	23fa      	movs	r3, #250	; 0xfa
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff ff9c 	bl	8000874 <delay_ms>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <irrigation+0x104>)
 800093e:	2200      	movs	r2, #0
 8000940:	2101      	movs	r1, #1
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fc30 	bl	80011a8 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
		}
	}
}
 8000948:	e035      	b.n	80009b6 <irrigation+0xe6>
		else if (Humitide_sol[i] > seuil_low && Humitide_sol[i] <= seuil_high)
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <irrigation+0xf4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <irrigation+0xf8>)
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	58d3      	ldr	r3, [r2, r3]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	429a      	cmp	r2, r3
 8000958:	da26      	bge.n	80009a8 <irrigation+0xd8>
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <irrigation+0xf4>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <irrigation+0xf8>)
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	58d3      	ldr	r3, [r2, r3]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	db1e      	blt.n	80009a8 <irrigation+0xd8>
			if (htim2.Init.Period == 10000)
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <irrigation+0xfc>)
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <irrigation+0x108>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d112      	bne.n	800099a <irrigation+0xca>
				HAL_TIM_Base_Stop_IT(&htim2);
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <irrigation+0xfc>)
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fbd0 	bl	800211c <HAL_TIM_Base_Stop_IT>
				MX_TIM2_Init_5s();
 800097c:	f7ff ff24 	bl	80007c8 <MX_TIM2_Init_5s>
				TIM2->SR &= ~TIM_SR_UIF;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	691a      	ldr	r2, [r3, #16]
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2101      	movs	r1, #1
 800098c:	438a      	bics	r2, r1
 800098e:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim2);
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <irrigation+0xfc>)
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fba0 	bl	80020d8 <HAL_TIM_Base_Start_IT>
			if (htim2.Init.Period == 10000)
 8000998:	e00d      	b.n	80009b6 <irrigation+0xe6>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <irrigation+0x104>)
 800099c:	2200      	movs	r2, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fc01 	bl	80011a8 <HAL_GPIO_WritePin>
			if (htim2.Init.Period == 10000)
 80009a6:	e006      	b.n	80009b6 <irrigation+0xe6>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <irrigation+0x104>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fbfa 	bl	80011a8 <HAL_GPIO_WritePin>
}
 80009b4:	e7ff      	b.n	80009b6 <irrigation+0xe6>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	20000088 	.word	0x20000088
 80009c8:	20000000 	.word	0x20000000
 80009cc:	2000009c 	.word	0x2000009c
 80009d0:	00001388 	.word	0x00001388
 80009d4:	50000800 	.word	0x50000800
 80009d8:	00002710 	.word	0x00002710

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_MspInit+0x24>)
 80009ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x24>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <HAL_MspInit+0x24>)
 80009fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_MspInit+0x24>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	0549      	lsls	r1, r1, #21
 8000a02:	430a      	orrs	r2, r1
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10d      	bne.n	8000a40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_TIM_Base_MspInit+0x38>)
 8000a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_TIM_Base_MspInit+0x38>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	200f      	movs	r0, #15
 8000a36:	f000 fa07 	bl	8000e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f000 fa19 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	230c      	movs	r3, #12
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f002 fb78 	bl	8003154 <memset>
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d129      	bne.n	8000ac2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0289      	lsls	r1, r1, #10
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a94:	210c      	movs	r1, #12
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	220c      	movs	r2, #12
 8000a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 f9f5 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b008      	add	sp, #32
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f8e6 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	019b      	lsls	r3, r3, #6
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fb67 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  a++;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <EXTI4_15_IRQHandler+0x2c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <EXTI4_15_IRQHandler+0x2c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  if (a == 3)
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <EXTI4_15_IRQHandler+0x2c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d102      	bne.n	8000b2e <EXTI4_15_IRQHandler+0x26>
  {
	  a =0;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <EXTI4_15_IRQHandler+0x2c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000090 	.word	0x20000090

08000b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <TIM2_IRQHandler+0x24>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 fb0e 	bl	8002160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  i++;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <TIM2_IRQHandler+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <TIM2_IRQHandler+0x28>)
 8000b4c:	601a      	str	r2, [r3, #0]
  flag = 0;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <TIM2_IRQHandler+0x2c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	20000088 	.word	0x20000088
 8000b64:	2000008c 	.word	0x2000008c

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <SystemInit+0x64>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <SystemInit+0x64>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0049      	lsls	r1, r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <SystemInit+0x64>)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <SystemInit+0x64>)
 8000b80:	4913      	ldr	r1, [pc, #76]	; (8000bd0 <SystemInit+0x68>)
 8000b82:	400a      	ands	r2, r1
 8000b84:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <SystemInit+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <SystemInit+0x64>)
 8000b8c:	4911      	ldr	r1, [pc, #68]	; (8000bd4 <SystemInit+0x6c>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <SystemInit+0x64>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <SystemInit+0x64>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <SystemInit+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <SystemInit+0x64>)
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <SystemInit+0x70>)
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <SystemInit+0x64>)
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <SystemInit+0x64>)
 8000bb0:	490a      	ldr	r1, [pc, #40]	; (8000bdc <SystemInit+0x74>)
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SystemInit+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SystemInit+0x78>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	0512      	lsls	r2, r2, #20
 8000bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	88ff400c 	.word	0x88ff400c
 8000bd4:	fef6fff6 	.word	0xfef6fff6
 8000bd8:	fffbffff 	.word	0xfffbffff
 8000bdc:	ff02ffff 	.word	0xff02ffff
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000be8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bea:	e003      	b.n	8000bf4 <LoopCopyDataInit>

08000bec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000bee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bf2:	3104      	adds	r1, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000bf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bfc:	d3f6      	bcc.n	8000bec <CopyDataInit>
  ldr  r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000c00:	e002      	b.n	8000c08 <LoopFillZerobss>

08000c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c02:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c06:	3204      	adds	r2, #4

08000c08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <LoopForever+0x16>)
  cmp  r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c0c:	d3f9      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c0e:	f7ff ffab 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fa7b 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fc0f 	bl	8000438 <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
   ldr   r0, =_estack
 8000c1c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000c20:	080031f8 	.word	0x080031f8
  ldr  r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c28:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8000c2c:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8000c30:	2000015c 	.word	0x2000015c

08000c34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_COMP_IRQHandler>
	...

08000c38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x3c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Init+0x3c>)
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 f811 	bl	8000c78 <HAL_InitTick>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e001      	b.n	8000c66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c62:	f7ff fec1 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_InitTick+0x50>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	23fa      	movs	r3, #250	; 0xfa
 8000c8e:	0099      	lsls	r1, r3, #2
 8000c90:	0010      	movs	r0, r2
 8000c92:	f7ff fa39 	bl	8000108 <__udivsi3>
 8000c96:	0003      	movs	r3, r0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 f8fa 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d004      	beq.n	8000cac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e006      	b.n	8000cba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 f8c7 	bl	8000e48 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	781b      	ldrb	r3, [r3, #0]
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000068 	.word	0x20000068

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  uwTick++;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <HAL_IncTick+0x14>)
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000158 	.word	0x20000158

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000158 	.word	0x20000158

08000cf8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	231f      	movs	r3, #31
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <NVIC_EnableIRQ+0x28>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	4091      	lsls	r1, r2
 8000d14:	000a      	movs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b7f      	cmp	r3, #127	; 0x7f
 8000d38:	d932      	bls.n	8000da0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <NVIC_SetPriority+0xd4>)
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	230f      	movs	r3, #15
 8000d44:	400b      	ands	r3, r1
 8000d46:	3b08      	subs	r3, #8
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	18d3      	adds	r3, r2, r3
 8000d50:	3304      	adds	r3, #4
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1dfa      	adds	r2, r7, #7
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	0011      	movs	r1, r2
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	00d2      	lsls	r2, r2, #3
 8000d60:	21ff      	movs	r1, #255	; 0xff
 8000d62:	4091      	lsls	r1, r2
 8000d64:	000a      	movs	r2, r1
 8000d66:	43d2      	mvns	r2, r2
 8000d68:	401a      	ands	r2, r3
 8000d6a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	019b      	lsls	r3, r3, #6
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	401a      	ands	r2, r3
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	4003      	ands	r3, r0
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001c      	movs	r4, r3
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	4023      	ands	r3, r4
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	3306      	adds	r3, #6
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	18c3      	adds	r3, r0, r3
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9e:	e027      	b.n	8000df0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	33c0      	adds	r3, #192	; 0xc0
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	589b      	ldr	r3, [r3, r2]
 8000db0:	1dfa      	adds	r2, r7, #7
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	0011      	movs	r1, r2
 8000db6:	2203      	movs	r2, #3
 8000db8:	400a      	ands	r2, r1
 8000dba:	00d2      	lsls	r2, r2, #3
 8000dbc:	21ff      	movs	r1, #255	; 0xff
 8000dbe:	4091      	lsls	r1, r2
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	019b      	lsls	r3, r3, #6
 8000dcc:	22ff      	movs	r2, #255	; 0xff
 8000dce:	401a      	ands	r2, r3
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	4003      	ands	r3, r0
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <NVIC_SetPriority+0xd8>)
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	430a      	orrs	r2, r1
 8000dea:	33c0      	adds	r3, #192	; 0xc0
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	501a      	str	r2, [r3, r0]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b003      	add	sp, #12
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <SysTick_Config+0x40>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e010      	b.n	8000e38 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <SysTick_Config+0x44>)
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	3a01      	subs	r2, #1
 8000e1c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	2103      	movs	r1, #3
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff ff7d 	bl	8000d24 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SysTick_Config+0x44>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x44>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	00ffffff 	.word	0x00ffffff
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	210f      	movs	r1, #15
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	1c02      	adds	r2, r0, #0
 8000e58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <NVIC_SetPriority>
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	0002      	movs	r2, r0
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ff37 	bl	8000cf8 <NVIC_EnableIRQ>
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff ffaf 	bl	8000e00 <SysTick_Config>
 8000ea2:	0003      	movs	r3, r0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ec2:	e155      	b.n	8001170 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x30>
 8000eda:	e146      	b.n	800116a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x40>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b12      	cmp	r3, #18
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	58d3      	ldr	r3, [r2, r3]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2207      	movs	r2, #7
 8000efe:	4013      	ands	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2107      	movs	r1, #7
 8000f18:	400b      	ands	r3, r1
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00b      	beq.n	8000f54 <HAL_GPIO_Init+0xa8>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	2b11      	cmp	r3, #17
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	409a      	lsls	r2, r3
 8000f62:	0013      	movs	r3, r2
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	055b      	lsls	r3, r3, #21
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0x17c>
 8001026:	e0a0      	b.n	800116a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x2dc>)
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	4b56      	ldr	r3, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x2dc>)
 800102e:	2101      	movs	r1, #1
 8001030:	430a      	orrs	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001034:	4a55      	ldr	r2, [pc, #340]	; (800118c <HAL_GPIO_Init+0x2e0>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	589b      	ldr	r3, [r3, r2]
 8001040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	409a      	lsls	r2, r3
 800104e:	0013      	movs	r3, r2
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	429a      	cmp	r2, r3
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x1f6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x2e4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x1f2>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a49      	ldr	r2, [pc, #292]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1ee>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1ea>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1e6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1e2>
 800108a:	2305      	movs	r3, #5
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 800108e:	2306      	movs	r3, #6
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x1f8>
 80010a2:	2300      	movs	r3, #0
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	2103      	movs	r1, #3
 80010a8:	400a      	ands	r2, r1
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2e0>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	4013      	ands	r3, r2
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	035b      	lsls	r3, r3, #13
 800112e:	4013      	ands	r3, r2
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	039b      	lsls	r3, r3, #14
 8001158:	4013      	ands	r3, r2
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	40da      	lsrs	r2, r3
 8001178:	1e13      	subs	r3, r2, #0
 800117a:	d000      	beq.n	800117e <HAL_GPIO_Init+0x2d2>
 800117c:	e6a2      	b.n	8000ec4 <HAL_GPIO_Init+0x18>
  }
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	50000400 	.word	0x50000400
 8001194:	50000800 	.word	0x50000800
 8001198:	50000c00 	.word	0x50000c00
 800119c:	50001000 	.word	0x50001000
 80011a0:	50001c00 	.word	0x50001c00
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	0008      	movs	r0, r1
 80011b2:	0011      	movs	r1, r2
 80011b4:	1cbb      	adds	r3, r7, #2
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	1c7b      	adds	r3, r7, #1
 80011bc:	1c0a      	adds	r2, r1, #0
 80011be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80011c0:	1c7b      	adds	r3, r7, #1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	881a      	ldrh	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dbb      	adds	r3, r7, #6
 80011ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	1dba      	adds	r2, r7, #6
 80011f6:	8812      	ldrh	r2, [r2, #0]
 80011f8:	4013      	ands	r3, r2
 80011fa:	d008      	beq.n	800120e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011fe:	1dba      	adds	r2, r7, #6
 8001200:	8812      	ldrh	r2, [r2, #0]
 8001202:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f807 	bl	800121c <HAL_GPIO_EXTI_Callback>
  }
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40010400 	.word	0x40010400

0800121c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	0002      	movs	r2, r0
 8001224:	1dbb      	adds	r3, r7, #6
 8001226:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f000 fbbc 	bl	80019bc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001244:	4bc8      	ldr	r3, [pc, #800]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124e:	4bc6      	ldr	r3, [pc, #792]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x36>
 8001264:	e07e      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d007      	beq.n	800127c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x68>
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	429a      	cmp	r2, r3
 800127a:	d10d      	bne.n	8001298 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4bba      	ldr	r3, [pc, #744]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x5a>
 8001288:	e06b      	b.n	8001362 <HAL_RCC_OscConfig+0x132>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d167      	bne.n	8001362 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f000 fb92 	bl	80019bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_OscConfig+0x84>
 80012a4:	4bb0      	ldr	r3, [pc, #704]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4baf      	ldr	r3, [pc, #700]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0249      	lsls	r1, r1, #9
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e027      	b.n	8001304 <HAL_RCC_OscConfig+0xd4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	23a0      	movs	r3, #160	; 0xa0
 80012ba:	02db      	lsls	r3, r3, #11
 80012bc:	429a      	cmp	r2, r3
 80012be:	d10e      	bne.n	80012de <HAL_RCC_OscConfig+0xae>
 80012c0:	4ba9      	ldr	r3, [pc, #676]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4ba8      	ldr	r3, [pc, #672]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	02c9      	lsls	r1, r1, #11
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	4ba6      	ldr	r3, [pc, #664]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4ba5      	ldr	r3, [pc, #660]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0249      	lsls	r1, r1, #9
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e012      	b.n	8001304 <HAL_RCC_OscConfig+0xd4>
 80012de:	4ba2      	ldr	r3, [pc, #648]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4ba1      	ldr	r3, [pc, #644]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012e4:	49a1      	ldr	r1, [pc, #644]	; (800156c <HAL_RCC_OscConfig+0x33c>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4b9b      	ldr	r3, [pc, #620]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b9a      	ldr	r3, [pc, #616]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80012fe:	499c      	ldr	r1, [pc, #624]	; (8001570 <HAL_RCC_OscConfig+0x340>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d015      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcea 	bl	8000ce4 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001314:	e009      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fce5 	bl	8000ce4 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	; 0x64
 8001322:	d902      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	f000 fb49 	bl	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800132a:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d0ef      	beq.n	8001316 <HAL_RCC_OscConfig+0xe6>
 8001336:	e015      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcd4 	bl	8000ce4 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001342:	f7ff fccf 	bl	8000ce4 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e333      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	029b      	lsls	r3, r3, #10
 800135c:	4013      	ands	r3, r2
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x112>
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001362:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d100      	bne.n	8001370 <HAL_RCC_OscConfig+0x140>
 800136e:	e098      	b.n	80014a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	2220      	movs	r2, #32
 800137a:	4013      	ands	r3, r2
 800137c:	d009      	beq.n	8001392 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800137e:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b79      	ldr	r3, [pc, #484]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001384:	2120      	movs	r1, #32
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	2220      	movs	r2, #32
 800138e:	4393      	bics	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d13d      	bne.n	800141a <HAL_RCC_OscConfig+0x1ea>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d13a      	bne.n	800141a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013a4:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d004      	beq.n	80013b8 <HAL_RCC_OscConfig+0x188>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e301      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a6d      	ldr	r2, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x344>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	021a      	lsls	r2, r3, #8
 80013c8:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2209      	movs	r2, #9
 80013d4:	4393      	bics	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e0:	f000 fc20 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 80013e4:	0001      	movs	r1, r0
 80013e6:	4b60      	ldr	r3, [pc, #384]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	220f      	movs	r2, #15
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a61      	ldr	r2, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x348>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	000a      	movs	r2, r1
 80013f6:	40da      	lsrs	r2, r3
 80013f8:	4b60      	ldr	r3, [pc, #384]	; (800157c <HAL_RCC_OscConfig+0x34c>)
 80013fa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80013fc:	2513      	movs	r5, #19
 80013fe:	197c      	adds	r4, r7, r5
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fc39 	bl	8000c78 <HAL_InitTick>
 8001406:	0003      	movs	r3, r0
 8001408:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800140a:	197b      	adds	r3, r7, r5
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d047      	beq.n	80014a2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001412:	2313      	movs	r3, #19
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	e2d0      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	d027      	beq.n	8001470 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2209      	movs	r2, #9
 8001426:	4393      	bics	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc57 	bl	8000ce4 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc52 	bl	8000ce4 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e2b6      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d0f1      	beq.n	800143c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a45      	ldr	r2, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x344>)
 800145e:	4013      	ands	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	021a      	lsls	r2, r3, #8
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e018      	b.n	80014a2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc32 	bl	8000ce4 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fc2d 	bl	8000ce4 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e291      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2204      	movs	r2, #4
 800149e:	4013      	ands	r3, r2
 80014a0:	d1f1      	bne.n	8001486 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2210      	movs	r2, #16
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x27e>
 80014ac:	e09f      	b.n	80015ee <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d13f      	bne.n	8001534 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b4:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x29c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e277      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a2b      	ldr	r2, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x350>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	0a19      	lsrs	r1, r3, #8
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	061a      	lsls	r2, r3, #24
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	0b5b      	lsrs	r3, r3, #13
 80014fa:	3301      	adds	r3, #1
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0212      	lsls	r2, r2, #8
 8001500:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	210f      	movs	r1, #15
 800150a:	400b      	ands	r3, r1
 800150c:	491a      	ldr	r1, [pc, #104]	; (8001578 <HAL_RCC_OscConfig+0x348>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_RCC_OscConfig+0x34c>)
 8001514:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001516:	2513      	movs	r5, #19
 8001518:	197c      	adds	r4, r7, r5
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fbac 	bl	8000c78 <HAL_InitTick>
 8001520:	0003      	movs	r3, r0
 8001522:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001524:	197b      	adds	r3, r7, r5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d060      	beq.n	80015ee <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800152c:	2313      	movs	r3, #19
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	e243      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03e      	beq.n	80015ba <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x338>)
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	0049      	lsls	r1, r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fbcb 	bl	8000ce4 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001552:	e017      	b.n	8001584 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001554:	f7ff fbc6 	bl	8000ce4 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d910      	bls.n	8001584 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e22a      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	fffeffff 	.word	0xfffeffff
 8001570:	fffbffff 	.word	0xfffbffff
 8001574:	ffffe0ff 	.word	0xffffe0ff
 8001578:	0800317c 	.word	0x0800317c
 800157c:	20000068 	.word	0x20000068
 8001580:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001584:	4bc6      	ldr	r3, [pc, #792]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d0e1      	beq.n	8001554 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001590:	4bc3      	ldr	r3, [pc, #780]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4ac3      	ldr	r2, [pc, #780]	; (80018a4 <HAL_RCC_OscConfig+0x674>)
 8001596:	4013      	ands	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	4bc0      	ldr	r3, [pc, #768]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a4:	4bbe      	ldr	r3, [pc, #760]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	0a19      	lsrs	r1, r3, #8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	4bbb      	ldr	r3, [pc, #748]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	e019      	b.n	80015ee <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ba:	4bb9      	ldr	r3, [pc, #740]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4bb8      	ldr	r3, [pc, #736]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015c0:	49b9      	ldr	r1, [pc, #740]	; (80018a8 <HAL_RCC_OscConfig+0x678>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb8d 	bl	8000ce4 <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb88 	bl	8000ce4 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1ec      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015e2:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2208      	movs	r2, #8
 80015f4:	4013      	ands	r3, r2
 80015f6:	d036      	beq.n	8001666 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d019      	beq.n	8001634 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4ba7      	ldr	r3, [pc, #668]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001604:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001606:	2101      	movs	r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fb6a 	bl	8000ce4 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fb65 	bl	8000ce4 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1c9      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001628:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d0f1      	beq.n	8001616 <HAL_RCC_OscConfig+0x3e6>
 8001632:	e018      	b.n	8001666 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b9a      	ldr	r3, [pc, #616]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800163a:	2101      	movs	r1, #1
 800163c:	438a      	bics	r2, r1
 800163e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb50 	bl	8000ce4 <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fb4b 	bl	8000ce4 <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1af      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800165e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	d1f1      	bne.n	800164a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d100      	bne.n	8001672 <HAL_RCC_OscConfig+0x442>
 8001670:	e0af      	b.n	80017d2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2323      	movs	r3, #35	; 0x23
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800167c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	055b      	lsls	r3, r3, #21
 8001682:	4013      	ands	r3, r2
 8001684:	d10a      	bne.n	800169c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800168a:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0549      	lsls	r1, r1, #21
 8001690:	430a      	orrs	r2, r1
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001694:	2323      	movs	r3, #35	; 0x23
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x67c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d11a      	bne.n	80016de <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a8:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x67c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x67c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0049      	lsls	r1, r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fb15 	bl	8000ce4 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff fb10 	bl	8000ce4 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e174      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x67c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_OscConfig+0x4ca>
 80016ea:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80016ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ee:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0049      	lsls	r1, r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50
 80016f8:	e031      	b.n	800175e <HAL_RCC_OscConfig+0x52e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x4ec>
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001706:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001708:	4967      	ldr	r1, [pc, #412]	; (80018a8 <HAL_RCC_OscConfig+0x678>)
 800170a:	400a      	ands	r2, r1
 800170c:	651a      	str	r2, [r3, #80]	; 0x50
 800170e:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001714:	4966      	ldr	r1, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x680>)
 8001716:	400a      	ands	r2, r1
 8001718:	651a      	str	r2, [r3, #80]	; 0x50
 800171a:	e020      	b.n	800175e <HAL_RCC_OscConfig+0x52e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	429a      	cmp	r2, r3
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0x516>
 8001728:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800172a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172c:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	430a      	orrs	r2, r1
 8001734:	651a      	str	r2, [r3, #80]	; 0x50
 8001736:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0049      	lsls	r1, r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	651a      	str	r2, [r3, #80]	; 0x50
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0x52e>
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800174c:	4956      	ldr	r1, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x678>)
 800174e:	400a      	ands	r2, r1
 8001750:	651a      	str	r2, [r3, #80]	; 0x50
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001756:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001758:	4955      	ldr	r1, [pc, #340]	; (80018b0 <HAL_RCC_OscConfig+0x680>)
 800175a:	400a      	ands	r2, r1
 800175c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d015      	beq.n	8001792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fabd 	bl	8000ce4 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800176e:	e009      	b.n	8001784 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fab8 	bl	8000ce4 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a4e      	ldr	r2, [pc, #312]	; (80018b4 <HAL_RCC_OscConfig+0x684>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e11b      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001784:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4013      	ands	r3, r2
 800178e:	d0ef      	beq.n	8001770 <HAL_RCC_OscConfig+0x540>
 8001790:	e014      	b.n	80017bc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff faa7 	bl	8000ce4 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800179a:	e009      	b.n	80017b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff faa2 	bl	8000ce4 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x684>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e105      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1ef      	bne.n	800179c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017bc:	2323      	movs	r3, #35	; 0x23
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017cc:	493a      	ldr	r1, [pc, #232]	; (80018b8 <HAL_RCC_OscConfig+0x688>)
 80017ce:	400a      	ands	r2, r1
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2220      	movs	r2, #32
 80017d8:	4013      	ands	r3, r2
 80017da:	d049      	beq.n	8001870 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d026      	beq.n	8001832 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	430a      	orrs	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x68c>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_RCC_OscConfig+0x68c>)
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0189      	lsls	r1, r1, #6
 8001806:	430a      	orrs	r2, r1
 8001808:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fa6b 	bl	8000ce4 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001814:	f7ff fa66 	bl	8000ce4 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0ca      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d0f1      	beq.n	8001814 <HAL_RCC_OscConfig+0x5e4>
 8001830:	e01e      	b.n	8001870 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001838:	2101      	movs	r1, #1
 800183a:	438a      	bics	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_RCC_OscConfig+0x68c>)
 8001840:	6a1a      	ldr	r2, [r3, #32]
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x68c>)
 8001844:	491e      	ldr	r1, [pc, #120]	; (80018c0 <HAL_RCC_OscConfig+0x690>)
 8001846:	400a      	ands	r2, r1
 8001848:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fa4b 	bl	8000ce4 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001854:	f7ff fa46 	bl	8000ce4 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0aa      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d1f1      	bne.n	8001854 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d100      	bne.n	800187a <HAL_RCC_OscConfig+0x64a>
 8001878:	e09f      	b.n	80019ba <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x652>
 8001880:	e078      	b.n	8001974 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	2b02      	cmp	r3, #2
 8001888:	d159      	bne.n	800193e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x694>)
 8001892:	400a      	ands	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fa25 	bl	8000ce4 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800189e:	e01c      	b.n	80018da <HAL_RCC_OscConfig+0x6aa>
 80018a0:	40021000 	.word	0x40021000
 80018a4:	ffff1fff 	.word	0xffff1fff
 80018a8:	fffffeff 	.word	0xfffffeff
 80018ac:	40007000 	.word	0x40007000
 80018b0:	fffffbff 	.word	0xfffffbff
 80018b4:	00001388 	.word	0x00001388
 80018b8:	efffffff 	.word	0xefffffff
 80018bc:	40010000 	.word	0x40010000
 80018c0:	ffffdfff 	.word	0xffffdfff
 80018c4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fa0c 	bl	8000ce4 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e070      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	049b      	lsls	r3, r3, #18
 80018e2:	4013      	ands	r3, r2
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x798>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	431a      	orrs	r2, r3
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001902:	430a      	orrs	r2, r1
 8001904:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0449      	lsls	r1, r1, #17
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff f9e6 	bl	8000ce4 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f9e1 	bl	8000ce4 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e045      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	049b      	lsls	r3, r3, #18
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x6ee>
 800193c:	e03d      	b.n	80019ba <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001944:	4921      	ldr	r1, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x79c>)
 8001946:	400a      	ands	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff f9cb 	bl	8000ce4 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f9c6 	bl	8000ce4 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e02a      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x724>
 8001972:	e022      	b.n	80019ba <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x794>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	025b      	lsls	r3, r3, #9
 800198c:	401a      	ands	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	429a      	cmp	r2, r3
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	23f0      	movs	r3, #240	; 0xf0
 800199a:	039b      	lsls	r3, r3, #14
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	23c0      	movs	r3, #192	; 0xc0
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b00a      	add	sp, #40	; 0x28
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	ff02ffff 	.word	0xff02ffff
 80019cc:	feffffff 	.word	0xfeffffff

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e10d      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d911      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0f4      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	22f0      	movs	r2, #240	; 0xf0
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d100      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x70>
 8001a3e:	e089      	b.n	8001b54 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	d120      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d3      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	049b      	lsls	r3, r3, #18
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d114      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0c7      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a78:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0bc      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a86:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0b4      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aaa:	f7ff f91b 	bl	8000ce4 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d111      	bne.n	8001ade <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aba:	e009      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff f912 	bl	8000ce4 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e097      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d1ef      	bne.n	8001abc <HAL_RCC_ClockConfig+0xec>
 8001adc:	e03a      	b.n	8001b54 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d111      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae6:	e009      	b.n	8001afc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f8fc 	bl	8000ce4 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	4a47      	ldr	r2, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x240>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e081      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	220c      	movs	r2, #12
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d1ef      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x118>
 8001b08:	e024      	b.n	8001b54 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d11b      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f8e6 	bl	8000ce4 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e06b      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d1ef      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x144>
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f8d5 	bl	8000ce4 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a33      	ldr	r2, [pc, #204]	; (8001c10 <HAL_RCC_ClockConfig+0x240>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e05a      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	220c      	movs	r2, #12
 8001b50:	4013      	ands	r3, r2
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d211      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x238>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e03c      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	4013      	ands	r3, r2
 8001bac:	d00a      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_RCC_ClockConfig+0x248>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	00da      	lsls	r2, r3, #3
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc4:	f000 f82e 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001bc8:	0001      	movs	r1, r0
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_ClockConfig+0x23c>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_RCC_ClockConfig+0x24c>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	000a      	movs	r2, r1
 8001bda:	40da      	lsrs	r2, r3
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_ClockConfig+0x250>)
 8001bde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001be0:	250b      	movs	r5, #11
 8001be2:	197c      	adds	r4, r7, r5
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff f847 	bl	8000c78 <HAL_InitTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001bf6:	230b      	movs	r3, #11
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	0018      	movs	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b004      	add	sp, #16
 8001c06:	bdb0      	pop	{r4, r5, r7, pc}
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	00001388 	.word	0x00001388
 8001c14:	fffff8ff 	.word	0xfffff8ff
 8001c18:	ffffc7ff 	.word	0xffffc7ff
 8001c1c:	0800317c 	.word	0x0800317c
 8001c20:	20000068 	.word	0x20000068

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	220c      	movs	r2, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d00e      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d00f      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d157      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c42:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2210      	movs	r2, #16
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d002      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c50:	e05d      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	e05a      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5a:	613b      	str	r3, [r7, #16]
      break;
 8001c5c:	e057      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	0c9b      	lsrs	r3, r3, #18
 8001c62:	220f      	movs	r2, #15
 8001c64:	4013      	ands	r3, r2
 8001c66:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	0d9b      	lsrs	r3, r3, #22
 8001c70:	2203      	movs	r2, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	3301      	adds	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	4013      	ands	r3, r2
 8001c82:	d00f      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	000a      	movs	r2, r1
 8001c88:	0152      	lsls	r2, r2, #5
 8001c8a:	1a52      	subs	r2, r2, r1
 8001c8c:	0193      	lsls	r3, r2, #6
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	185b      	adds	r3, r3, r1
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fa35 	bl	8000108 <__udivsi3>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e023      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d00f      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	000a      	movs	r2, r1
 8001cb2:	0152      	lsls	r2, r2, #5
 8001cb4:	1a52      	subs	r2, r2, r1
 8001cb6:	0193      	lsls	r3, r2, #6
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	185b      	adds	r3, r3, r1
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fa20 	bl	8000108 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	0152      	lsls	r2, r2, #5
 8001cd4:	1a52      	subs	r2, r2, r1
 8001cd6:	0193      	lsls	r3, r2, #6
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	185b      	adds	r3, r3, r1
 8001cde:	029b      	lsls	r3, r3, #10
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7fe fa10 	bl	8000108 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	e00d      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0b5b      	lsrs	r3, r3, #13
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      break;
 8001d0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d0e:	693b      	ldr	r3, [r7, #16]
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b006      	add	sp, #24
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	003d0900 	.word	0x003d0900
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	08003194 	.word	0x08003194

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000068 	.word	0x20000068

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff2 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d48:	0001      	movs	r1, r0
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	2207      	movs	r2, #7
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	000b      	movs	r3, r1
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000
 8001d68:	0800318c 	.word	0x0800318c

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffdc 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d74:	0001      	movs	r1, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	40d9      	lsrs	r1, r3
 8001d86:	000b      	movs	r3, r1
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40021000 	.word	0x40021000
 8001d94:	0800318c 	.word	0x0800318c

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	4013      	ands	r3, r2
 8001da8:	d106      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	d100      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001db6:	e0dd      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001db8:	2317      	movs	r3, #23
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc0:	4ba4      	ldr	r3, [pc, #656]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d10a      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4ba1      	ldr	r3, [pc, #644]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	0549      	lsls	r1, r1, #21
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dda:	2317      	movs	r3, #23
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d11a      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b9a      	ldr	r3, [pc, #616]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b99      	ldr	r3, [pc, #612]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0049      	lsls	r1, r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ff72 	bl	8000ce4 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7fe ff6d 	bl	8000ce4 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e118      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e24:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	23c0      	movs	r3, #192	; 0xc0
 8001e2a:	039b      	lsls	r3, r3, #14
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	039b      	lsls	r3, r3, #14
 8001e38:	4013      	ands	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	23c0      	movs	r3, #192	; 0xc0
 8001e46:	039b      	lsls	r3, r3, #14
 8001e48:	4013      	ands	r3, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	401a      	ands	r2, r3
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10a      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	029b      	lsls	r3, r3, #10
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d101      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0e8      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e78:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d049      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	23c0      	movs	r3, #192	; 0xc0
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	4013      	ands	r3, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d004      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d034      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d02e      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ec0:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0309      	lsls	r1, r1, #12
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ede:	4960      	ldr	r1, [pc, #384]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d014      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fef6 	bl	8000ce4 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001efc:	e009      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fef1 	bl	8000ce4 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e09b      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0ef      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	401a      	ands	r2, r3
 8001f28:	23c0      	movs	r3, #192	; 0xc0
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001f30:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	23c0      	movs	r3, #192	; 0xc0
 8001f40:	039b      	lsls	r3, r3, #14
 8001f42:	401a      	ands	r2, r3
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	23c0      	movs	r3, #192	; 0xc0
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	401a      	ands	r2, r3
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f5e:	2317      	movs	r3, #23
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6e:	493f      	ldr	r1, [pc, #252]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	2203      	movs	r2, #3
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002008:	430a      	orrs	r2, r1
 800200a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2240      	movs	r2, #64	; 0x40
 8002012:	4013      	ands	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002026:	430a      	orrs	r2, r1
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002044:	430a      	orrs	r2, r1
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b006      	add	sp, #24
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	fffcffff 	.word	0xfffcffff
 8002060:	fff7ffff 	.word	0xfff7ffff
 8002064:	00001388 	.word	0x00001388
 8002068:	ffcfffff 	.word	0xffcfffff
 800206c:	efffffff 	.word	0xefffffff
 8002070:	fffff3ff 	.word	0xfffff3ff
 8002074:	ffffcfff 	.word	0xffffcfff
 8002078:	fbffffff 	.word	0xfbffffff
 800207c:	fff3ffff 	.word	0xfff3ffff

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e01e      	b.n	80020d0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2239      	movs	r2, #57	; 0x39
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2238      	movs	r2, #56	; 0x38
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7fe fcb1 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2239      	movs	r2, #57	; 0x39
 80020b2:	2102      	movs	r1, #2
 80020b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	0019      	movs	r1, r3
 80020c0:	0010      	movs	r0, r2
 80020c2:	f000 fa1b 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2239      	movs	r2, #57	; 0x39
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d007      	beq.n	8002112 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b004      	add	sp, #16
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	438a      	bics	r2, r1
 8002132:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_TIM_Base_Stop_IT+0x40>)
 800213c:	4013      	ands	r3, r2
 800213e:	d107      	bne.n	8002150 <HAL_TIM_Base_Stop_IT+0x34>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b002      	add	sp, #8
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	00001111 	.word	0x00001111

08002160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d124      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d11d      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2203      	movs	r2, #3
 800218a:	4252      	negs	r2, r2
 800218c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f992 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 80021a8:	e007      	b.n	80021ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f985 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f991 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d125      	bne.n	800221a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2204      	movs	r2, #4
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11e      	bne.n	800221a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2205      	movs	r2, #5
 80021e2:	4252      	negs	r2, r2
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f965 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 8002202:	e007      	b.n	8002214 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f958 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f964 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2208      	movs	r2, #8
 8002222:	4013      	ands	r3, r2
 8002224:	2b08      	cmp	r3, #8
 8002226:	d124      	bne.n	8002272 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2208      	movs	r2, #8
 8002230:	4013      	ands	r3, r2
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11d      	bne.n	8002272 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2209      	movs	r2, #9
 800223c:	4252      	negs	r2, r2
 800223e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f939 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 800225a:	e007      	b.n	800226c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f92c 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f938 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2210      	movs	r2, #16
 800227a:	4013      	ands	r3, r2
 800227c:	2b10      	cmp	r3, #16
 800227e:	d125      	bne.n	80022cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2210      	movs	r2, #16
 8002288:	4013      	ands	r3, r2
 800228a:	2b10      	cmp	r3, #16
 800228c:	d11e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2211      	movs	r2, #17
 8002294:	4252      	negs	r2, r2
 8002296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2208      	movs	r2, #8
 800229c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	23c0      	movs	r3, #192	; 0xc0
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d004      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 f90c 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 80022b4:	e007      	b.n	80022c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f8ff 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 f90b 	bl	80024dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10f      	bne.n	80022fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2202      	movs	r2, #2
 80022ee:	4252      	negs	r2, r2
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f8d9 	bl	80024ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	4013      	ands	r3, r2
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d10f      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	4013      	ands	r3, r2
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d108      	bne.n	8002328 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2241      	movs	r2, #65	; 0x41
 800231c:	4252      	negs	r2, r2
 800231e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0018      	movs	r0, r3
 8002324:	f000 f8e2 	bl	80024ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2238      	movs	r2, #56	; 0x38
 800233e:	5c9b      	ldrb	r3, [r3, r2]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_TIM_ConfigClockSource+0x18>
 8002344:	2302      	movs	r3, #2
 8002346:	e0ab      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x170>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2238      	movs	r2, #56	; 0x38
 800234c:	2101      	movs	r1, #1
 800234e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2239      	movs	r2, #57	; 0x39
 8002354:	2102      	movs	r1, #2
 8002356:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2277      	movs	r2, #119	; 0x77
 8002364:	4393      	bics	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_TIM_ConfigClockSource+0x178>)
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d100      	bne.n	8002382 <HAL_TIM_ConfigClockSource+0x52>
 8002380:	e06b      	b.n	800245a <HAL_TIM_ConfigClockSource+0x12a>
 8002382:	d80e      	bhi.n	80023a2 <HAL_TIM_ConfigClockSource+0x72>
 8002384:	2b10      	cmp	r3, #16
 8002386:	d100      	bne.n	800238a <HAL_TIM_ConfigClockSource+0x5a>
 8002388:	e077      	b.n	800247a <HAL_TIM_ConfigClockSource+0x14a>
 800238a:	d803      	bhi.n	8002394 <HAL_TIM_ConfigClockSource+0x64>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d100      	bne.n	8002392 <HAL_TIM_ConfigClockSource+0x62>
 8002390:	e073      	b.n	800247a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002392:	e07c      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002394:	2b20      	cmp	r3, #32
 8002396:	d100      	bne.n	800239a <HAL_TIM_ConfigClockSource+0x6a>
 8002398:	e06f      	b.n	800247a <HAL_TIM_ConfigClockSource+0x14a>
 800239a:	2b30      	cmp	r3, #48	; 0x30
 800239c:	d100      	bne.n	80023a0 <HAL_TIM_ConfigClockSource+0x70>
 800239e:	e06c      	b.n	800247a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80023a0:	e075      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80023a2:	2b70      	cmp	r3, #112	; 0x70
 80023a4:	d00e      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x94>
 80023a6:	d804      	bhi.n	80023b2 <HAL_TIM_ConfigClockSource+0x82>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d036      	beq.n	800241a <HAL_TIM_ConfigClockSource+0xea>
 80023ac:	2b60      	cmp	r3, #96	; 0x60
 80023ae:	d044      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80023b0:	e06d      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0152      	lsls	r2, r2, #5
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d068      	beq.n	800248c <HAL_TIM_ConfigClockSource+0x15c>
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	0192      	lsls	r2, r2, #6
 80023be:	4293      	cmp	r3, r2
 80023c0:	d017      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80023c2:	e064      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f000 f96a 	bl	80026ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2277      	movs	r2, #119	; 0x77
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]
      break;
 80023f0:	e04d      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 f953 	bl	80026ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	01c9      	lsls	r1, r1, #7
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
      break;
 8002418:	e039      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	001a      	movs	r2, r3
 8002428:	f000 f8c6 	bl	80025b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2150      	movs	r1, #80	; 0x50
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f920 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002438:	e029      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	001a      	movs	r2, r3
 8002448:	f000 f8e4 	bl	8002614 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2160      	movs	r1, #96	; 0x60
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f910 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002458:	e019      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	001a      	movs	r2, r3
 8002468:	f000 f8a6 	bl	80025b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2140      	movs	r1, #64	; 0x40
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f900 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 8002478:	e009      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0019      	movs	r1, r3
 8002484:	0010      	movs	r0, r2
 8002486:	f000 f8f7 	bl	8002678 <TIM_ITRx_SetConfig>
      break;
 800248a:	e000      	b.n	800248e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800248c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2239      	movs	r2, #57	; 0x39
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2238      	movs	r2, #56	; 0x38
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	ffff00ff 	.word	0xffff00ff

080024ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	05db      	lsls	r3, r3, #23
 8002512:	429a      	cmp	r2, r3
 8002514:	d00b      	beq.n	800252e <TIM_Base_SetConfig+0x32>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <TIM_Base_SetConfig+0xac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0x32>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <TIM_Base_SetConfig+0xb0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0x32>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <TIM_Base_SetConfig+0xb4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2270      	movs	r2, #112	; 0x70
 8002532:	4393      	bics	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	429a      	cmp	r2, r3
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0x66>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <TIM_Base_SetConfig+0xac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0x66>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <TIM_Base_SetConfig+0xb0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0x66>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <TIM_Base_SetConfig+0xb4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <TIM_Base_SetConfig+0xb8>)
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	4393      	bics	r3, r2
 800257a:	001a      	movs	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	615a      	str	r2, [r3, #20]
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40010800 	.word	0x40010800
 80025b0:	40011400 	.word	0x40011400
 80025b4:	fffffcff 	.word	0xfffffcff

080025b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4393      	bics	r3, r2
 80025d2:	001a      	movs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	22f0      	movs	r2, #240	; 0xf0
 80025e2:	4393      	bics	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	220a      	movs	r2, #10
 80025f4:	4393      	bics	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	621a      	str	r2, [r3, #32]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}

08002614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	2210      	movs	r2, #16
 8002626:	4393      	bics	r3, r2
 8002628:	001a      	movs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <TIM_TI2_ConfigInputStage+0x60>)
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	031b      	lsls	r3, r3, #12
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	22a0      	movs	r2, #160	; 0xa0
 8002650:	4393      	bics	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	ffff0fff 	.word	0xffff0fff

08002678 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2270      	movs	r2, #112	; 0x70
 800268c:	4393      	bics	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	2207      	movs	r2, #7
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	609a      	str	r2, [r3, #8]
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <TIM_ETR_SetConfig+0x3c>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	ffff00ff 	.word	0xffff00ff

080026ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2238      	movs	r2, #56	; 0x38
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002700:	2302      	movs	r3, #2
 8002702:	e032      	b.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2238      	movs	r2, #56	; 0x38
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2239      	movs	r2, #57	; 0x39
 8002710:	2102      	movs	r1, #2
 8002712:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2270      	movs	r2, #112	; 0x70
 8002728:	4393      	bics	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	4393      	bics	r3, r2
 800273c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4313      	orrs	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2239      	movs	r2, #57	; 0x39
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2238      	movs	r2, #56	; 0x38
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	0018      	movs	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e044      	b.n	8002810 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	2b00      	cmp	r3, #0
 800278c:	d107      	bne.n	800279e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2270      	movs	r2, #112	; 0x70
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe f957 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2224      	movs	r2, #36	; 0x24
 80027a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 f830 	bl	800281c <UART_SetConfig>
 80027bc:	0003      	movs	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e024      	b.n	8002810 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 fb57 	bl	8002e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	490d      	ldr	r1, [pc, #52]	; (8002818 <HAL_UART_Init+0xa4>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	212a      	movs	r1, #42	; 0x2a
 80027f2:	438a      	bics	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 fbef 	bl	8002fec <UART_CheckIdleState>
 800280e:	0003      	movs	r3, r0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}
 8002818:	ffffb7ff 	.word	0xffffb7ff

0800281c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b08e      	sub	sp, #56	; 0x38
 8002820:	af00      	add	r7, sp, #0
 8002822:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002824:	231b      	movs	r3, #27
 8002826:	2218      	movs	r2, #24
 8002828:	4694      	mov	ip, r2
 800282a:	44bc      	add	ip, r7
 800282c:	4463      	add	r3, ip
 800282e:	2210      	movs	r2, #16
 8002830:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002832:	2300      	movs	r3, #0
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002836:	2313      	movs	r3, #19
 8002838:	2218      	movs	r2, #24
 800283a:	4694      	mov	ip, r2
 800283c:	44bc      	add	ip, r7
 800283e:	4463      	add	r3, ip
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4313      	orrs	r3, r2
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4aca      	ldr	r2, [pc, #808]	; (8002b90 <UART_SetConfig+0x374>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4ac5      	ldr	r2, [pc, #788]	; (8002b94 <UART_SetConfig+0x378>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4abf      	ldr	r2, [pc, #764]	; (8002b98 <UART_SetConfig+0x37c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a4:	4313      	orrs	r3, r2
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4abb      	ldr	r2, [pc, #748]	; (8002b9c <UART_SetConfig+0x380>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4ab7      	ldr	r2, [pc, #732]	; (8002ba0 <UART_SetConfig+0x384>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d134      	bne.n	8002932 <UART_SetConfig+0x116>
 80028c8:	4bb6      	ldr	r3, [pc, #728]	; (8002ba4 <UART_SetConfig+0x388>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	2203      	movs	r2, #3
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d015      	beq.n	8002900 <UART_SetConfig+0xe4>
 80028d4:	d304      	bcc.n	80028e0 <UART_SetConfig+0xc4>
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d00a      	beq.n	80028f0 <UART_SetConfig+0xd4>
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d018      	beq.n	8002910 <UART_SetConfig+0xf4>
 80028de:	e01f      	b.n	8002920 <UART_SetConfig+0x104>
 80028e0:	231b      	movs	r3, #27
 80028e2:	2218      	movs	r2, #24
 80028e4:	4694      	mov	ip, r2
 80028e6:	44bc      	add	ip, r7
 80028e8:	4463      	add	r3, ip
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e0c5      	b.n	8002a7c <UART_SetConfig+0x260>
 80028f0:	231b      	movs	r3, #27
 80028f2:	2218      	movs	r2, #24
 80028f4:	4694      	mov	ip, r2
 80028f6:	44bc      	add	ip, r7
 80028f8:	4463      	add	r3, ip
 80028fa:	2202      	movs	r2, #2
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e0bd      	b.n	8002a7c <UART_SetConfig+0x260>
 8002900:	231b      	movs	r3, #27
 8002902:	2218      	movs	r2, #24
 8002904:	4694      	mov	ip, r2
 8002906:	44bc      	add	ip, r7
 8002908:	4463      	add	r3, ip
 800290a:	2204      	movs	r2, #4
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e0b5      	b.n	8002a7c <UART_SetConfig+0x260>
 8002910:	231b      	movs	r3, #27
 8002912:	2218      	movs	r2, #24
 8002914:	4694      	mov	ip, r2
 8002916:	44bc      	add	ip, r7
 8002918:	4463      	add	r3, ip
 800291a:	2208      	movs	r2, #8
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e0ad      	b.n	8002a7c <UART_SetConfig+0x260>
 8002920:	231b      	movs	r3, #27
 8002922:	2218      	movs	r2, #24
 8002924:	4694      	mov	ip, r2
 8002926:	44bc      	add	ip, r7
 8002928:	4463      	add	r3, ip
 800292a:	2210      	movs	r2, #16
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	e0a4      	b.n	8002a7c <UART_SetConfig+0x260>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a9c      	ldr	r2, [pc, #624]	; (8002ba8 <UART_SetConfig+0x38c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d137      	bne.n	80029ac <UART_SetConfig+0x190>
 800293c:	4b99      	ldr	r3, [pc, #612]	; (8002ba4 <UART_SetConfig+0x388>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	220c      	movs	r2, #12
 8002942:	4013      	ands	r3, r2
 8002944:	2b04      	cmp	r3, #4
 8002946:	d018      	beq.n	800297a <UART_SetConfig+0x15e>
 8002948:	d802      	bhi.n	8002950 <UART_SetConfig+0x134>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <UART_SetConfig+0x13e>
 800294e:	e024      	b.n	800299a <UART_SetConfig+0x17e>
 8002950:	2b08      	cmp	r3, #8
 8002952:	d00a      	beq.n	800296a <UART_SetConfig+0x14e>
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d018      	beq.n	800298a <UART_SetConfig+0x16e>
 8002958:	e01f      	b.n	800299a <UART_SetConfig+0x17e>
 800295a:	231b      	movs	r3, #27
 800295c:	2218      	movs	r2, #24
 800295e:	4694      	mov	ip, r2
 8002960:	44bc      	add	ip, r7
 8002962:	4463      	add	r3, ip
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e088      	b.n	8002a7c <UART_SetConfig+0x260>
 800296a:	231b      	movs	r3, #27
 800296c:	2218      	movs	r2, #24
 800296e:	4694      	mov	ip, r2
 8002970:	44bc      	add	ip, r7
 8002972:	4463      	add	r3, ip
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e080      	b.n	8002a7c <UART_SetConfig+0x260>
 800297a:	231b      	movs	r3, #27
 800297c:	2218      	movs	r2, #24
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	2204      	movs	r2, #4
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e078      	b.n	8002a7c <UART_SetConfig+0x260>
 800298a:	231b      	movs	r3, #27
 800298c:	2218      	movs	r2, #24
 800298e:	4694      	mov	ip, r2
 8002990:	44bc      	add	ip, r7
 8002992:	4463      	add	r3, ip
 8002994:	2208      	movs	r2, #8
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e070      	b.n	8002a7c <UART_SetConfig+0x260>
 800299a:	231b      	movs	r3, #27
 800299c:	2218      	movs	r2, #24
 800299e:	4694      	mov	ip, r2
 80029a0:	44bc      	add	ip, r7
 80029a2:	4463      	add	r3, ip
 80029a4:	2210      	movs	r2, #16
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	e067      	b.n	8002a7c <UART_SetConfig+0x260>
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <UART_SetConfig+0x390>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d107      	bne.n	80029c6 <UART_SetConfig+0x1aa>
 80029b6:	231b      	movs	r3, #27
 80029b8:	2218      	movs	r2, #24
 80029ba:	4694      	mov	ip, r2
 80029bc:	44bc      	add	ip, r7
 80029be:	4463      	add	r3, ip
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e05a      	b.n	8002a7c <UART_SetConfig+0x260>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a79      	ldr	r2, [pc, #484]	; (8002bb0 <UART_SetConfig+0x394>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d107      	bne.n	80029e0 <UART_SetConfig+0x1c4>
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e04d      	b.n	8002a7c <UART_SetConfig+0x260>
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <UART_SetConfig+0x37c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d141      	bne.n	8002a6e <UART_SetConfig+0x252>
 80029ea:	4b6e      	ldr	r3, [pc, #440]	; (8002ba4 <UART_SetConfig+0x388>)
 80029ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ee:	23c0      	movs	r3, #192	; 0xc0
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4013      	ands	r3, r2
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	00d2      	lsls	r2, r2, #3
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01f      	beq.n	8002a3c <UART_SetConfig+0x220>
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d802      	bhi.n	8002a0a <UART_SetConfig+0x1ee>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <UART_SetConfig+0x200>
 8002a08:	e028      	b.n	8002a5c <UART_SetConfig+0x240>
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00c      	beq.n	8002a2c <UART_SetConfig+0x210>
 8002a12:	22c0      	movs	r2, #192	; 0xc0
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <UART_SetConfig+0x230>
 8002a1a:	e01f      	b.n	8002a5c <UART_SetConfig+0x240>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	2218      	movs	r2, #24
 8002a20:	4694      	mov	ip, r2
 8002a22:	44bc      	add	ip, r7
 8002a24:	4463      	add	r3, ip
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e027      	b.n	8002a7c <UART_SetConfig+0x260>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	4694      	mov	ip, r2
 8002a32:	44bc      	add	ip, r7
 8002a34:	4463      	add	r3, ip
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e01f      	b.n	8002a7c <UART_SetConfig+0x260>
 8002a3c:	231b      	movs	r3, #27
 8002a3e:	2218      	movs	r2, #24
 8002a40:	4694      	mov	ip, r2
 8002a42:	44bc      	add	ip, r7
 8002a44:	4463      	add	r3, ip
 8002a46:	2204      	movs	r2, #4
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e017      	b.n	8002a7c <UART_SetConfig+0x260>
 8002a4c:	231b      	movs	r3, #27
 8002a4e:	2218      	movs	r2, #24
 8002a50:	4694      	mov	ip, r2
 8002a52:	44bc      	add	ip, r7
 8002a54:	4463      	add	r3, ip
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e00f      	b.n	8002a7c <UART_SetConfig+0x260>
 8002a5c:	231b      	movs	r3, #27
 8002a5e:	2218      	movs	r2, #24
 8002a60:	4694      	mov	ip, r2
 8002a62:	44bc      	add	ip, r7
 8002a64:	4463      	add	r3, ip
 8002a66:	2210      	movs	r2, #16
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	e006      	b.n	8002a7c <UART_SetConfig+0x260>
 8002a6e:	231b      	movs	r3, #27
 8002a70:	2218      	movs	r2, #24
 8002a72:	4694      	mov	ip, r2
 8002a74:	44bc      	add	ip, r7
 8002a76:	4463      	add	r3, ip
 8002a78:	2210      	movs	r2, #16
 8002a7a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <UART_SetConfig+0x37c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d000      	beq.n	8002a88 <UART_SetConfig+0x26c>
 8002a86:	e09d      	b.n	8002bc4 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a88:	231b      	movs	r3, #27
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d00d      	beq.n	8002ab4 <UART_SetConfig+0x298>
 8002a98:	dc02      	bgt.n	8002aa0 <UART_SetConfig+0x284>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <UART_SetConfig+0x28e>
 8002a9e:	e01d      	b.n	8002adc <UART_SetConfig+0x2c0>
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d012      	beq.n	8002aca <UART_SetConfig+0x2ae>
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d015      	beq.n	8002ad4 <UART_SetConfig+0x2b8>
 8002aa8:	e018      	b.n	8002adc <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002aaa:	f7ff f949 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ab2:	e01b      	b.n	8002aec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <UART_SetConfig+0x388>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <UART_SetConfig+0x398>)
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002ac2:	e013      	b.n	8002aec <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <UART_SetConfig+0x39c>)
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ac8:	e010      	b.n	8002aec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002aca:	f7ff f8ab 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ad2:	e00b      	b.n	8002aec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ada:	e007      	b.n	8002aec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002adc:	2313      	movs	r3, #19
 8002ade:	2218      	movs	r2, #24
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	44bc      	add	ip, r7
 8002ae4:	4463      	add	r3, ip
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
        break;
 8002aea:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d100      	bne.n	8002af4 <UART_SetConfig+0x2d8>
 8002af2:	e1a6      	b.n	8002e42 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	0013      	movs	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d305      	bcc.n	8002b10 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d907      	bls.n	8002b20 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8002b10:	2313      	movs	r3, #19
 8002b12:	2218      	movs	r2, #24
 8002b14:	4694      	mov	ip, r2
 8002b16:	44bc      	add	ip, r7
 8002b18:	4463      	add	r3, ip
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e190      	b.n	8002e42 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	000b      	movs	r3, r1
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	0010      	movs	r0, r2
 8002b32:	0205      	lsls	r5, r0, #8
 8002b34:	431d      	orrs	r5, r3
 8002b36:	000b      	movs	r3, r1
 8002b38:	021c      	lsls	r4, r3, #8
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68b8      	ldr	r0, [r7, #8]
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	1900      	adds	r0, r0, r4
 8002b4c:	4169      	adcs	r1, r5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f7fd fb60 	bl	8000220 <__aeabi_uldivmod>
 8002b60:	0003      	movs	r3, r0
 8002b62:	000c      	movs	r4, r1
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <UART_SetConfig+0x3a0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d908      	bls.n	8002b80 <UART_SetConfig+0x364>
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <UART_SetConfig+0x3a4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d804      	bhi.n	8002b80 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	e160      	b.n	8002e42 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002b80:	2313      	movs	r3, #19
 8002b82:	2218      	movs	r2, #24
 8002b84:	4694      	mov	ip, r2
 8002b86:	44bc      	add	ip, r7
 8002b88:	4463      	add	r3, ip
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e158      	b.n	8002e42 <UART_SetConfig+0x626>
 8002b90:	efff69f3 	.word	0xefff69f3
 8002b94:	ffffcfff 	.word	0xffffcfff
 8002b98:	40004800 	.word	0x40004800
 8002b9c:	fffff4ff 	.word	0xfffff4ff
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40004c00 	.word	0x40004c00
 8002bb0:	40005000 	.word	0x40005000
 8002bb4:	003d0900 	.word	0x003d0900
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	000002ff 	.word	0x000002ff
 8002bc0:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d000      	beq.n	8002bd2 <UART_SetConfig+0x3b6>
 8002bd0:	e0a9      	b.n	8002d26 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002bd2:	231b      	movs	r3, #27
 8002bd4:	2218      	movs	r2, #24
 8002bd6:	4694      	mov	ip, r2
 8002bd8:	44bc      	add	ip, r7
 8002bda:	4463      	add	r3, ip
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d86d      	bhi.n	8002cbe <UART_SetConfig+0x4a2>
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	4b9f      	ldr	r3, [pc, #636]	; (8002e64 <UART_SetConfig+0x648>)
 8002be6:	18d3      	adds	r3, r2, r3
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bec:	f7ff f8a8 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	005a      	lsls	r2, r3, #1
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	18d2      	adds	r2, r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0019      	movs	r1, r3
 8002c02:	0010      	movs	r0, r2
 8002c04:	f7fd fa80 	bl	8000108 <__udivsi3>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e05e      	b.n	8002cce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c10:	f7ff f8ac 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002c14:	0003      	movs	r3, r0
 8002c16:	005a      	lsls	r2, r3, #1
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	18d2      	adds	r2, r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f7fd fa6e 	bl	8000108 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c32:	e04c      	b.n	8002cce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c34:	4b8c      	ldr	r3, [pc, #560]	; (8002e68 <UART_SetConfig+0x64c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d00e      	beq.n	8002c5c <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	4a89      	ldr	r2, [pc, #548]	; (8002e6c <UART_SetConfig+0x650>)
 8002c46:	189a      	adds	r2, r3, r2
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f7fd fa5a 	bl	8000108 <__udivsi3>
 8002c54:	0003      	movs	r3, r0
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002c5a:	e038      	b.n	8002cce <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <UART_SetConfig+0x654>)
 8002c64:	189a      	adds	r2, r3, r2
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	0010      	movs	r0, r2
 8002c6e:	f7fd fa4b 	bl	8000108 <__udivsi3>
 8002c72:	0003      	movs	r3, r0
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c78:	e029      	b.n	8002cce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c7a:	f7fe ffd3 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	18d2      	adds	r2, r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	0010      	movs	r0, r2
 8002c92:	f7fd fa39 	bl	8000108 <__udivsi3>
 8002c96:	0003      	movs	r3, r0
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c9c:	e017      	b.n	8002cce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0252      	lsls	r2, r2, #9
 8002ca8:	189a      	adds	r2, r3, r2
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f7fd fa29 	bl	8000108 <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cbc:	e007      	b.n	8002cce <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002cbe:	2313      	movs	r3, #19
 8002cc0:	2218      	movs	r2, #24
 8002cc2:	4694      	mov	ip, r2
 8002cc4:	44bc      	add	ip, r7
 8002cc6:	4463      	add	r3, ip
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
        break;
 8002ccc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d920      	bls.n	8002d16 <UART_SetConfig+0x4fa>
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	4a67      	ldr	r2, [pc, #412]	; (8002e74 <UART_SetConfig+0x658>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d81c      	bhi.n	8002d16 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	2418      	movs	r4, #24
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	181b      	adds	r3, r3, r0
 8002ce8:	210f      	movs	r1, #15
 8002cea:	438a      	bics	r2, r1
 8002cec:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b299      	uxth	r1, r3
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	181b      	adds	r3, r3, r0
 8002cfe:	193a      	adds	r2, r7, r4
 8002d00:	1812      	adds	r2, r2, r0
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	193a      	adds	r2, r7, r4
 8002d0e:	1812      	adds	r2, r2, r0
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e095      	b.n	8002e42 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002d16:	2313      	movs	r3, #19
 8002d18:	2218      	movs	r2, #24
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	44bc      	add	ip, r7
 8002d1e:	4463      	add	r3, ip
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e08d      	b.n	8002e42 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8002d26:	231b      	movs	r3, #27
 8002d28:	2218      	movs	r2, #24
 8002d2a:	4694      	mov	ip, r2
 8002d2c:	44bc      	add	ip, r7
 8002d2e:	4463      	add	r3, ip
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d86a      	bhi.n	8002e0c <UART_SetConfig+0x5f0>
 8002d36:	009a      	lsls	r2, r3, #2
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <UART_SetConfig+0x65c>)
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d40:	f7fe fffe 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002d44:	0002      	movs	r2, r0
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9d7 	bl	8000108 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d60:	e05c      	b.n	8002e1c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d62:	f7ff f803 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002d66:	0002      	movs	r2, r0
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	18d2      	adds	r2, r2, r3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0019      	movs	r1, r3
 8002d76:	0010      	movs	r0, r2
 8002d78:	f7fd f9c6 	bl	8000108 <__udivsi3>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d82:	e04b      	b.n	8002e1c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <UART_SetConfig+0x64c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	4a39      	ldr	r2, [pc, #228]	; (8002e7c <UART_SetConfig+0x660>)
 8002d96:	189a      	adds	r2, r3, r2
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	0010      	movs	r0, r2
 8002da0:	f7fd f9b2 	bl	8000108 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002daa:	e037      	b.n	8002e1c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <UART_SetConfig+0x664>)
 8002db4:	189a      	adds	r2, r3, r2
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0019      	movs	r1, r3
 8002dbc:	0010      	movs	r0, r2
 8002dbe:	f7fd f9a3 	bl	8000108 <__udivsi3>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc8:	e028      	b.n	8002e1c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dca:	f7fe ff2b 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	18d2      	adds	r2, r2, r3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0019      	movs	r1, r3
 8002dde:	0010      	movs	r0, r2
 8002de0:	f7fd f992 	bl	8000108 <__udivsi3>
 8002de4:	0003      	movs	r3, r0
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dea:	e017      	b.n	8002e1c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	0212      	lsls	r2, r2, #8
 8002df6:	189a      	adds	r2, r3, r2
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	0010      	movs	r0, r2
 8002e00:	f7fd f982 	bl	8000108 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e0a:	e007      	b.n	8002e1c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e0c:	2313      	movs	r3, #19
 8002e0e:	2218      	movs	r2, #24
 8002e10:	4694      	mov	ip, r2
 8002e12:	44bc      	add	ip, r7
 8002e14:	4463      	add	r3, ip
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
        break;
 8002e1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	2b0f      	cmp	r3, #15
 8002e20:	d908      	bls.n	8002e34 <UART_SetConfig+0x618>
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <UART_SetConfig+0x658>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d804      	bhi.n	8002e34 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	e006      	b.n	8002e42 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002e34:	2313      	movs	r3, #19
 8002e36:	2218      	movs	r2, #24
 8002e38:	4694      	mov	ip, r2
 8002e3a:	44bc      	add	ip, r7
 8002e3c:	4463      	add	r3, ip
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e4e:	2313      	movs	r3, #19
 8002e50:	2218      	movs	r2, #24
 8002e52:	4694      	mov	ip, r2
 8002e54:	44bc      	add	ip, r7
 8002e56:	4463      	add	r3, ip
 8002e58:	781b      	ldrb	r3, [r3, #0]
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b00e      	add	sp, #56	; 0x38
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	080031a0 	.word	0x080031a0
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	01e84800 	.word	0x01e84800
 8002e74:	0000ffff 	.word	0x0000ffff
 8002e78:	080031c4 	.word	0x080031c4
 8002e7c:	003d0900 	.word	0x003d0900
 8002e80:	00f42400 	.word	0x00f42400

08002e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	d00b      	beq.n	8002eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a4a      	ldr	r2, [pc, #296]	; (8002fc8 <UART_AdvFeatureConfig+0x144>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a43      	ldr	r2, [pc, #268]	; (8002fcc <UART_AdvFeatureConfig+0x148>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <UART_AdvFeatureConfig+0x14c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <UART_AdvFeatureConfig+0x150>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2210      	movs	r2, #16
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d00b      	beq.n	8002f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <UART_AdvFeatureConfig+0x154>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <UART_AdvFeatureConfig+0x158>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2240      	movs	r2, #64	; 0x40
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <UART_AdvFeatureConfig+0x15c>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	035b      	lsls	r3, r3, #13
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d10b      	bne.n	8002f9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <UART_AdvFeatureConfig+0x160>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <UART_AdvFeatureConfig+0x164>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	fffdffff 	.word	0xfffdffff
 8002fcc:	fffeffff 	.word	0xfffeffff
 8002fd0:	fffbffff 	.word	0xfffbffff
 8002fd4:	ffff7fff 	.word	0xffff7fff
 8002fd8:	ffffefff 	.word	0xffffefff
 8002fdc:	ffffdfff 	.word	0xffffdfff
 8002fe0:	ffefffff 	.word	0xffefffff
 8002fe4:	ff9fffff 	.word	0xff9fffff
 8002fe8:	fff7ffff 	.word	0xfff7ffff

08002fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ffa:	f7fd fe73 	bl	8000ce4 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	4013      	ands	r3, r2
 800300c:	2b08      	cmp	r3, #8
 800300e:	d10d      	bne.n	800302c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	0399      	lsls	r1, r3, #14
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <UART_CheckIdleState+0x88>)
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	0013      	movs	r3, r2
 800301e:	2200      	movs	r2, #0
 8003020:	f000 f82a 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d001      	beq.n	800302c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e01f      	b.n	800306c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	2b04      	cmp	r3, #4
 8003038:	d10d      	bne.n	8003056 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	03d9      	lsls	r1, r3, #15
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <UART_CheckIdleState+0x88>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	0013      	movs	r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	f000 f815 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e00a      	b.n	800306c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2270      	movs	r2, #112	; 0x70
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b004      	add	sp, #16
 8003072:	bd80      	pop	{r7, pc}
 8003074:	01ffffff 	.word	0x01ffffff

08003078 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003088:	e029      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3301      	adds	r3, #1
 800308e:	d026      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003090:	f7fd fe28 	bl	8000ce4 <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	429a      	cmp	r2, r3
 800309e:	d302      	bcc.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11b      	bne.n	80030de <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4915      	ldr	r1, [pc, #84]	; (8003108 <UART_WaitOnFlagUntilTimeout+0x90>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	438a      	bics	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2270      	movs	r2, #112	; 0x70
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e00f      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	425a      	negs	r2, r3
 80030ee:	4153      	adcs	r3, r2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	001a      	movs	r2, r3
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d0c6      	beq.n	800308a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	fffffe5f 	.word	0xfffffe5f

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	2600      	movs	r6, #0
 8003110:	4d0c      	ldr	r5, [pc, #48]	; (8003144 <__libc_init_array+0x38>)
 8003112:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	2600      	movs	r6, #0
 800311e:	f000 f821 	bl	8003164 <_init>
 8003122:	4d0a      	ldr	r5, [pc, #40]	; (800314c <__libc_init_array+0x40>)
 8003124:	4c0a      	ldr	r4, [pc, #40]	; (8003150 <__libc_init_array+0x44>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	00b3      	lsls	r3, r6, #2
 8003132:	58eb      	ldr	r3, [r5, r3]
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	00b3      	lsls	r3, r6, #2
 800313c:	58eb      	ldr	r3, [r5, r3]
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031f0 	.word	0x080031f0
 8003148:	080031f0 	.word	0x080031f0
 800314c:	080031f0 	.word	0x080031f0
 8003150:	080031f4 	.word	0x080031f4

08003154 <memset>:
 8003154:	0003      	movs	r3, r0
 8003156:	1812      	adds	r2, r2, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	7019      	strb	r1, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
