
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000144  08004824  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004824  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092a5  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001695  00000000  00000000  00029411  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a90  00000000  00000000  0002aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bf8  00000000  00000000  0002bf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c5a  00000000  00000000  0003faf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e130  00000000  00000000  00047752  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002720  00000000  00000000  000c5900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000144 	.word	0x20000144
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800460c 	.word	0x0800460c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000148 	.word	0x20000148
 8000104:	0800460c 	.word	0x0800460c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fcd1 	bl	8000dac <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc29 	bl	8000c6c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcc3 	bl	8000dac <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fcb9 	bl	8000dac <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc4b 	bl	8000ce4 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc41 	bl	8000ce4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__udivmoddi4>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	464f      	mov	r7, r9
 80004b4:	4646      	mov	r6, r8
 80004b6:	46d6      	mov	lr, sl
 80004b8:	b5c0      	push	{r6, r7, lr}
 80004ba:	0004      	movs	r4, r0
 80004bc:	b082      	sub	sp, #8
 80004be:	000d      	movs	r5, r1
 80004c0:	4691      	mov	r9, r2
 80004c2:	4698      	mov	r8, r3
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d82f      	bhi.n	8000528 <__udivmoddi4+0x78>
 80004c8:	d02c      	beq.n	8000524 <__udivmoddi4+0x74>
 80004ca:	4641      	mov	r1, r8
 80004cc:	4648      	mov	r0, r9
 80004ce:	f000 ff9f 	bl	8001410 <__clzdi2>
 80004d2:	0029      	movs	r1, r5
 80004d4:	0006      	movs	r6, r0
 80004d6:	0020      	movs	r0, r4
 80004d8:	f000 ff9a 	bl	8001410 <__clzdi2>
 80004dc:	1a33      	subs	r3, r6, r0
 80004de:	469c      	mov	ip, r3
 80004e0:	3b20      	subs	r3, #32
 80004e2:	469a      	mov	sl, r3
 80004e4:	d500      	bpl.n	80004e8 <__udivmoddi4+0x38>
 80004e6:	e076      	b.n	80005d6 <__udivmoddi4+0x126>
 80004e8:	464b      	mov	r3, r9
 80004ea:	4652      	mov	r2, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001f      	movs	r7, r3
 80004f0:	464b      	mov	r3, r9
 80004f2:	4662      	mov	r2, ip
 80004f4:	4093      	lsls	r3, r2
 80004f6:	001e      	movs	r6, r3
 80004f8:	42af      	cmp	r7, r5
 80004fa:	d828      	bhi.n	800054e <__udivmoddi4+0x9e>
 80004fc:	d025      	beq.n	800054a <__udivmoddi4+0x9a>
 80004fe:	4653      	mov	r3, sl
 8000500:	1ba4      	subs	r4, r4, r6
 8000502:	41bd      	sbcs	r5, r7
 8000504:	2b00      	cmp	r3, #0
 8000506:	da00      	bge.n	800050a <__udivmoddi4+0x5a>
 8000508:	e07b      	b.n	8000602 <__udivmoddi4+0x152>
 800050a:	2200      	movs	r2, #0
 800050c:	2300      	movs	r3, #0
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4652      	mov	r2, sl
 8000516:	4093      	lsls	r3, r2
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	4662      	mov	r2, ip
 800051e:	4093      	lsls	r3, r2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	e018      	b.n	8000556 <__udivmoddi4+0xa6>
 8000524:	4282      	cmp	r2, r0
 8000526:	d9d0      	bls.n	80004ca <__udivmoddi4+0x1a>
 8000528:	2200      	movs	r2, #0
 800052a:	2300      	movs	r3, #0
 800052c:	9200      	str	r2, [sp, #0]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <__udivmoddi4+0x8a>
 8000536:	601c      	str	r4, [r3, #0]
 8000538:	605d      	str	r5, [r3, #4]
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	b002      	add	sp, #8
 8000540:	bc1c      	pop	{r2, r3, r4}
 8000542:	4690      	mov	r8, r2
 8000544:	4699      	mov	r9, r3
 8000546:	46a2      	mov	sl, r4
 8000548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054a:	42a3      	cmp	r3, r4
 800054c:	d9d7      	bls.n	80004fe <__udivmoddi4+0x4e>
 800054e:	2200      	movs	r2, #0
 8000550:	2300      	movs	r3, #0
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	4663      	mov	r3, ip
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0e9      	beq.n	8000530 <__udivmoddi4+0x80>
 800055c:	07fb      	lsls	r3, r7, #31
 800055e:	4698      	mov	r8, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	430a      	orrs	r2, r1
 8000566:	087b      	lsrs	r3, r7, #1
 8000568:	4666      	mov	r6, ip
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xda>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xc4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xde>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0xe8>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xbc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xda>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	4653      	mov	r3, sl
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db23      	blt.n	80005ee <__udivmoddi4+0x13e>
 80005a6:	002b      	movs	r3, r5
 80005a8:	4652      	mov	r2, sl
 80005aa:	40d3      	lsrs	r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4664      	mov	r4, ip
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2d      	blt.n	8000618 <__udivmoddi4+0x168>
 80005bc:	0026      	movs	r6, r4
 80005be:	4657      	mov	r7, sl
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4667      	mov	r7, ip
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e7ac      	b.n	8000530 <__udivmoddi4+0x80>
 80005d6:	4662      	mov	r2, ip
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	464a      	mov	r2, r9
 80005de:	40da      	lsrs	r2, r3
 80005e0:	4661      	mov	r1, ip
 80005e2:	0013      	movs	r3, r2
 80005e4:	4642      	mov	r2, r8
 80005e6:	408a      	lsls	r2, r1
 80005e8:	0017      	movs	r7, r2
 80005ea:	431f      	orrs	r7, r3
 80005ec:	e780      	b.n	80004f0 <__udivmoddi4+0x40>
 80005ee:	4662      	mov	r2, ip
 80005f0:	2320      	movs	r3, #32
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	4666      	mov	r6, ip
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0023      	movs	r3, r4
 80005fc:	40f3      	lsrs	r3, r6
 80005fe:	4313      	orrs	r3, r2
 8000600:	e7d4      	b.n	80005ac <__udivmoddi4+0xfc>
 8000602:	4662      	mov	r2, ip
 8000604:	2320      	movs	r3, #32
 8000606:	2100      	movs	r1, #0
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	2200      	movs	r2, #0
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	9201      	str	r2, [sp, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	40da      	lsrs	r2, r3
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	e780      	b.n	800051a <__udivmoddi4+0x6a>
 8000618:	2320      	movs	r3, #32
 800061a:	4662      	mov	r2, ip
 800061c:	0026      	movs	r6, r4
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	002f      	movs	r7, r5
 8000624:	46b0      	mov	r8, r6
 8000626:	4666      	mov	r6, ip
 8000628:	40b7      	lsls	r7, r6
 800062a:	4646      	mov	r6, r8
 800062c:	003b      	movs	r3, r7
 800062e:	4333      	orrs	r3, r6
 8000630:	e7c8      	b.n	80005c4 <__udivmoddi4+0x114>
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__aeabi_dadd>:
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	464f      	mov	r7, r9
 8000638:	4646      	mov	r6, r8
 800063a:	46d6      	mov	lr, sl
 800063c:	000c      	movs	r4, r1
 800063e:	0309      	lsls	r1, r1, #12
 8000640:	b5c0      	push	{r6, r7, lr}
 8000642:	0a49      	lsrs	r1, r1, #9
 8000644:	0f47      	lsrs	r7, r0, #29
 8000646:	005e      	lsls	r6, r3, #1
 8000648:	4339      	orrs	r1, r7
 800064a:	031f      	lsls	r7, r3, #12
 800064c:	0fdb      	lsrs	r3, r3, #31
 800064e:	469c      	mov	ip, r3
 8000650:	0065      	lsls	r5, r4, #1
 8000652:	0a7b      	lsrs	r3, r7, #9
 8000654:	0f57      	lsrs	r7, r2, #29
 8000656:	431f      	orrs	r7, r3
 8000658:	0d6d      	lsrs	r5, r5, #21
 800065a:	0fe4      	lsrs	r4, r4, #31
 800065c:	0d76      	lsrs	r6, r6, #21
 800065e:	46a1      	mov	r9, r4
 8000660:	00c0      	lsls	r0, r0, #3
 8000662:	46b8      	mov	r8, r7
 8000664:	00d2      	lsls	r2, r2, #3
 8000666:	1bab      	subs	r3, r5, r6
 8000668:	4564      	cmp	r4, ip
 800066a:	d07b      	beq.n	8000764 <__aeabi_dadd+0x130>
 800066c:	2b00      	cmp	r3, #0
 800066e:	dd5f      	ble.n	8000730 <__aeabi_dadd+0xfc>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_dadd+0x42>
 8000674:	e0a4      	b.n	80007c0 <__aeabi_dadd+0x18c>
 8000676:	003e      	movs	r6, r7
 8000678:	4316      	orrs	r6, r2
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x4a>
 800067c:	e112      	b.n	80008a4 <__aeabi_dadd+0x270>
 800067e:	1e5e      	subs	r6, r3, #1
 8000680:	2e00      	cmp	r6, #0
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x52>
 8000684:	e19e      	b.n	80009c4 <__aeabi_dadd+0x390>
 8000686:	1a87      	subs	r7, r0, r2
 8000688:	4643      	mov	r3, r8
 800068a:	42b8      	cmp	r0, r7
 800068c:	4180      	sbcs	r0, r0
 800068e:	2501      	movs	r5, #1
 8000690:	1ac9      	subs	r1, r1, r3
 8000692:	4240      	negs	r0, r0
 8000694:	1a09      	subs	r1, r1, r0
 8000696:	020b      	lsls	r3, r1, #8
 8000698:	d400      	bmi.n	800069c <__aeabi_dadd+0x68>
 800069a:	e131      	b.n	8000900 <__aeabi_dadd+0x2cc>
 800069c:	0249      	lsls	r1, r1, #9
 800069e:	0a4e      	lsrs	r6, r1, #9
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x72>
 80006a4:	e16e      	b.n	8000984 <__aeabi_dadd+0x350>
 80006a6:	0030      	movs	r0, r6
 80006a8:	f000 fe94 	bl	80013d4 <__clzsi2>
 80006ac:	0003      	movs	r3, r0
 80006ae:	3b08      	subs	r3, #8
 80006b0:	2b1f      	cmp	r3, #31
 80006b2:	dd00      	ble.n	80006b6 <__aeabi_dadd+0x82>
 80006b4:	e161      	b.n	800097a <__aeabi_dadd+0x346>
 80006b6:	2220      	movs	r2, #32
 80006b8:	0039      	movs	r1, r7
 80006ba:	1ad2      	subs	r2, r2, r3
 80006bc:	409e      	lsls	r6, r3
 80006be:	40d1      	lsrs	r1, r2
 80006c0:	409f      	lsls	r7, r3
 80006c2:	430e      	orrs	r6, r1
 80006c4:	429d      	cmp	r5, r3
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dadd+0x96>
 80006c8:	e151      	b.n	800096e <__aeabi_dadd+0x33a>
 80006ca:	1b5d      	subs	r5, r3, r5
 80006cc:	1c6b      	adds	r3, r5, #1
 80006ce:	2b1f      	cmp	r3, #31
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_dadd+0xa0>
 80006d2:	e17c      	b.n	80009ce <__aeabi_dadd+0x39a>
 80006d4:	2120      	movs	r1, #32
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	003d      	movs	r5, r7
 80006da:	0030      	movs	r0, r6
 80006dc:	408f      	lsls	r7, r1
 80006de:	4088      	lsls	r0, r1
 80006e0:	40dd      	lsrs	r5, r3
 80006e2:	1e79      	subs	r1, r7, #1
 80006e4:	418f      	sbcs	r7, r1
 80006e6:	0031      	movs	r1, r6
 80006e8:	2207      	movs	r2, #7
 80006ea:	4328      	orrs	r0, r5
 80006ec:	40d9      	lsrs	r1, r3
 80006ee:	2500      	movs	r5, #0
 80006f0:	4307      	orrs	r7, r0
 80006f2:	403a      	ands	r2, r7
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d009      	beq.n	800070c <__aeabi_dadd+0xd8>
 80006f8:	230f      	movs	r3, #15
 80006fa:	403b      	ands	r3, r7
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d005      	beq.n	800070c <__aeabi_dadd+0xd8>
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	42bb      	cmp	r3, r7
 8000704:	41bf      	sbcs	r7, r7
 8000706:	427f      	negs	r7, r7
 8000708:	19c9      	adds	r1, r1, r7
 800070a:	001f      	movs	r7, r3
 800070c:	020b      	lsls	r3, r1, #8
 800070e:	d400      	bmi.n	8000712 <__aeabi_dadd+0xde>
 8000710:	e226      	b.n	8000b60 <__aeabi_dadd+0x52c>
 8000712:	1c6a      	adds	r2, r5, #1
 8000714:	4bc6      	ldr	r3, [pc, #792]	; (8000a30 <__aeabi_dadd+0x3fc>)
 8000716:	0555      	lsls	r5, r2, #21
 8000718:	0d6d      	lsrs	r5, r5, #21
 800071a:	429a      	cmp	r2, r3
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0xec>
 800071e:	e106      	b.n	800092e <__aeabi_dadd+0x2fa>
 8000720:	4ac4      	ldr	r2, [pc, #784]	; (8000a34 <__aeabi_dadd+0x400>)
 8000722:	08ff      	lsrs	r7, r7, #3
 8000724:	400a      	ands	r2, r1
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	0252      	lsls	r2, r2, #9
 800072a:	433b      	orrs	r3, r7
 800072c:	0b12      	lsrs	r2, r2, #12
 800072e:	e08e      	b.n	800084e <__aeabi_dadd+0x21a>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_dadd+0x102>
 8000734:	e0b8      	b.n	80008a8 <__aeabi_dadd+0x274>
 8000736:	1c6b      	adds	r3, r5, #1
 8000738:	055b      	lsls	r3, r3, #21
 800073a:	0d5b      	lsrs	r3, r3, #21
 800073c:	2b01      	cmp	r3, #1
 800073e:	dc00      	bgt.n	8000742 <__aeabi_dadd+0x10e>
 8000740:	e130      	b.n	80009a4 <__aeabi_dadd+0x370>
 8000742:	1a87      	subs	r7, r0, r2
 8000744:	4643      	mov	r3, r8
 8000746:	42b8      	cmp	r0, r7
 8000748:	41b6      	sbcs	r6, r6
 800074a:	1acb      	subs	r3, r1, r3
 800074c:	4276      	negs	r6, r6
 800074e:	1b9e      	subs	r6, r3, r6
 8000750:	0233      	lsls	r3, r6, #8
 8000752:	d500      	bpl.n	8000756 <__aeabi_dadd+0x122>
 8000754:	e14c      	b.n	80009f0 <__aeabi_dadd+0x3bc>
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	d1a1      	bne.n	80006a0 <__aeabi_dadd+0x6c>
 800075c:	2200      	movs	r2, #0
 800075e:	2400      	movs	r4, #0
 8000760:	2500      	movs	r5, #0
 8000762:	e070      	b.n	8000846 <__aeabi_dadd+0x212>
 8000764:	2b00      	cmp	r3, #0
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x136>
 8000768:	e0e5      	b.n	8000936 <__aeabi_dadd+0x302>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x13c>
 800076e:	e083      	b.n	8000878 <__aeabi_dadd+0x244>
 8000770:	4eaf      	ldr	r6, [pc, #700]	; (8000a30 <__aeabi_dadd+0x3fc>)
 8000772:	42b5      	cmp	r5, r6
 8000774:	d060      	beq.n	8000838 <__aeabi_dadd+0x204>
 8000776:	2680      	movs	r6, #128	; 0x80
 8000778:	0436      	lsls	r6, r6, #16
 800077a:	4337      	orrs	r7, r6
 800077c:	46b8      	mov	r8, r7
 800077e:	2b38      	cmp	r3, #56	; 0x38
 8000780:	dc00      	bgt.n	8000784 <__aeabi_dadd+0x150>
 8000782:	e13e      	b.n	8000a02 <__aeabi_dadd+0x3ce>
 8000784:	4643      	mov	r3, r8
 8000786:	4313      	orrs	r3, r2
 8000788:	001f      	movs	r7, r3
 800078a:	1e7a      	subs	r2, r7, #1
 800078c:	4197      	sbcs	r7, r2
 800078e:	183f      	adds	r7, r7, r0
 8000790:	4287      	cmp	r7, r0
 8000792:	4180      	sbcs	r0, r0
 8000794:	4240      	negs	r0, r0
 8000796:	1809      	adds	r1, r1, r0
 8000798:	020b      	lsls	r3, r1, #8
 800079a:	d400      	bmi.n	800079e <__aeabi_dadd+0x16a>
 800079c:	e0b0      	b.n	8000900 <__aeabi_dadd+0x2cc>
 800079e:	4ba4      	ldr	r3, [pc, #656]	; (8000a30 <__aeabi_dadd+0x3fc>)
 80007a0:	3501      	adds	r5, #1
 80007a2:	429d      	cmp	r5, r3
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x174>
 80007a6:	e0c3      	b.n	8000930 <__aeabi_dadd+0x2fc>
 80007a8:	4aa2      	ldr	r2, [pc, #648]	; (8000a34 <__aeabi_dadd+0x400>)
 80007aa:	087b      	lsrs	r3, r7, #1
 80007ac:	400a      	ands	r2, r1
 80007ae:	2101      	movs	r1, #1
 80007b0:	400f      	ands	r7, r1
 80007b2:	431f      	orrs	r7, r3
 80007b4:	0851      	lsrs	r1, r2, #1
 80007b6:	07d3      	lsls	r3, r2, #31
 80007b8:	2207      	movs	r2, #7
 80007ba:	431f      	orrs	r7, r3
 80007bc:	403a      	ands	r2, r7
 80007be:	e799      	b.n	80006f4 <__aeabi_dadd+0xc0>
 80007c0:	4e9b      	ldr	r6, [pc, #620]	; (8000a30 <__aeabi_dadd+0x3fc>)
 80007c2:	42b5      	cmp	r5, r6
 80007c4:	d038      	beq.n	8000838 <__aeabi_dadd+0x204>
 80007c6:	2680      	movs	r6, #128	; 0x80
 80007c8:	0436      	lsls	r6, r6, #16
 80007ca:	4337      	orrs	r7, r6
 80007cc:	46b8      	mov	r8, r7
 80007ce:	2b38      	cmp	r3, #56	; 0x38
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x1a0>
 80007d2:	e0dc      	b.n	800098e <__aeabi_dadd+0x35a>
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	dc00      	bgt.n	80007da <__aeabi_dadd+0x1a6>
 80007d8:	e130      	b.n	8000a3c <__aeabi_dadd+0x408>
 80007da:	001e      	movs	r6, r3
 80007dc:	4647      	mov	r7, r8
 80007de:	3e20      	subs	r6, #32
 80007e0:	40f7      	lsrs	r7, r6
 80007e2:	46bc      	mov	ip, r7
 80007e4:	2b20      	cmp	r3, #32
 80007e6:	d004      	beq.n	80007f2 <__aeabi_dadd+0x1be>
 80007e8:	2640      	movs	r6, #64	; 0x40
 80007ea:	1af3      	subs	r3, r6, r3
 80007ec:	4646      	mov	r6, r8
 80007ee:	409e      	lsls	r6, r3
 80007f0:	4332      	orrs	r2, r6
 80007f2:	0017      	movs	r7, r2
 80007f4:	4663      	mov	r3, ip
 80007f6:	1e7a      	subs	r2, r7, #1
 80007f8:	4197      	sbcs	r7, r2
 80007fa:	431f      	orrs	r7, r3
 80007fc:	e0cc      	b.n	8000998 <__aeabi_dadd+0x364>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x1d0>
 8000802:	e204      	b.n	8000c0e <__aeabi_dadd+0x5da>
 8000804:	4643      	mov	r3, r8
 8000806:	4313      	orrs	r3, r2
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x1d8>
 800080a:	e159      	b.n	8000ac0 <__aeabi_dadd+0x48c>
 800080c:	074b      	lsls	r3, r1, #29
 800080e:	08c0      	lsrs	r0, r0, #3
 8000810:	4318      	orrs	r0, r3
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	08c9      	lsrs	r1, r1, #3
 8000816:	031b      	lsls	r3, r3, #12
 8000818:	4219      	tst	r1, r3
 800081a:	d008      	beq.n	800082e <__aeabi_dadd+0x1fa>
 800081c:	4645      	mov	r5, r8
 800081e:	08ed      	lsrs	r5, r5, #3
 8000820:	421d      	tst	r5, r3
 8000822:	d104      	bne.n	800082e <__aeabi_dadd+0x1fa>
 8000824:	4643      	mov	r3, r8
 8000826:	08d0      	lsrs	r0, r2, #3
 8000828:	0759      	lsls	r1, r3, #29
 800082a:	4308      	orrs	r0, r1
 800082c:	0029      	movs	r1, r5
 800082e:	0f42      	lsrs	r2, r0, #29
 8000830:	00c9      	lsls	r1, r1, #3
 8000832:	4d7f      	ldr	r5, [pc, #508]	; (8000a30 <__aeabi_dadd+0x3fc>)
 8000834:	4311      	orrs	r1, r2
 8000836:	00c0      	lsls	r0, r0, #3
 8000838:	074b      	lsls	r3, r1, #29
 800083a:	08ca      	lsrs	r2, r1, #3
 800083c:	497c      	ldr	r1, [pc, #496]	; (8000a30 <__aeabi_dadd+0x3fc>)
 800083e:	08c0      	lsrs	r0, r0, #3
 8000840:	4303      	orrs	r3, r0
 8000842:	428d      	cmp	r5, r1
 8000844:	d068      	beq.n	8000918 <__aeabi_dadd+0x2e4>
 8000846:	0312      	lsls	r2, r2, #12
 8000848:	056d      	lsls	r5, r5, #21
 800084a:	0b12      	lsrs	r2, r2, #12
 800084c:	0d6d      	lsrs	r5, r5, #21
 800084e:	2100      	movs	r1, #0
 8000850:	0312      	lsls	r2, r2, #12
 8000852:	0018      	movs	r0, r3
 8000854:	0b13      	lsrs	r3, r2, #12
 8000856:	0d0a      	lsrs	r2, r1, #20
 8000858:	0512      	lsls	r2, r2, #20
 800085a:	431a      	orrs	r2, r3
 800085c:	4b76      	ldr	r3, [pc, #472]	; (8000a38 <__aeabi_dadd+0x404>)
 800085e:	052d      	lsls	r5, r5, #20
 8000860:	4013      	ands	r3, r2
 8000862:	432b      	orrs	r3, r5
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	07e4      	lsls	r4, r4, #31
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	4323      	orrs	r3, r4
 800086c:	0019      	movs	r1, r3
 800086e:	bc1c      	pop	{r2, r3, r4}
 8000870:	4690      	mov	r8, r2
 8000872:	4699      	mov	r9, r3
 8000874:	46a2      	mov	sl, r4
 8000876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000878:	003e      	movs	r6, r7
 800087a:	4316      	orrs	r6, r2
 800087c:	d012      	beq.n	80008a4 <__aeabi_dadd+0x270>
 800087e:	1e5e      	subs	r6, r3, #1
 8000880:	2e00      	cmp	r6, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_dadd+0x252>
 8000884:	e100      	b.n	8000a88 <__aeabi_dadd+0x454>
 8000886:	1887      	adds	r7, r0, r2
 8000888:	4287      	cmp	r7, r0
 800088a:	4180      	sbcs	r0, r0
 800088c:	4441      	add	r1, r8
 800088e:	4240      	negs	r0, r0
 8000890:	1809      	adds	r1, r1, r0
 8000892:	2501      	movs	r5, #1
 8000894:	020b      	lsls	r3, r1, #8
 8000896:	d533      	bpl.n	8000900 <__aeabi_dadd+0x2cc>
 8000898:	2502      	movs	r5, #2
 800089a:	e785      	b.n	80007a8 <__aeabi_dadd+0x174>
 800089c:	4664      	mov	r4, ip
 800089e:	0033      	movs	r3, r6
 80008a0:	4641      	mov	r1, r8
 80008a2:	0010      	movs	r0, r2
 80008a4:	001d      	movs	r5, r3
 80008a6:	e7c7      	b.n	8000838 <__aeabi_dadd+0x204>
 80008a8:	2d00      	cmp	r5, #0
 80008aa:	d000      	beq.n	80008ae <__aeabi_dadd+0x27a>
 80008ac:	e0da      	b.n	8000a64 <__aeabi_dadd+0x430>
 80008ae:	000c      	movs	r4, r1
 80008b0:	4304      	orrs	r4, r0
 80008b2:	d0f3      	beq.n	800089c <__aeabi_dadd+0x268>
 80008b4:	1c5c      	adds	r4, r3, #1
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x286>
 80008b8:	e19f      	b.n	8000bfa <__aeabi_dadd+0x5c6>
 80008ba:	4c5d      	ldr	r4, [pc, #372]	; (8000a30 <__aeabi_dadd+0x3fc>)
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x28e>
 80008c0:	e12f      	b.n	8000b22 <__aeabi_dadd+0x4ee>
 80008c2:	43db      	mvns	r3, r3
 80008c4:	2b38      	cmp	r3, #56	; 0x38
 80008c6:	dd00      	ble.n	80008ca <__aeabi_dadd+0x296>
 80008c8:	e166      	b.n	8000b98 <__aeabi_dadd+0x564>
 80008ca:	2b1f      	cmp	r3, #31
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_dadd+0x29c>
 80008ce:	e183      	b.n	8000bd8 <__aeabi_dadd+0x5a4>
 80008d0:	2420      	movs	r4, #32
 80008d2:	0005      	movs	r5, r0
 80008d4:	1ae4      	subs	r4, r4, r3
 80008d6:	000f      	movs	r7, r1
 80008d8:	40dd      	lsrs	r5, r3
 80008da:	40d9      	lsrs	r1, r3
 80008dc:	40a0      	lsls	r0, r4
 80008de:	4643      	mov	r3, r8
 80008e0:	40a7      	lsls	r7, r4
 80008e2:	1a5b      	subs	r3, r3, r1
 80008e4:	1e44      	subs	r4, r0, #1
 80008e6:	41a0      	sbcs	r0, r4
 80008e8:	4698      	mov	r8, r3
 80008ea:	432f      	orrs	r7, r5
 80008ec:	4338      	orrs	r0, r7
 80008ee:	1a17      	subs	r7, r2, r0
 80008f0:	42ba      	cmp	r2, r7
 80008f2:	4192      	sbcs	r2, r2
 80008f4:	4643      	mov	r3, r8
 80008f6:	4252      	negs	r2, r2
 80008f8:	1a99      	subs	r1, r3, r2
 80008fa:	4664      	mov	r4, ip
 80008fc:	0035      	movs	r5, r6
 80008fe:	e6ca      	b.n	8000696 <__aeabi_dadd+0x62>
 8000900:	2207      	movs	r2, #7
 8000902:	403a      	ands	r2, r7
 8000904:	2a00      	cmp	r2, #0
 8000906:	d000      	beq.n	800090a <__aeabi_dadd+0x2d6>
 8000908:	e6f6      	b.n	80006f8 <__aeabi_dadd+0xc4>
 800090a:	074b      	lsls	r3, r1, #29
 800090c:	08ca      	lsrs	r2, r1, #3
 800090e:	4948      	ldr	r1, [pc, #288]	; (8000a30 <__aeabi_dadd+0x3fc>)
 8000910:	08ff      	lsrs	r7, r7, #3
 8000912:	433b      	orrs	r3, r7
 8000914:	428d      	cmp	r5, r1
 8000916:	d196      	bne.n	8000846 <__aeabi_dadd+0x212>
 8000918:	0019      	movs	r1, r3
 800091a:	4311      	orrs	r1, r2
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2ec>
 800091e:	e19e      	b.n	8000c5e <__aeabi_dadd+0x62a>
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0309      	lsls	r1, r1, #12
 8000924:	430a      	orrs	r2, r1
 8000926:	0312      	lsls	r2, r2, #12
 8000928:	0b12      	lsrs	r2, r2, #12
 800092a:	4d41      	ldr	r5, [pc, #260]	; (8000a30 <__aeabi_dadd+0x3fc>)
 800092c:	e78f      	b.n	800084e <__aeabi_dadd+0x21a>
 800092e:	0015      	movs	r5, r2
 8000930:	2200      	movs	r2, #0
 8000932:	2300      	movs	r3, #0
 8000934:	e78b      	b.n	800084e <__aeabi_dadd+0x21a>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x308>
 800093a:	e0c7      	b.n	8000acc <__aeabi_dadd+0x498>
 800093c:	1c6b      	adds	r3, r5, #1
 800093e:	055f      	lsls	r7, r3, #21
 8000940:	0d7f      	lsrs	r7, r7, #21
 8000942:	2f01      	cmp	r7, #1
 8000944:	dc00      	bgt.n	8000948 <__aeabi_dadd+0x314>
 8000946:	e0f1      	b.n	8000b2c <__aeabi_dadd+0x4f8>
 8000948:	4d39      	ldr	r5, [pc, #228]	; (8000a30 <__aeabi_dadd+0x3fc>)
 800094a:	42ab      	cmp	r3, r5
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x31c>
 800094e:	e0b9      	b.n	8000ac4 <__aeabi_dadd+0x490>
 8000950:	1885      	adds	r5, r0, r2
 8000952:	000a      	movs	r2, r1
 8000954:	4285      	cmp	r5, r0
 8000956:	4189      	sbcs	r1, r1
 8000958:	4442      	add	r2, r8
 800095a:	4249      	negs	r1, r1
 800095c:	1851      	adds	r1, r2, r1
 800095e:	2207      	movs	r2, #7
 8000960:	07cf      	lsls	r7, r1, #31
 8000962:	086d      	lsrs	r5, r5, #1
 8000964:	432f      	orrs	r7, r5
 8000966:	0849      	lsrs	r1, r1, #1
 8000968:	403a      	ands	r2, r7
 800096a:	001d      	movs	r5, r3
 800096c:	e6c2      	b.n	80006f4 <__aeabi_dadd+0xc0>
 800096e:	2207      	movs	r2, #7
 8000970:	4930      	ldr	r1, [pc, #192]	; (8000a34 <__aeabi_dadd+0x400>)
 8000972:	1aed      	subs	r5, r5, r3
 8000974:	4031      	ands	r1, r6
 8000976:	403a      	ands	r2, r7
 8000978:	e6bc      	b.n	80006f4 <__aeabi_dadd+0xc0>
 800097a:	003e      	movs	r6, r7
 800097c:	3828      	subs	r0, #40	; 0x28
 800097e:	4086      	lsls	r6, r0
 8000980:	2700      	movs	r7, #0
 8000982:	e69f      	b.n	80006c4 <__aeabi_dadd+0x90>
 8000984:	0038      	movs	r0, r7
 8000986:	f000 fd25 	bl	80013d4 <__clzsi2>
 800098a:	3020      	adds	r0, #32
 800098c:	e68e      	b.n	80006ac <__aeabi_dadd+0x78>
 800098e:	4643      	mov	r3, r8
 8000990:	4313      	orrs	r3, r2
 8000992:	001f      	movs	r7, r3
 8000994:	1e7a      	subs	r2, r7, #1
 8000996:	4197      	sbcs	r7, r2
 8000998:	1bc7      	subs	r7, r0, r7
 800099a:	42b8      	cmp	r0, r7
 800099c:	4180      	sbcs	r0, r0
 800099e:	4240      	negs	r0, r0
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	e678      	b.n	8000696 <__aeabi_dadd+0x62>
 80009a4:	000e      	movs	r6, r1
 80009a6:	003b      	movs	r3, r7
 80009a8:	4306      	orrs	r6, r0
 80009aa:	4313      	orrs	r3, r2
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d161      	bne.n	8000a74 <__aeabi_dadd+0x440>
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x382>
 80009b4:	e0f4      	b.n	8000ba0 <__aeabi_dadd+0x56c>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x388>
 80009ba:	e11b      	b.n	8000bf4 <__aeabi_dadd+0x5c0>
 80009bc:	4664      	mov	r4, ip
 80009be:	0039      	movs	r1, r7
 80009c0:	0010      	movs	r0, r2
 80009c2:	e739      	b.n	8000838 <__aeabi_dadd+0x204>
 80009c4:	4f1a      	ldr	r7, [pc, #104]	; (8000a30 <__aeabi_dadd+0x3fc>)
 80009c6:	42bb      	cmp	r3, r7
 80009c8:	d07a      	beq.n	8000ac0 <__aeabi_dadd+0x48c>
 80009ca:	0033      	movs	r3, r6
 80009cc:	e6ff      	b.n	80007ce <__aeabi_dadd+0x19a>
 80009ce:	0030      	movs	r0, r6
 80009d0:	3d1f      	subs	r5, #31
 80009d2:	40e8      	lsrs	r0, r5
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d003      	beq.n	80009e0 <__aeabi_dadd+0x3ac>
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	1acb      	subs	r3, r1, r3
 80009dc:	409e      	lsls	r6, r3
 80009de:	4337      	orrs	r7, r6
 80009e0:	1e7b      	subs	r3, r7, #1
 80009e2:	419f      	sbcs	r7, r3
 80009e4:	2207      	movs	r2, #7
 80009e6:	4307      	orrs	r7, r0
 80009e8:	403a      	ands	r2, r7
 80009ea:	2100      	movs	r1, #0
 80009ec:	2500      	movs	r5, #0
 80009ee:	e789      	b.n	8000904 <__aeabi_dadd+0x2d0>
 80009f0:	1a17      	subs	r7, r2, r0
 80009f2:	4643      	mov	r3, r8
 80009f4:	42ba      	cmp	r2, r7
 80009f6:	41b6      	sbcs	r6, r6
 80009f8:	1a59      	subs	r1, r3, r1
 80009fa:	4276      	negs	r6, r6
 80009fc:	1b8e      	subs	r6, r1, r6
 80009fe:	4664      	mov	r4, ip
 8000a00:	e64e      	b.n	80006a0 <__aeabi_dadd+0x6c>
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x3d4>
 8000a06:	e0ad      	b.n	8000b64 <__aeabi_dadd+0x530>
 8000a08:	2620      	movs	r6, #32
 8000a0a:	4647      	mov	r7, r8
 8000a0c:	1af6      	subs	r6, r6, r3
 8000a0e:	40b7      	lsls	r7, r6
 8000a10:	46b9      	mov	r9, r7
 8000a12:	0017      	movs	r7, r2
 8000a14:	46b2      	mov	sl, r6
 8000a16:	40df      	lsrs	r7, r3
 8000a18:	464e      	mov	r6, r9
 8000a1a:	433e      	orrs	r6, r7
 8000a1c:	0037      	movs	r7, r6
 8000a1e:	4656      	mov	r6, sl
 8000a20:	40b2      	lsls	r2, r6
 8000a22:	1e56      	subs	r6, r2, #1
 8000a24:	41b2      	sbcs	r2, r6
 8000a26:	4317      	orrs	r7, r2
 8000a28:	4642      	mov	r2, r8
 8000a2a:	40da      	lsrs	r2, r3
 8000a2c:	1889      	adds	r1, r1, r2
 8000a2e:	e6ae      	b.n	800078e <__aeabi_dadd+0x15a>
 8000a30:	000007ff 	.word	0x000007ff
 8000a34:	ff7fffff 	.word	0xff7fffff
 8000a38:	800fffff 	.word	0x800fffff
 8000a3c:	2620      	movs	r6, #32
 8000a3e:	4647      	mov	r7, r8
 8000a40:	1af6      	subs	r6, r6, r3
 8000a42:	40b7      	lsls	r7, r6
 8000a44:	46b9      	mov	r9, r7
 8000a46:	0017      	movs	r7, r2
 8000a48:	46b2      	mov	sl, r6
 8000a4a:	40df      	lsrs	r7, r3
 8000a4c:	464e      	mov	r6, r9
 8000a4e:	433e      	orrs	r6, r7
 8000a50:	0037      	movs	r7, r6
 8000a52:	4656      	mov	r6, sl
 8000a54:	40b2      	lsls	r2, r6
 8000a56:	1e56      	subs	r6, r2, #1
 8000a58:	41b2      	sbcs	r2, r6
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	40da      	lsrs	r2, r3
 8000a60:	1a89      	subs	r1, r1, r2
 8000a62:	e799      	b.n	8000998 <__aeabi_dadd+0x364>
 8000a64:	4c7f      	ldr	r4, [pc, #508]	; (8000c64 <__aeabi_dadd+0x630>)
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d05b      	beq.n	8000b22 <__aeabi_dadd+0x4ee>
 8000a6a:	2480      	movs	r4, #128	; 0x80
 8000a6c:	0424      	lsls	r4, r4, #16
 8000a6e:	425b      	negs	r3, r3
 8000a70:	4321      	orrs	r1, r4
 8000a72:	e727      	b.n	80008c4 <__aeabi_dadd+0x290>
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d10c      	bne.n	8000a92 <__aeabi_dadd+0x45e>
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x44a>
 8000a7c:	e0cb      	b.n	8000c16 <__aeabi_dadd+0x5e2>
 8000a7e:	4664      	mov	r4, ip
 8000a80:	0039      	movs	r1, r7
 8000a82:	0010      	movs	r0, r2
 8000a84:	4d77      	ldr	r5, [pc, #476]	; (8000c64 <__aeabi_dadd+0x630>)
 8000a86:	e6d7      	b.n	8000838 <__aeabi_dadd+0x204>
 8000a88:	4f76      	ldr	r7, [pc, #472]	; (8000c64 <__aeabi_dadd+0x630>)
 8000a8a:	42bb      	cmp	r3, r7
 8000a8c:	d018      	beq.n	8000ac0 <__aeabi_dadd+0x48c>
 8000a8e:	0033      	movs	r3, r6
 8000a90:	e675      	b.n	800077e <__aeabi_dadd+0x14a>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d014      	beq.n	8000ac0 <__aeabi_dadd+0x48c>
 8000a96:	074b      	lsls	r3, r1, #29
 8000a98:	08c0      	lsrs	r0, r0, #3
 8000a9a:	4318      	orrs	r0, r3
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	031b      	lsls	r3, r3, #12
 8000aa2:	4219      	tst	r1, r3
 8000aa4:	d007      	beq.n	8000ab6 <__aeabi_dadd+0x482>
 8000aa6:	08fc      	lsrs	r4, r7, #3
 8000aa8:	421c      	tst	r4, r3
 8000aaa:	d104      	bne.n	8000ab6 <__aeabi_dadd+0x482>
 8000aac:	0779      	lsls	r1, r7, #29
 8000aae:	08d0      	lsrs	r0, r2, #3
 8000ab0:	4308      	orrs	r0, r1
 8000ab2:	46e1      	mov	r9, ip
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	464c      	mov	r4, r9
 8000ab8:	0f42      	lsrs	r2, r0, #29
 8000aba:	00c9      	lsls	r1, r1, #3
 8000abc:	4311      	orrs	r1, r2
 8000abe:	00c0      	lsls	r0, r0, #3
 8000ac0:	4d68      	ldr	r5, [pc, #416]	; (8000c64 <__aeabi_dadd+0x630>)
 8000ac2:	e6b9      	b.n	8000838 <__aeabi_dadd+0x204>
 8000ac4:	001d      	movs	r5, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e6c0      	b.n	800084e <__aeabi_dadd+0x21a>
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d15b      	bne.n	8000b88 <__aeabi_dadd+0x554>
 8000ad0:	000d      	movs	r5, r1
 8000ad2:	4305      	orrs	r5, r0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x4a4>
 8000ad6:	e6e2      	b.n	800089e <__aeabi_dadd+0x26a>
 8000ad8:	1c5d      	adds	r5, r3, #1
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x4aa>
 8000adc:	e0b0      	b.n	8000c40 <__aeabi_dadd+0x60c>
 8000ade:	4d61      	ldr	r5, [pc, #388]	; (8000c64 <__aeabi_dadd+0x630>)
 8000ae0:	42ae      	cmp	r6, r5
 8000ae2:	d01f      	beq.n	8000b24 <__aeabi_dadd+0x4f0>
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	2b38      	cmp	r3, #56	; 0x38
 8000ae8:	dc71      	bgt.n	8000bce <__aeabi_dadd+0x59a>
 8000aea:	2b1f      	cmp	r3, #31
 8000aec:	dd00      	ble.n	8000af0 <__aeabi_dadd+0x4bc>
 8000aee:	e096      	b.n	8000c1e <__aeabi_dadd+0x5ea>
 8000af0:	2520      	movs	r5, #32
 8000af2:	000f      	movs	r7, r1
 8000af4:	1aed      	subs	r5, r5, r3
 8000af6:	40af      	lsls	r7, r5
 8000af8:	46b9      	mov	r9, r7
 8000afa:	0007      	movs	r7, r0
 8000afc:	46aa      	mov	sl, r5
 8000afe:	40df      	lsrs	r7, r3
 8000b00:	464d      	mov	r5, r9
 8000b02:	433d      	orrs	r5, r7
 8000b04:	002f      	movs	r7, r5
 8000b06:	4655      	mov	r5, sl
 8000b08:	40a8      	lsls	r0, r5
 8000b0a:	40d9      	lsrs	r1, r3
 8000b0c:	1e45      	subs	r5, r0, #1
 8000b0e:	41a8      	sbcs	r0, r5
 8000b10:	4488      	add	r8, r1
 8000b12:	4307      	orrs	r7, r0
 8000b14:	18bf      	adds	r7, r7, r2
 8000b16:	4297      	cmp	r7, r2
 8000b18:	4192      	sbcs	r2, r2
 8000b1a:	4251      	negs	r1, r2
 8000b1c:	4441      	add	r1, r8
 8000b1e:	0035      	movs	r5, r6
 8000b20:	e63a      	b.n	8000798 <__aeabi_dadd+0x164>
 8000b22:	4664      	mov	r4, ip
 8000b24:	0035      	movs	r5, r6
 8000b26:	4641      	mov	r1, r8
 8000b28:	0010      	movs	r0, r2
 8000b2a:	e685      	b.n	8000838 <__aeabi_dadd+0x204>
 8000b2c:	000b      	movs	r3, r1
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d000      	beq.n	8000b36 <__aeabi_dadd+0x502>
 8000b34:	e663      	b.n	80007fe <__aeabi_dadd+0x1ca>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f5      	beq.n	8000b26 <__aeabi_dadd+0x4f2>
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x50e>
 8000b40:	e67a      	b.n	8000838 <__aeabi_dadd+0x204>
 8000b42:	1887      	adds	r7, r0, r2
 8000b44:	4287      	cmp	r7, r0
 8000b46:	4180      	sbcs	r0, r0
 8000b48:	2207      	movs	r2, #7
 8000b4a:	4441      	add	r1, r8
 8000b4c:	4240      	negs	r0, r0
 8000b4e:	1809      	adds	r1, r1, r0
 8000b50:	403a      	ands	r2, r7
 8000b52:	020b      	lsls	r3, r1, #8
 8000b54:	d400      	bmi.n	8000b58 <__aeabi_dadd+0x524>
 8000b56:	e6d5      	b.n	8000904 <__aeabi_dadd+0x2d0>
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <__aeabi_dadd+0x634>)
 8000b5a:	3501      	adds	r5, #1
 8000b5c:	4019      	ands	r1, r3
 8000b5e:	e5c9      	b.n	80006f4 <__aeabi_dadd+0xc0>
 8000b60:	0038      	movs	r0, r7
 8000b62:	e669      	b.n	8000838 <__aeabi_dadd+0x204>
 8000b64:	001e      	movs	r6, r3
 8000b66:	4647      	mov	r7, r8
 8000b68:	3e20      	subs	r6, #32
 8000b6a:	40f7      	lsrs	r7, r6
 8000b6c:	46bc      	mov	ip, r7
 8000b6e:	2b20      	cmp	r3, #32
 8000b70:	d004      	beq.n	8000b7c <__aeabi_dadd+0x548>
 8000b72:	2640      	movs	r6, #64	; 0x40
 8000b74:	1af3      	subs	r3, r6, r3
 8000b76:	4646      	mov	r6, r8
 8000b78:	409e      	lsls	r6, r3
 8000b7a:	4332      	orrs	r2, r6
 8000b7c:	0017      	movs	r7, r2
 8000b7e:	4663      	mov	r3, ip
 8000b80:	1e7a      	subs	r2, r7, #1
 8000b82:	4197      	sbcs	r7, r2
 8000b84:	431f      	orrs	r7, r3
 8000b86:	e602      	b.n	800078e <__aeabi_dadd+0x15a>
 8000b88:	4d36      	ldr	r5, [pc, #216]	; (8000c64 <__aeabi_dadd+0x630>)
 8000b8a:	42ae      	cmp	r6, r5
 8000b8c:	d0ca      	beq.n	8000b24 <__aeabi_dadd+0x4f0>
 8000b8e:	2580      	movs	r5, #128	; 0x80
 8000b90:	042d      	lsls	r5, r5, #16
 8000b92:	425b      	negs	r3, r3
 8000b94:	4329      	orrs	r1, r5
 8000b96:	e7a6      	b.n	8000ae6 <__aeabi_dadd+0x4b2>
 8000b98:	4308      	orrs	r0, r1
 8000b9a:	1e41      	subs	r1, r0, #1
 8000b9c:	4188      	sbcs	r0, r1
 8000b9e:	e6a6      	b.n	80008ee <__aeabi_dadd+0x2ba>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x572>
 8000ba4:	e648      	b.n	8000838 <__aeabi_dadd+0x204>
 8000ba6:	1a87      	subs	r7, r0, r2
 8000ba8:	4643      	mov	r3, r8
 8000baa:	42b8      	cmp	r0, r7
 8000bac:	41b6      	sbcs	r6, r6
 8000bae:	1acb      	subs	r3, r1, r3
 8000bb0:	4276      	negs	r6, r6
 8000bb2:	1b9e      	subs	r6, r3, r6
 8000bb4:	0233      	lsls	r3, r6, #8
 8000bb6:	d54b      	bpl.n	8000c50 <__aeabi_dadd+0x61c>
 8000bb8:	1a17      	subs	r7, r2, r0
 8000bba:	4643      	mov	r3, r8
 8000bbc:	42ba      	cmp	r2, r7
 8000bbe:	4192      	sbcs	r2, r2
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	1a89      	subs	r1, r1, r2
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	4664      	mov	r4, ip
 8000bca:	403a      	ands	r2, r7
 8000bcc:	e592      	b.n	80006f4 <__aeabi_dadd+0xc0>
 8000bce:	4301      	orrs	r1, r0
 8000bd0:	000f      	movs	r7, r1
 8000bd2:	1e79      	subs	r1, r7, #1
 8000bd4:	418f      	sbcs	r7, r1
 8000bd6:	e79d      	b.n	8000b14 <__aeabi_dadd+0x4e0>
 8000bd8:	001c      	movs	r4, r3
 8000bda:	000f      	movs	r7, r1
 8000bdc:	3c20      	subs	r4, #32
 8000bde:	40e7      	lsrs	r7, r4
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	d003      	beq.n	8000bec <__aeabi_dadd+0x5b8>
 8000be4:	2440      	movs	r4, #64	; 0x40
 8000be6:	1ae3      	subs	r3, r4, r3
 8000be8:	4099      	lsls	r1, r3
 8000bea:	4308      	orrs	r0, r1
 8000bec:	1e41      	subs	r1, r0, #1
 8000bee:	4188      	sbcs	r0, r1
 8000bf0:	4338      	orrs	r0, r7
 8000bf2:	e67c      	b.n	80008ee <__aeabi_dadd+0x2ba>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	e625      	b.n	8000846 <__aeabi_dadd+0x212>
 8000bfa:	1a17      	subs	r7, r2, r0
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	42ba      	cmp	r2, r7
 8000c00:	4192      	sbcs	r2, r2
 8000c02:	1a59      	subs	r1, r3, r1
 8000c04:	4252      	negs	r2, r2
 8000c06:	1a89      	subs	r1, r1, r2
 8000c08:	4664      	mov	r4, ip
 8000c0a:	0035      	movs	r5, r6
 8000c0c:	e543      	b.n	8000696 <__aeabi_dadd+0x62>
 8000c0e:	4641      	mov	r1, r8
 8000c10:	0010      	movs	r0, r2
 8000c12:	4d14      	ldr	r5, [pc, #80]	; (8000c64 <__aeabi_dadd+0x630>)
 8000c14:	e610      	b.n	8000838 <__aeabi_dadd+0x204>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	2400      	movs	r4, #0
 8000c1a:	0312      	lsls	r2, r2, #12
 8000c1c:	e680      	b.n	8000920 <__aeabi_dadd+0x2ec>
 8000c1e:	001d      	movs	r5, r3
 8000c20:	000f      	movs	r7, r1
 8000c22:	3d20      	subs	r5, #32
 8000c24:	40ef      	lsrs	r7, r5
 8000c26:	46bc      	mov	ip, r7
 8000c28:	2b20      	cmp	r3, #32
 8000c2a:	d003      	beq.n	8000c34 <__aeabi_dadd+0x600>
 8000c2c:	2540      	movs	r5, #64	; 0x40
 8000c2e:	1aeb      	subs	r3, r5, r3
 8000c30:	4099      	lsls	r1, r3
 8000c32:	4308      	orrs	r0, r1
 8000c34:	0007      	movs	r7, r0
 8000c36:	4663      	mov	r3, ip
 8000c38:	1e78      	subs	r0, r7, #1
 8000c3a:	4187      	sbcs	r7, r0
 8000c3c:	431f      	orrs	r7, r3
 8000c3e:	e769      	b.n	8000b14 <__aeabi_dadd+0x4e0>
 8000c40:	1887      	adds	r7, r0, r2
 8000c42:	4297      	cmp	r7, r2
 8000c44:	419b      	sbcs	r3, r3
 8000c46:	4441      	add	r1, r8
 8000c48:	425b      	negs	r3, r3
 8000c4a:	18c9      	adds	r1, r1, r3
 8000c4c:	0035      	movs	r5, r6
 8000c4e:	e5a3      	b.n	8000798 <__aeabi_dadd+0x164>
 8000c50:	003b      	movs	r3, r7
 8000c52:	4333      	orrs	r3, r6
 8000c54:	d0ce      	beq.n	8000bf4 <__aeabi_dadd+0x5c0>
 8000c56:	2207      	movs	r2, #7
 8000c58:	0031      	movs	r1, r6
 8000c5a:	403a      	ands	r2, r7
 8000c5c:	e652      	b.n	8000904 <__aeabi_dadd+0x2d0>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	001a      	movs	r2, r3
 8000c62:	e5f4      	b.n	800084e <__aeabi_dadd+0x21a>
 8000c64:	000007ff 	.word	0x000007ff
 8000c68:	ff7fffff 	.word	0xff7fffff

08000c6c <__eqdf2>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	464f      	mov	r7, r9
 8000c70:	4646      	mov	r6, r8
 8000c72:	46d6      	mov	lr, sl
 8000c74:	4684      	mov	ip, r0
 8000c76:	b5c0      	push	{r6, r7, lr}
 8000c78:	4680      	mov	r8, r0
 8000c7a:	4e19      	ldr	r6, [pc, #100]	; (8000ce0 <__eqdf2+0x74>)
 8000c7c:	0318      	lsls	r0, r3, #12
 8000c7e:	030f      	lsls	r7, r1, #12
 8000c80:	004d      	lsls	r5, r1, #1
 8000c82:	0b00      	lsrs	r0, r0, #12
 8000c84:	005c      	lsls	r4, r3, #1
 8000c86:	4682      	mov	sl, r0
 8000c88:	0b3f      	lsrs	r7, r7, #12
 8000c8a:	0d6d      	lsrs	r5, r5, #21
 8000c8c:	0fc9      	lsrs	r1, r1, #31
 8000c8e:	4691      	mov	r9, r2
 8000c90:	0d64      	lsrs	r4, r4, #21
 8000c92:	0fdb      	lsrs	r3, r3, #31
 8000c94:	2001      	movs	r0, #1
 8000c96:	42b5      	cmp	r5, r6
 8000c98:	d00a      	beq.n	8000cb0 <__eqdf2+0x44>
 8000c9a:	42b4      	cmp	r4, r6
 8000c9c:	d003      	beq.n	8000ca6 <__eqdf2+0x3a>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d101      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000ca2:	4557      	cmp	r7, sl
 8000ca4:	d00c      	beq.n	8000cc0 <__eqdf2+0x54>
 8000ca6:	bc1c      	pop	{r2, r3, r4}
 8000ca8:	4690      	mov	r8, r2
 8000caa:	4699      	mov	r9, r3
 8000cac:	46a2      	mov	sl, r4
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	4666      	mov	r6, ip
 8000cb2:	433e      	orrs	r6, r7
 8000cb4:	d1f7      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000cb6:	42ac      	cmp	r4, r5
 8000cb8:	d1f5      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000cba:	4654      	mov	r4, sl
 8000cbc:	4314      	orrs	r4, r2
 8000cbe:	d1f2      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d1ef      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d007      	beq.n	8000cda <__eqdf2+0x6e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d1eb      	bne.n	8000ca6 <__eqdf2+0x3a>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	431f      	orrs	r7, r3
 8000cd2:	0038      	movs	r0, r7
 8000cd4:	1e47      	subs	r7, r0, #1
 8000cd6:	41b8      	sbcs	r0, r7
 8000cd8:	e7e5      	b.n	8000ca6 <__eqdf2+0x3a>
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e7e3      	b.n	8000ca6 <__eqdf2+0x3a>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	000007ff 	.word	0x000007ff

08000ce4 <__gedf2>:
 8000ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce6:	464f      	mov	r7, r9
 8000ce8:	4646      	mov	r6, r8
 8000cea:	46d6      	mov	lr, sl
 8000cec:	004d      	lsls	r5, r1, #1
 8000cee:	b5c0      	push	{r6, r7, lr}
 8000cf0:	030e      	lsls	r6, r1, #12
 8000cf2:	0fc9      	lsrs	r1, r1, #31
 8000cf4:	468a      	mov	sl, r1
 8000cf6:	492c      	ldr	r1, [pc, #176]	; (8000da8 <__gedf2+0xc4>)
 8000cf8:	031f      	lsls	r7, r3, #12
 8000cfa:	005c      	lsls	r4, r3, #1
 8000cfc:	4680      	mov	r8, r0
 8000cfe:	0b36      	lsrs	r6, r6, #12
 8000d00:	0d6d      	lsrs	r5, r5, #21
 8000d02:	4691      	mov	r9, r2
 8000d04:	0b3f      	lsrs	r7, r7, #12
 8000d06:	0d64      	lsrs	r4, r4, #21
 8000d08:	0fdb      	lsrs	r3, r3, #31
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	d01e      	beq.n	8000d4c <__gedf2+0x68>
 8000d0e:	428c      	cmp	r4, r1
 8000d10:	d016      	beq.n	8000d40 <__gedf2+0x5c>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d11e      	bne.n	8000d54 <__gedf2+0x70>
 8000d16:	4330      	orrs	r0, r6
 8000d18:	4684      	mov	ip, r0
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d101      	bne.n	8000d22 <__gedf2+0x3e>
 8000d1e:	433a      	orrs	r2, r7
 8000d20:	d023      	beq.n	8000d6a <__gedf2+0x86>
 8000d22:	4662      	mov	r2, ip
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d01a      	beq.n	8000d5e <__gedf2+0x7a>
 8000d28:	459a      	cmp	sl, r3
 8000d2a:	d029      	beq.n	8000d80 <__gedf2+0x9c>
 8000d2c:	4651      	mov	r1, sl
 8000d2e:	2002      	movs	r0, #2
 8000d30:	3901      	subs	r1, #1
 8000d32:	4008      	ands	r0, r1
 8000d34:	3801      	subs	r0, #1
 8000d36:	bc1c      	pop	{r2, r3, r4}
 8000d38:	4690      	mov	r8, r2
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	46a2      	mov	sl, r4
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	0039      	movs	r1, r7
 8000d42:	4311      	orrs	r1, r2
 8000d44:	d0e5      	beq.n	8000d12 <__gedf2+0x2e>
 8000d46:	2002      	movs	r0, #2
 8000d48:	4240      	negs	r0, r0
 8000d4a:	e7f4      	b.n	8000d36 <__gedf2+0x52>
 8000d4c:	4330      	orrs	r0, r6
 8000d4e:	d1fa      	bne.n	8000d46 <__gedf2+0x62>
 8000d50:	42ac      	cmp	r4, r5
 8000d52:	d00f      	beq.n	8000d74 <__gedf2+0x90>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d10f      	bne.n	8000d78 <__gedf2+0x94>
 8000d58:	433a      	orrs	r2, r7
 8000d5a:	d0e7      	beq.n	8000d2c <__gedf2+0x48>
 8000d5c:	e00c      	b.n	8000d78 <__gedf2+0x94>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4393      	bics	r3, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	3001      	adds	r0, #1
 8000d68:	e7e5      	b.n	8000d36 <__gedf2+0x52>
 8000d6a:	4663      	mov	r3, ip
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0e1      	beq.n	8000d36 <__gedf2+0x52>
 8000d72:	e7db      	b.n	8000d2c <__gedf2+0x48>
 8000d74:	433a      	orrs	r2, r7
 8000d76:	d1e6      	bne.n	8000d46 <__gedf2+0x62>
 8000d78:	459a      	cmp	sl, r3
 8000d7a:	d1d7      	bne.n	8000d2c <__gedf2+0x48>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	dcd5      	bgt.n	8000d2c <__gedf2+0x48>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	db05      	blt.n	8000d90 <__gedf2+0xac>
 8000d84:	42be      	cmp	r6, r7
 8000d86:	d8d1      	bhi.n	8000d2c <__gedf2+0x48>
 8000d88:	d008      	beq.n	8000d9c <__gedf2+0xb8>
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	42be      	cmp	r6, r7
 8000d8e:	d2d2      	bcs.n	8000d36 <__gedf2+0x52>
 8000d90:	4650      	mov	r0, sl
 8000d92:	2301      	movs	r3, #1
 8000d94:	3801      	subs	r0, #1
 8000d96:	4398      	bics	r0, r3
 8000d98:	3001      	adds	r0, #1
 8000d9a:	e7cc      	b.n	8000d36 <__gedf2+0x52>
 8000d9c:	45c8      	cmp	r8, r9
 8000d9e:	d8c5      	bhi.n	8000d2c <__gedf2+0x48>
 8000da0:	2000      	movs	r0, #0
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d3f4      	bcc.n	8000d90 <__gedf2+0xac>
 8000da6:	e7c6      	b.n	8000d36 <__gedf2+0x52>
 8000da8:	000007ff 	.word	0x000007ff

08000dac <__ledf2>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	464f      	mov	r7, r9
 8000db0:	4646      	mov	r6, r8
 8000db2:	46d6      	mov	lr, sl
 8000db4:	004d      	lsls	r5, r1, #1
 8000db6:	b5c0      	push	{r6, r7, lr}
 8000db8:	030e      	lsls	r6, r1, #12
 8000dba:	0fc9      	lsrs	r1, r1, #31
 8000dbc:	468a      	mov	sl, r1
 8000dbe:	492e      	ldr	r1, [pc, #184]	; (8000e78 <__ledf2+0xcc>)
 8000dc0:	031f      	lsls	r7, r3, #12
 8000dc2:	005c      	lsls	r4, r3, #1
 8000dc4:	4680      	mov	r8, r0
 8000dc6:	0b36      	lsrs	r6, r6, #12
 8000dc8:	0d6d      	lsrs	r5, r5, #21
 8000dca:	4691      	mov	r9, r2
 8000dcc:	0b3f      	lsrs	r7, r7, #12
 8000dce:	0d64      	lsrs	r4, r4, #21
 8000dd0:	0fdb      	lsrs	r3, r3, #31
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	d018      	beq.n	8000e08 <__ledf2+0x5c>
 8000dd6:	428c      	cmp	r4, r1
 8000dd8:	d011      	beq.n	8000dfe <__ledf2+0x52>
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d118      	bne.n	8000e10 <__ledf2+0x64>
 8000dde:	4330      	orrs	r0, r6
 8000de0:	4684      	mov	ip, r0
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d11e      	bne.n	8000e24 <__ledf2+0x78>
 8000de6:	433a      	orrs	r2, r7
 8000de8:	d11c      	bne.n	8000e24 <__ledf2+0x78>
 8000dea:	4663      	mov	r3, ip
 8000dec:	2000      	movs	r0, #0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d030      	beq.n	8000e54 <__ledf2+0xa8>
 8000df2:	4651      	mov	r1, sl
 8000df4:	2002      	movs	r0, #2
 8000df6:	3901      	subs	r1, #1
 8000df8:	4008      	ands	r0, r1
 8000dfa:	3801      	subs	r0, #1
 8000dfc:	e02a      	b.n	8000e54 <__ledf2+0xa8>
 8000dfe:	0039      	movs	r1, r7
 8000e00:	4311      	orrs	r1, r2
 8000e02:	d0ea      	beq.n	8000dda <__ledf2+0x2e>
 8000e04:	2002      	movs	r0, #2
 8000e06:	e025      	b.n	8000e54 <__ledf2+0xa8>
 8000e08:	4330      	orrs	r0, r6
 8000e0a:	d1fb      	bne.n	8000e04 <__ledf2+0x58>
 8000e0c:	42ac      	cmp	r4, r5
 8000e0e:	d026      	beq.n	8000e5e <__ledf2+0xb2>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d126      	bne.n	8000e62 <__ledf2+0xb6>
 8000e14:	433a      	orrs	r2, r7
 8000e16:	d124      	bne.n	8000e62 <__ledf2+0xb6>
 8000e18:	4651      	mov	r1, sl
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	3901      	subs	r1, #1
 8000e1e:	4008      	ands	r0, r1
 8000e20:	3801      	subs	r0, #1
 8000e22:	e017      	b.n	8000e54 <__ledf2+0xa8>
 8000e24:	4662      	mov	r2, ip
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d00f      	beq.n	8000e4a <__ledf2+0x9e>
 8000e2a:	459a      	cmp	sl, r3
 8000e2c:	d1e1      	bne.n	8000df2 <__ledf2+0x46>
 8000e2e:	42a5      	cmp	r5, r4
 8000e30:	db05      	blt.n	8000e3e <__ledf2+0x92>
 8000e32:	42be      	cmp	r6, r7
 8000e34:	d8dd      	bhi.n	8000df2 <__ledf2+0x46>
 8000e36:	d019      	beq.n	8000e6c <__ledf2+0xc0>
 8000e38:	2000      	movs	r0, #0
 8000e3a:	42be      	cmp	r6, r7
 8000e3c:	d20a      	bcs.n	8000e54 <__ledf2+0xa8>
 8000e3e:	4650      	mov	r0, sl
 8000e40:	2301      	movs	r3, #1
 8000e42:	3801      	subs	r0, #1
 8000e44:	4398      	bics	r0, r3
 8000e46:	3001      	adds	r0, #1
 8000e48:	e004      	b.n	8000e54 <__ledf2+0xa8>
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4393      	bics	r3, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	3001      	adds	r0, #1
 8000e54:	bc1c      	pop	{r2, r3, r4}
 8000e56:	4690      	mov	r8, r2
 8000e58:	4699      	mov	r9, r3
 8000e5a:	46a2      	mov	sl, r4
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5e:	433a      	orrs	r2, r7
 8000e60:	d1d0      	bne.n	8000e04 <__ledf2+0x58>
 8000e62:	459a      	cmp	sl, r3
 8000e64:	d1c5      	bne.n	8000df2 <__ledf2+0x46>
 8000e66:	42a5      	cmp	r5, r4
 8000e68:	dcc3      	bgt.n	8000df2 <__ledf2+0x46>
 8000e6a:	e7e0      	b.n	8000e2e <__ledf2+0x82>
 8000e6c:	45c8      	cmp	r8, r9
 8000e6e:	d8c0      	bhi.n	8000df2 <__ledf2+0x46>
 8000e70:	2000      	movs	r0, #0
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d3e3      	bcc.n	8000e3e <__ledf2+0x92>
 8000e76:	e7ed      	b.n	8000e54 <__ledf2+0xa8>
 8000e78:	000007ff 	.word	0x000007ff

08000e7c <__aeabi_dmul>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	46de      	mov	lr, fp
 8000e82:	464e      	mov	r6, r9
 8000e84:	4645      	mov	r5, r8
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	4683      	mov	fp, r0
 8000e8a:	0006      	movs	r6, r0
 8000e8c:	030f      	lsls	r7, r1, #12
 8000e8e:	0048      	lsls	r0, r1, #1
 8000e90:	b087      	sub	sp, #28
 8000e92:	4692      	mov	sl, r2
 8000e94:	001d      	movs	r5, r3
 8000e96:	0b3f      	lsrs	r7, r7, #12
 8000e98:	0d40      	lsrs	r0, r0, #21
 8000e9a:	0fcc      	lsrs	r4, r1, #31
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dmul+0x26>
 8000ea0:	e06f      	b.n	8000f82 <__aeabi_dmul+0x106>
 8000ea2:	4bde      	ldr	r3, [pc, #888]	; (800121c <__aeabi_dmul+0x3a0>)
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d038      	beq.n	8000f1a <__aeabi_dmul+0x9e>
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	00ff      	lsls	r7, r7, #3
 8000eac:	041b      	lsls	r3, r3, #16
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	0f73      	lsrs	r3, r6, #29
 8000eb2:	433b      	orrs	r3, r7
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	4bda      	ldr	r3, [pc, #872]	; (8001220 <__aeabi_dmul+0x3a4>)
 8000eb8:	2700      	movs	r7, #0
 8000eba:	4699      	mov	r9, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	469b      	mov	fp, r3
 8000ec0:	00f6      	lsls	r6, r6, #3
 8000ec2:	4481      	add	r9, r0
 8000ec4:	032b      	lsls	r3, r5, #12
 8000ec6:	0069      	lsls	r1, r5, #1
 8000ec8:	0b1b      	lsrs	r3, r3, #12
 8000eca:	4652      	mov	r2, sl
 8000ecc:	4698      	mov	r8, r3
 8000ece:	0d49      	lsrs	r1, r1, #21
 8000ed0:	0fed      	lsrs	r5, r5, #31
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dmul+0x5c>
 8000ed6:	e085      	b.n	8000fe4 <__aeabi_dmul+0x168>
 8000ed8:	4bd0      	ldr	r3, [pc, #832]	; (800121c <__aeabi_dmul+0x3a0>)
 8000eda:	4299      	cmp	r1, r3
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dmul+0x64>
 8000ede:	e073      	b.n	8000fc8 <__aeabi_dmul+0x14c>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	00da      	lsls	r2, r3, #3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	041b      	lsls	r3, r3, #16
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	4652      	mov	r2, sl
 8000eec:	48cc      	ldr	r0, [pc, #816]	; (8001220 <__aeabi_dmul+0x3a4>)
 8000eee:	0f52      	lsrs	r2, r2, #29
 8000ef0:	4684      	mov	ip, r0
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4461      	add	r1, ip
 8000efa:	00d2      	lsls	r2, r2, #3
 8000efc:	4489      	add	r9, r1
 8000efe:	0021      	movs	r1, r4
 8000f00:	4069      	eors	r1, r5
 8000f02:	9100      	str	r1, [sp, #0]
 8000f04:	468c      	mov	ip, r1
 8000f06:	2101      	movs	r1, #1
 8000f08:	4449      	add	r1, r9
 8000f0a:	468a      	mov	sl, r1
 8000f0c:	2f0f      	cmp	r7, #15
 8000f0e:	d900      	bls.n	8000f12 <__aeabi_dmul+0x96>
 8000f10:	e090      	b.n	8001034 <__aeabi_dmul+0x1b8>
 8000f12:	49c4      	ldr	r1, [pc, #784]	; (8001224 <__aeabi_dmul+0x3a8>)
 8000f14:	00bf      	lsls	r7, r7, #2
 8000f16:	59cf      	ldr	r7, [r1, r7]
 8000f18:	46bf      	mov	pc, r7
 8000f1a:	465b      	mov	r3, fp
 8000f1c:	433b      	orrs	r3, r7
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	d000      	beq.n	8000f24 <__aeabi_dmul+0xa8>
 8000f22:	e16a      	b.n	80011fa <__aeabi_dmul+0x37e>
 8000f24:	2302      	movs	r3, #2
 8000f26:	2708      	movs	r7, #8
 8000f28:	2600      	movs	r6, #0
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	e7c9      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8000f30:	0032      	movs	r2, r6
 8000f32:	4658      	mov	r0, fp
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	4661      	mov	r1, ip
 8000f38:	9100      	str	r1, [sp, #0]
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dmul+0xc4>
 8000f3e:	e075      	b.n	800102c <__aeabi_dmul+0x1b0>
 8000f40:	2803      	cmp	r0, #3
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dmul+0xca>
 8000f44:	e1fe      	b.n	8001344 <__aeabi_dmul+0x4c8>
 8000f46:	2801      	cmp	r0, #1
 8000f48:	d000      	beq.n	8000f4c <__aeabi_dmul+0xd0>
 8000f4a:	e12c      	b.n	80011a6 <__aeabi_dmul+0x32a>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2700      	movs	r7, #0
 8000f50:	2600      	movs	r6, #0
 8000f52:	2500      	movs	r5, #0
 8000f54:	033f      	lsls	r7, r7, #12
 8000f56:	0d2a      	lsrs	r2, r5, #20
 8000f58:	0b3f      	lsrs	r7, r7, #12
 8000f5a:	48b3      	ldr	r0, [pc, #716]	; (8001228 <__aeabi_dmul+0x3ac>)
 8000f5c:	0512      	lsls	r2, r2, #20
 8000f5e:	433a      	orrs	r2, r7
 8000f60:	4002      	ands	r2, r0
 8000f62:	051b      	lsls	r3, r3, #20
 8000f64:	4313      	orrs	r3, r2
 8000f66:	9a00      	ldr	r2, [sp, #0]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	07d1      	lsls	r1, r2, #31
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	0030      	movs	r0, r6
 8000f72:	0019      	movs	r1, r3
 8000f74:	b007      	add	sp, #28
 8000f76:	bc3c      	pop	{r2, r3, r4, r5}
 8000f78:	4690      	mov	r8, r2
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	46a2      	mov	sl, r4
 8000f7e:	46ab      	mov	fp, r5
 8000f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f82:	465b      	mov	r3, fp
 8000f84:	433b      	orrs	r3, r7
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dmul+0x110>
 8000f8a:	e12f      	b.n	80011ec <__aeabi_dmul+0x370>
 8000f8c:	2f00      	cmp	r7, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dmul+0x116>
 8000f90:	e1a5      	b.n	80012de <__aeabi_dmul+0x462>
 8000f92:	0038      	movs	r0, r7
 8000f94:	f000 fa1e 	bl	80013d4 <__clzsi2>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	3b0b      	subs	r3, #11
 8000f9c:	2b1c      	cmp	r3, #28
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_dmul+0x126>
 8000fa0:	e196      	b.n	80012d0 <__aeabi_dmul+0x454>
 8000fa2:	221d      	movs	r2, #29
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	465a      	mov	r2, fp
 8000fa8:	0001      	movs	r1, r0
 8000faa:	40da      	lsrs	r2, r3
 8000fac:	465e      	mov	r6, fp
 8000fae:	3908      	subs	r1, #8
 8000fb0:	408f      	lsls	r7, r1
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	408e      	lsls	r6, r1
 8000fb6:	433b      	orrs	r3, r7
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	4b9c      	ldr	r3, [pc, #624]	; (800122c <__aeabi_dmul+0x3b0>)
 8000fbc:	2700      	movs	r7, #0
 8000fbe:	1a1b      	subs	r3, r3, r0
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	e77d      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8000fc8:	4641      	mov	r1, r8
 8000fca:	4653      	mov	r3, sl
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	4993      	ldr	r1, [pc, #588]	; (800121c <__aeabi_dmul+0x3a0>)
 8000fd0:	468c      	mov	ip, r1
 8000fd2:	44e1      	add	r9, ip
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dmul+0x15e>
 8000fd8:	e11a      	b.n	8001210 <__aeabi_dmul+0x394>
 8000fda:	2202      	movs	r2, #2
 8000fdc:	2002      	movs	r0, #2
 8000fde:	4317      	orrs	r7, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e78c      	b.n	8000efe <__aeabi_dmul+0x82>
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	d100      	bne.n	8000fea <__aeabi_dmul+0x16e>
 8000fe8:	e10d      	b.n	8001206 <__aeabi_dmul+0x38a>
 8000fea:	4643      	mov	r3, r8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dmul+0x176>
 8000ff0:	e181      	b.n	80012f6 <__aeabi_dmul+0x47a>
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	f000 f9ee 	bl	80013d4 <__clzsi2>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	3a0b      	subs	r2, #11
 8000ffc:	2a1c      	cmp	r2, #28
 8000ffe:	dd00      	ble.n	8001002 <__aeabi_dmul+0x186>
 8001000:	e172      	b.n	80012e8 <__aeabi_dmul+0x46c>
 8001002:	0001      	movs	r1, r0
 8001004:	4643      	mov	r3, r8
 8001006:	3908      	subs	r1, #8
 8001008:	408b      	lsls	r3, r1
 800100a:	4698      	mov	r8, r3
 800100c:	231d      	movs	r3, #29
 800100e:	1a9a      	subs	r2, r3, r2
 8001010:	4653      	mov	r3, sl
 8001012:	40d3      	lsrs	r3, r2
 8001014:	001a      	movs	r2, r3
 8001016:	4643      	mov	r3, r8
 8001018:	4313      	orrs	r3, r2
 800101a:	4652      	mov	r2, sl
 800101c:	408a      	lsls	r2, r1
 800101e:	4649      	mov	r1, r9
 8001020:	1a08      	subs	r0, r1, r0
 8001022:	4982      	ldr	r1, [pc, #520]	; (800122c <__aeabi_dmul+0x3b0>)
 8001024:	4689      	mov	r9, r1
 8001026:	4481      	add	r9, r0
 8001028:	2000      	movs	r0, #0
 800102a:	e768      	b.n	8000efe <__aeabi_dmul+0x82>
 800102c:	4b7b      	ldr	r3, [pc, #492]	; (800121c <__aeabi_dmul+0x3a0>)
 800102e:	2700      	movs	r7, #0
 8001030:	2600      	movs	r6, #0
 8001032:	e78e      	b.n	8000f52 <__aeabi_dmul+0xd6>
 8001034:	0c14      	lsrs	r4, r2, #16
 8001036:	0412      	lsls	r2, r2, #16
 8001038:	0c12      	lsrs	r2, r2, #16
 800103a:	0011      	movs	r1, r2
 800103c:	0c37      	lsrs	r7, r6, #16
 800103e:	0436      	lsls	r6, r6, #16
 8001040:	0c35      	lsrs	r5, r6, #16
 8001042:	4379      	muls	r1, r7
 8001044:	0028      	movs	r0, r5
 8001046:	468c      	mov	ip, r1
 8001048:	002e      	movs	r6, r5
 800104a:	4360      	muls	r0, r4
 800104c:	4460      	add	r0, ip
 800104e:	4683      	mov	fp, r0
 8001050:	4356      	muls	r6, r2
 8001052:	0021      	movs	r1, r4
 8001054:	0c30      	lsrs	r0, r6, #16
 8001056:	4680      	mov	r8, r0
 8001058:	4658      	mov	r0, fp
 800105a:	4379      	muls	r1, r7
 800105c:	4440      	add	r0, r8
 800105e:	9102      	str	r1, [sp, #8]
 8001060:	4584      	cmp	ip, r0
 8001062:	d906      	bls.n	8001072 <__aeabi_dmul+0x1f6>
 8001064:	4688      	mov	r8, r1
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0249      	lsls	r1, r1, #9
 800106a:	468c      	mov	ip, r1
 800106c:	44e0      	add	r8, ip
 800106e:	4641      	mov	r1, r8
 8001070:	9102      	str	r1, [sp, #8]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	0c01      	lsrs	r1, r0, #16
 8001076:	0c36      	lsrs	r6, r6, #16
 8001078:	0400      	lsls	r0, r0, #16
 800107a:	468b      	mov	fp, r1
 800107c:	1981      	adds	r1, r0, r6
 800107e:	0c1e      	lsrs	r6, r3, #16
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	9103      	str	r1, [sp, #12]
 8001086:	0019      	movs	r1, r3
 8001088:	4379      	muls	r1, r7
 800108a:	468c      	mov	ip, r1
 800108c:	0028      	movs	r0, r5
 800108e:	4375      	muls	r5, r6
 8001090:	4465      	add	r5, ip
 8001092:	46a8      	mov	r8, r5
 8001094:	4358      	muls	r0, r3
 8001096:	0c05      	lsrs	r5, r0, #16
 8001098:	4445      	add	r5, r8
 800109a:	4377      	muls	r7, r6
 800109c:	42a9      	cmp	r1, r5
 800109e:	d903      	bls.n	80010a8 <__aeabi_dmul+0x22c>
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0249      	lsls	r1, r1, #9
 80010a4:	468c      	mov	ip, r1
 80010a6:	4467      	add	r7, ip
 80010a8:	0c29      	lsrs	r1, r5, #16
 80010aa:	468c      	mov	ip, r1
 80010ac:	0039      	movs	r1, r7
 80010ae:	0400      	lsls	r0, r0, #16
 80010b0:	0c00      	lsrs	r0, r0, #16
 80010b2:	042d      	lsls	r5, r5, #16
 80010b4:	182d      	adds	r5, r5, r0
 80010b6:	4461      	add	r1, ip
 80010b8:	44ab      	add	fp, r5
 80010ba:	9105      	str	r1, [sp, #20]
 80010bc:	4659      	mov	r1, fp
 80010be:	9104      	str	r1, [sp, #16]
 80010c0:	9901      	ldr	r1, [sp, #4]
 80010c2:	040f      	lsls	r7, r1, #16
 80010c4:	0c3f      	lsrs	r7, r7, #16
 80010c6:	0c08      	lsrs	r0, r1, #16
 80010c8:	0039      	movs	r1, r7
 80010ca:	4351      	muls	r1, r2
 80010cc:	4342      	muls	r2, r0
 80010ce:	4690      	mov	r8, r2
 80010d0:	0002      	movs	r2, r0
 80010d2:	468c      	mov	ip, r1
 80010d4:	0c09      	lsrs	r1, r1, #16
 80010d6:	468b      	mov	fp, r1
 80010d8:	4362      	muls	r2, r4
 80010da:	437c      	muls	r4, r7
 80010dc:	4444      	add	r4, r8
 80010de:	445c      	add	r4, fp
 80010e0:	45a0      	cmp	r8, r4
 80010e2:	d903      	bls.n	80010ec <__aeabi_dmul+0x270>
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0249      	lsls	r1, r1, #9
 80010e8:	4688      	mov	r8, r1
 80010ea:	4442      	add	r2, r8
 80010ec:	0c21      	lsrs	r1, r4, #16
 80010ee:	4688      	mov	r8, r1
 80010f0:	4661      	mov	r1, ip
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	0c09      	lsrs	r1, r1, #16
 80010f6:	468c      	mov	ip, r1
 80010f8:	0039      	movs	r1, r7
 80010fa:	4359      	muls	r1, r3
 80010fc:	4343      	muls	r3, r0
 80010fe:	4370      	muls	r0, r6
 8001100:	437e      	muls	r6, r7
 8001102:	0c0f      	lsrs	r7, r1, #16
 8001104:	18f6      	adds	r6, r6, r3
 8001106:	0424      	lsls	r4, r4, #16
 8001108:	19be      	adds	r6, r7, r6
 800110a:	4464      	add	r4, ip
 800110c:	4442      	add	r2, r8
 800110e:	468c      	mov	ip, r1
 8001110:	42b3      	cmp	r3, r6
 8001112:	d903      	bls.n	800111c <__aeabi_dmul+0x2a0>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	4698      	mov	r8, r3
 800111a:	4440      	add	r0, r8
 800111c:	9b02      	ldr	r3, [sp, #8]
 800111e:	4661      	mov	r1, ip
 8001120:	4698      	mov	r8, r3
 8001122:	9b04      	ldr	r3, [sp, #16]
 8001124:	0437      	lsls	r7, r6, #16
 8001126:	4443      	add	r3, r8
 8001128:	469b      	mov	fp, r3
 800112a:	45ab      	cmp	fp, r5
 800112c:	41ad      	sbcs	r5, r5
 800112e:	426b      	negs	r3, r5
 8001130:	040d      	lsls	r5, r1, #16
 8001132:	9905      	ldr	r1, [sp, #20]
 8001134:	0c2d      	lsrs	r5, r5, #16
 8001136:	468c      	mov	ip, r1
 8001138:	197f      	adds	r7, r7, r5
 800113a:	4467      	add	r7, ip
 800113c:	18fd      	adds	r5, r7, r3
 800113e:	46a8      	mov	r8, r5
 8001140:	465d      	mov	r5, fp
 8001142:	192d      	adds	r5, r5, r4
 8001144:	42a5      	cmp	r5, r4
 8001146:	41a4      	sbcs	r4, r4
 8001148:	4693      	mov	fp, r2
 800114a:	4264      	negs	r4, r4
 800114c:	46a4      	mov	ip, r4
 800114e:	44c3      	add	fp, r8
 8001150:	44dc      	add	ip, fp
 8001152:	428f      	cmp	r7, r1
 8001154:	41bf      	sbcs	r7, r7
 8001156:	4598      	cmp	r8, r3
 8001158:	419b      	sbcs	r3, r3
 800115a:	4593      	cmp	fp, r2
 800115c:	4192      	sbcs	r2, r2
 800115e:	45a4      	cmp	ip, r4
 8001160:	41a4      	sbcs	r4, r4
 8001162:	425b      	negs	r3, r3
 8001164:	427f      	negs	r7, r7
 8001166:	431f      	orrs	r7, r3
 8001168:	0c36      	lsrs	r6, r6, #16
 800116a:	4252      	negs	r2, r2
 800116c:	4264      	negs	r4, r4
 800116e:	19bf      	adds	r7, r7, r6
 8001170:	4322      	orrs	r2, r4
 8001172:	18bf      	adds	r7, r7, r2
 8001174:	4662      	mov	r2, ip
 8001176:	1838      	adds	r0, r7, r0
 8001178:	0243      	lsls	r3, r0, #9
 800117a:	0dd2      	lsrs	r2, r2, #23
 800117c:	9903      	ldr	r1, [sp, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	026a      	lsls	r2, r5, #9
 8001182:	430a      	orrs	r2, r1
 8001184:	1e50      	subs	r0, r2, #1
 8001186:	4182      	sbcs	r2, r0
 8001188:	4661      	mov	r1, ip
 800118a:	0ded      	lsrs	r5, r5, #23
 800118c:	432a      	orrs	r2, r5
 800118e:	024e      	lsls	r6, r1, #9
 8001190:	4332      	orrs	r2, r6
 8001192:	01d9      	lsls	r1, r3, #7
 8001194:	d400      	bmi.n	8001198 <__aeabi_dmul+0x31c>
 8001196:	e0b3      	b.n	8001300 <__aeabi_dmul+0x484>
 8001198:	2601      	movs	r6, #1
 800119a:	0850      	lsrs	r0, r2, #1
 800119c:	4032      	ands	r2, r6
 800119e:	4302      	orrs	r2, r0
 80011a0:	07de      	lsls	r6, r3, #31
 80011a2:	4332      	orrs	r2, r6
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	4c22      	ldr	r4, [pc, #136]	; (8001230 <__aeabi_dmul+0x3b4>)
 80011a8:	4454      	add	r4, sl
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	dd62      	ble.n	8001274 <__aeabi_dmul+0x3f8>
 80011ae:	0751      	lsls	r1, r2, #29
 80011b0:	d009      	beq.n	80011c6 <__aeabi_dmul+0x34a>
 80011b2:	200f      	movs	r0, #15
 80011b4:	4010      	ands	r0, r2
 80011b6:	2804      	cmp	r0, #4
 80011b8:	d005      	beq.n	80011c6 <__aeabi_dmul+0x34a>
 80011ba:	1d10      	adds	r0, r2, #4
 80011bc:	4290      	cmp	r0, r2
 80011be:	4192      	sbcs	r2, r2
 80011c0:	4252      	negs	r2, r2
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	0002      	movs	r2, r0
 80011c6:	01d9      	lsls	r1, r3, #7
 80011c8:	d504      	bpl.n	80011d4 <__aeabi_dmul+0x358>
 80011ca:	2480      	movs	r4, #128	; 0x80
 80011cc:	4819      	ldr	r0, [pc, #100]	; (8001234 <__aeabi_dmul+0x3b8>)
 80011ce:	00e4      	lsls	r4, r4, #3
 80011d0:	4003      	ands	r3, r0
 80011d2:	4454      	add	r4, sl
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <__aeabi_dmul+0x3bc>)
 80011d6:	4284      	cmp	r4, r0
 80011d8:	dd00      	ble.n	80011dc <__aeabi_dmul+0x360>
 80011da:	e727      	b.n	800102c <__aeabi_dmul+0x1b0>
 80011dc:	075e      	lsls	r6, r3, #29
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	08d2      	lsrs	r2, r2, #3
 80011e2:	0b1f      	lsrs	r7, r3, #12
 80011e4:	0563      	lsls	r3, r4, #21
 80011e6:	4316      	orrs	r6, r2
 80011e8:	0d5b      	lsrs	r3, r3, #21
 80011ea:	e6b2      	b.n	8000f52 <__aeabi_dmul+0xd6>
 80011ec:	2300      	movs	r3, #0
 80011ee:	4699      	mov	r9, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	2704      	movs	r7, #4
 80011f4:	2600      	movs	r6, #0
 80011f6:	469b      	mov	fp, r3
 80011f8:	e664      	b.n	8000ec4 <__aeabi_dmul+0x48>
 80011fa:	2303      	movs	r3, #3
 80011fc:	9701      	str	r7, [sp, #4]
 80011fe:	4681      	mov	r9, r0
 8001200:	270c      	movs	r7, #12
 8001202:	469b      	mov	fp, r3
 8001204:	e65e      	b.n	8000ec4 <__aeabi_dmul+0x48>
 8001206:	2201      	movs	r2, #1
 8001208:	2001      	movs	r0, #1
 800120a:	4317      	orrs	r7, r2
 800120c:	2200      	movs	r2, #0
 800120e:	e676      	b.n	8000efe <__aeabi_dmul+0x82>
 8001210:	2303      	movs	r3, #3
 8001212:	2003      	movs	r0, #3
 8001214:	431f      	orrs	r7, r3
 8001216:	4643      	mov	r3, r8
 8001218:	e671      	b.n	8000efe <__aeabi_dmul+0x82>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	000007ff 	.word	0x000007ff
 8001220:	fffffc01 	.word	0xfffffc01
 8001224:	08004624 	.word	0x08004624
 8001228:	800fffff 	.word	0x800fffff
 800122c:	fffffc0d 	.word	0xfffffc0d
 8001230:	000003ff 	.word	0x000003ff
 8001234:	feffffff 	.word	0xfeffffff
 8001238:	000007fe 	.word	0x000007fe
 800123c:	2300      	movs	r3, #0
 800123e:	2780      	movs	r7, #128	; 0x80
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	033f      	lsls	r7, r7, #12
 8001244:	2600      	movs	r6, #0
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <__aeabi_dmul+0x4d8>)
 8001248:	e683      	b.n	8000f52 <__aeabi_dmul+0xd6>
 800124a:	9b01      	ldr	r3, [sp, #4]
 800124c:	0032      	movs	r2, r6
 800124e:	46a4      	mov	ip, r4
 8001250:	4658      	mov	r0, fp
 8001252:	e670      	b.n	8000f36 <__aeabi_dmul+0xba>
 8001254:	46ac      	mov	ip, r5
 8001256:	e66e      	b.n	8000f36 <__aeabi_dmul+0xba>
 8001258:	2780      	movs	r7, #128	; 0x80
 800125a:	9901      	ldr	r1, [sp, #4]
 800125c:	033f      	lsls	r7, r7, #12
 800125e:	4239      	tst	r1, r7
 8001260:	d02d      	beq.n	80012be <__aeabi_dmul+0x442>
 8001262:	423b      	tst	r3, r7
 8001264:	d12b      	bne.n	80012be <__aeabi_dmul+0x442>
 8001266:	431f      	orrs	r7, r3
 8001268:	033f      	lsls	r7, r7, #12
 800126a:	0b3f      	lsrs	r7, r7, #12
 800126c:	9500      	str	r5, [sp, #0]
 800126e:	0016      	movs	r6, r2
 8001270:	4b38      	ldr	r3, [pc, #224]	; (8001354 <__aeabi_dmul+0x4d8>)
 8001272:	e66e      	b.n	8000f52 <__aeabi_dmul+0xd6>
 8001274:	2501      	movs	r5, #1
 8001276:	1b2d      	subs	r5, r5, r4
 8001278:	2d38      	cmp	r5, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dmul+0x402>
 800127c:	e666      	b.n	8000f4c <__aeabi_dmul+0xd0>
 800127e:	2d1f      	cmp	r5, #31
 8001280:	dc40      	bgt.n	8001304 <__aeabi_dmul+0x488>
 8001282:	4835      	ldr	r0, [pc, #212]	; (8001358 <__aeabi_dmul+0x4dc>)
 8001284:	001c      	movs	r4, r3
 8001286:	4450      	add	r0, sl
 8001288:	0016      	movs	r6, r2
 800128a:	4082      	lsls	r2, r0
 800128c:	4084      	lsls	r4, r0
 800128e:	40ee      	lsrs	r6, r5
 8001290:	1e50      	subs	r0, r2, #1
 8001292:	4182      	sbcs	r2, r0
 8001294:	4334      	orrs	r4, r6
 8001296:	4314      	orrs	r4, r2
 8001298:	40eb      	lsrs	r3, r5
 800129a:	0762      	lsls	r2, r4, #29
 800129c:	d009      	beq.n	80012b2 <__aeabi_dmul+0x436>
 800129e:	220f      	movs	r2, #15
 80012a0:	4022      	ands	r2, r4
 80012a2:	2a04      	cmp	r2, #4
 80012a4:	d005      	beq.n	80012b2 <__aeabi_dmul+0x436>
 80012a6:	0022      	movs	r2, r4
 80012a8:	1d14      	adds	r4, r2, #4
 80012aa:	4294      	cmp	r4, r2
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	4240      	negs	r0, r0
 80012b0:	181b      	adds	r3, r3, r0
 80012b2:	021a      	lsls	r2, r3, #8
 80012b4:	d53e      	bpl.n	8001334 <__aeabi_dmul+0x4b8>
 80012b6:	2301      	movs	r3, #1
 80012b8:	2700      	movs	r7, #0
 80012ba:	2600      	movs	r6, #0
 80012bc:	e649      	b.n	8000f52 <__aeabi_dmul+0xd6>
 80012be:	2780      	movs	r7, #128	; 0x80
 80012c0:	9b01      	ldr	r3, [sp, #4]
 80012c2:	033f      	lsls	r7, r7, #12
 80012c4:	431f      	orrs	r7, r3
 80012c6:	033f      	lsls	r7, r7, #12
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	9400      	str	r4, [sp, #0]
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <__aeabi_dmul+0x4d8>)
 80012ce:	e640      	b.n	8000f52 <__aeabi_dmul+0xd6>
 80012d0:	0003      	movs	r3, r0
 80012d2:	465a      	mov	r2, fp
 80012d4:	3b28      	subs	r3, #40	; 0x28
 80012d6:	409a      	lsls	r2, r3
 80012d8:	2600      	movs	r6, #0
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	e66d      	b.n	8000fba <__aeabi_dmul+0x13e>
 80012de:	4658      	mov	r0, fp
 80012e0:	f000 f878 	bl	80013d4 <__clzsi2>
 80012e4:	3020      	adds	r0, #32
 80012e6:	e657      	b.n	8000f98 <__aeabi_dmul+0x11c>
 80012e8:	0003      	movs	r3, r0
 80012ea:	4652      	mov	r2, sl
 80012ec:	3b28      	subs	r3, #40	; 0x28
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	2200      	movs	r2, #0
 80012f4:	e693      	b.n	800101e <__aeabi_dmul+0x1a2>
 80012f6:	4650      	mov	r0, sl
 80012f8:	f000 f86c 	bl	80013d4 <__clzsi2>
 80012fc:	3020      	adds	r0, #32
 80012fe:	e67b      	b.n	8000ff8 <__aeabi_dmul+0x17c>
 8001300:	46ca      	mov	sl, r9
 8001302:	e750      	b.n	80011a6 <__aeabi_dmul+0x32a>
 8001304:	201f      	movs	r0, #31
 8001306:	001e      	movs	r6, r3
 8001308:	4240      	negs	r0, r0
 800130a:	1b04      	subs	r4, r0, r4
 800130c:	40e6      	lsrs	r6, r4
 800130e:	2d20      	cmp	r5, #32
 8001310:	d003      	beq.n	800131a <__aeabi_dmul+0x49e>
 8001312:	4c12      	ldr	r4, [pc, #72]	; (800135c <__aeabi_dmul+0x4e0>)
 8001314:	4454      	add	r4, sl
 8001316:	40a3      	lsls	r3, r4
 8001318:	431a      	orrs	r2, r3
 800131a:	1e50      	subs	r0, r2, #1
 800131c:	4182      	sbcs	r2, r0
 800131e:	4332      	orrs	r2, r6
 8001320:	2607      	movs	r6, #7
 8001322:	2700      	movs	r7, #0
 8001324:	4016      	ands	r6, r2
 8001326:	d009      	beq.n	800133c <__aeabi_dmul+0x4c0>
 8001328:	200f      	movs	r0, #15
 800132a:	2300      	movs	r3, #0
 800132c:	4010      	ands	r0, r2
 800132e:	0014      	movs	r4, r2
 8001330:	2804      	cmp	r0, #4
 8001332:	d1b9      	bne.n	80012a8 <__aeabi_dmul+0x42c>
 8001334:	0022      	movs	r2, r4
 8001336:	075e      	lsls	r6, r3, #29
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	0b1f      	lsrs	r7, r3, #12
 800133c:	08d2      	lsrs	r2, r2, #3
 800133e:	4316      	orrs	r6, r2
 8001340:	2300      	movs	r3, #0
 8001342:	e606      	b.n	8000f52 <__aeabi_dmul+0xd6>
 8001344:	2780      	movs	r7, #128	; 0x80
 8001346:	033f      	lsls	r7, r7, #12
 8001348:	431f      	orrs	r7, r3
 800134a:	033f      	lsls	r7, r7, #12
 800134c:	0b3f      	lsrs	r7, r7, #12
 800134e:	0016      	movs	r6, r2
 8001350:	4b00      	ldr	r3, [pc, #0]	; (8001354 <__aeabi_dmul+0x4d8>)
 8001352:	e5fe      	b.n	8000f52 <__aeabi_dmul+0xd6>
 8001354:	000007ff 	.word	0x000007ff
 8001358:	0000041e 	.word	0x0000041e
 800135c:	0000043e 	.word	0x0000043e

08001360 <__aeabi_i2d>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	2800      	cmp	r0, #0
 8001364:	d02d      	beq.n	80013c2 <__aeabi_i2d+0x62>
 8001366:	17c3      	asrs	r3, r0, #31
 8001368:	18c5      	adds	r5, r0, r3
 800136a:	405d      	eors	r5, r3
 800136c:	0fc4      	lsrs	r4, r0, #31
 800136e:	0028      	movs	r0, r5
 8001370:	f000 f830 	bl	80013d4 <__clzsi2>
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <__aeabi_i2d+0x6c>)
 8001376:	1a1b      	subs	r3, r3, r0
 8001378:	055b      	lsls	r3, r3, #21
 800137a:	0d5b      	lsrs	r3, r3, #21
 800137c:	280a      	cmp	r0, #10
 800137e:	dd15      	ble.n	80013ac <__aeabi_i2d+0x4c>
 8001380:	380b      	subs	r0, #11
 8001382:	4085      	lsls	r5, r0
 8001384:	2200      	movs	r2, #0
 8001386:	032d      	lsls	r5, r5, #12
 8001388:	0b2d      	lsrs	r5, r5, #12
 800138a:	2100      	movs	r1, #0
 800138c:	0010      	movs	r0, r2
 800138e:	032d      	lsls	r5, r5, #12
 8001390:	0d0a      	lsrs	r2, r1, #20
 8001392:	0b2d      	lsrs	r5, r5, #12
 8001394:	0512      	lsls	r2, r2, #20
 8001396:	432a      	orrs	r2, r5
 8001398:	4d0d      	ldr	r5, [pc, #52]	; (80013d0 <__aeabi_i2d+0x70>)
 800139a:	051b      	lsls	r3, r3, #20
 800139c:	402a      	ands	r2, r5
 800139e:	4313      	orrs	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	07e4      	lsls	r4, r4, #31
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	4323      	orrs	r3, r4
 80013a8:	0019      	movs	r1, r3
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	0002      	movs	r2, r0
 80013ae:	0029      	movs	r1, r5
 80013b0:	3215      	adds	r2, #21
 80013b2:	4091      	lsls	r1, r2
 80013b4:	000a      	movs	r2, r1
 80013b6:	210b      	movs	r1, #11
 80013b8:	1a08      	subs	r0, r1, r0
 80013ba:	40c5      	lsrs	r5, r0
 80013bc:	032d      	lsls	r5, r5, #12
 80013be:	0b2d      	lsrs	r5, r5, #12
 80013c0:	e7e3      	b.n	800138a <__aeabi_i2d+0x2a>
 80013c2:	2400      	movs	r4, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	2500      	movs	r5, #0
 80013c8:	2200      	movs	r2, #0
 80013ca:	e7de      	b.n	800138a <__aeabi_i2d+0x2a>
 80013cc:	0000041e 	.word	0x0000041e
 80013d0:	800fffff 	.word	0x800fffff

080013d4 <__clzsi2>:
 80013d4:	211c      	movs	r1, #28
 80013d6:	2301      	movs	r3, #1
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	4298      	cmp	r0, r3
 80013dc:	d301      	bcc.n	80013e2 <__clzsi2+0xe>
 80013de:	0c00      	lsrs	r0, r0, #16
 80013e0:	3910      	subs	r1, #16
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	4298      	cmp	r0, r3
 80013e6:	d301      	bcc.n	80013ec <__clzsi2+0x18>
 80013e8:	0a00      	lsrs	r0, r0, #8
 80013ea:	3908      	subs	r1, #8
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	4298      	cmp	r0, r3
 80013f0:	d301      	bcc.n	80013f6 <__clzsi2+0x22>
 80013f2:	0900      	lsrs	r0, r0, #4
 80013f4:	3904      	subs	r1, #4
 80013f6:	a202      	add	r2, pc, #8	; (adr r2, 8001400 <__clzsi2+0x2c>)
 80013f8:	5c10      	ldrb	r0, [r2, r0]
 80013fa:	1840      	adds	r0, r0, r1
 80013fc:	4770      	bx	lr
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	02020304 	.word	0x02020304
 8001404:	01010101 	.word	0x01010101
	...

08001410 <__clzdi2>:
 8001410:	b510      	push	{r4, lr}
 8001412:	2900      	cmp	r1, #0
 8001414:	d103      	bne.n	800141e <__clzdi2+0xe>
 8001416:	f7ff ffdd 	bl	80013d4 <__clzsi2>
 800141a:	3020      	adds	r0, #32
 800141c:	e002      	b.n	8001424 <__clzdi2+0x14>
 800141e:	1c08      	adds	r0, r1, #0
 8001420:	f7ff ffd8 	bl	80013d4 <__clzsi2>
 8001424:	bd10      	pop	{r4, pc}
 8001426:	46c0      	nop			; (mov r8, r8)

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142c:	f000 fe58 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001430:	f000 f87a 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001434:	f000 f9ce 	bl	80017d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001438:	f000 f99c 	bl	8001774 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800143c:	f000 f8e6 	bl	800160c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001440:	f000 f942 	bl	80016c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MY_Period_Init(time_irri);
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <main+0xcc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f000 fa49 	bl	80018e0 <MY_Period_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <main+0xd0>)
 8001450:	2200      	movs	r2, #0
 8001452:	2101      	movs	r1, #1
 8001454:	0018      	movs	r0, r3
 8001456:	f001 f8fb 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	0018      	movs	r0, r3
 8001464:	f001 f8f4 	bl	8002650 <HAL_GPIO_WritePin>
  MX_TIM2_Init_stade_1();
 8001468:	f000 fa72 	bl	8001950 <MX_TIM2_Init_stade_1>
  TIM2->SR &= ~TIM_SR_UIF;						//!< clear update interrupt Flag
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	611a      	str	r2, [r3, #16]
  TIM3->SR &= ~TIM_SR_UIF;						//!< clear update interrupt Flag
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <main+0xd4>)
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <main+0xd4>)
 8001482:	2101      	movs	r1, #1
 8001484:	438a      	bics	r2, r1
 8001486:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <main+0xd8>)
 800148a:	0018      	movs	r0, r3
 800148c:	f002 f878 	bl	8003580 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <main+0xdc>)
 8001492:	0018      	movs	r0, r3
 8001494:	f002 f874 	bl	8003580 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,SET);
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <main+0xd0>)
 800149a:	2201      	movs	r2, #1
 800149c:	2101      	movs	r1, #1
 800149e:	0018      	movs	r0, r3
 80014a0:	f001 f8d6 	bl	8002650 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  seuil_l = seuil[a][0];
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <main+0xe0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <main+0xe4>)
 80014aa:	00d2      	lsls	r2, r2, #3
 80014ac:	58d2      	ldr	r2, [r2, r3]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <main+0xe8>)
 80014b0:	601a      	str	r2, [r3, #0]
  seuil_h = seuil[a][1];
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <main+0xe0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <main+0xe4>)
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	3304      	adds	r3, #4
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <main+0xec>)
 80014c2:	601a      	str	r2, [r3, #0]

//  Humitide_begin = 90;                           // testing
  Humitide_begin = Humitide_sol[i];
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <main+0xf0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <main+0xf4>)
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	58d2      	ldr	r2, [r2, r3]
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <main+0xf8>)
 80014d0:	601a      	str	r2, [r3, #0]
  DH = Humitide_begin - seuil_h;				 // 30
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <main+0xf8>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <main+0xec>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1ad2      	subs	r2, r2, r3
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <main+0xfc>)
 80014de:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	irrigation(seuil_l, seuil_h);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <main+0xe8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <main+0xec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	0010      	movs	r0, r2
 80014ec:	f000 fb4a 	bl	8001b84 <irrigation>
 80014f0:	e7f6      	b.n	80014e0 <main+0xb8>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000130 	.word	0x20000130
 80014f8:	50000800 	.word	0x50000800
 80014fc:	40000400 	.word	0x40000400
 8001500:	200001d0 	.word	0x200001d0
 8001504:	2000017c 	.word	0x2000017c
 8001508:	20000168 	.word	0x20000168
 800150c:	20000118 	.word	0x20000118
 8001510:	200001cc 	.word	0x200001cc
 8001514:	200001bc 	.word	0x200001bc
 8001518:	20000160 	.word	0x20000160
 800151c:	20000000 	.word	0x20000000
 8001520:	20000174 	.word	0x20000174
 8001524:	200001b8 	.word	0x200001b8

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b09f      	sub	sp, #124	; 0x7c
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	2440      	movs	r4, #64	; 0x40
 8001530:	193b      	adds	r3, r7, r4
 8001532:	0018      	movs	r0, r3
 8001534:	2338      	movs	r3, #56	; 0x38
 8001536:	001a      	movs	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	f003 f85f 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153e:	232c      	movs	r3, #44	; 0x2c
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	0018      	movs	r0, r3
 8001544:	2314      	movs	r3, #20
 8001546:	001a      	movs	r2, r3
 8001548:	2100      	movs	r1, #0
 800154a:	f003 f857 	bl	80045fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	0018      	movs	r0, r3
 8001552:	2328      	movs	r3, #40	; 0x28
 8001554:	001a      	movs	r2, r3
 8001556:	2100      	movs	r1, #0
 8001558:	f003 f850 	bl	80045fc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <SystemClock_Config+0xdc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a29      	ldr	r2, [pc, #164]	; (8001608 <SystemClock_Config+0xe0>)
 8001562:	401a      	ands	r2, r3
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <SystemClock_Config+0xdc>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0109      	lsls	r1, r1, #4
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156e:	0021      	movs	r1, r4
 8001570:	187b      	adds	r3, r7, r1
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001576:	187b      	adds	r3, r7, r1
 8001578:	2201      	movs	r2, #1
 800157a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157c:	187b      	adds	r3, r7, r1
 800157e:	2210      	movs	r2, #16
 8001580:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2202      	movs	r2, #2
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	02d2      	lsls	r2, r2, #11
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	03d2      	lsls	r2, r2, #15
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 f899 	bl	80026d8 <HAL_RCC_OscConfig>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80015aa:	f000 fc1f 	bl	8001dec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	220f      	movs	r2, #15
 80015b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2203      	movs	r2, #3
 80015ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2101      	movs	r1, #1
 80015d2:	0018      	movs	r0, r3
 80015d4:	f001 fc50 	bl	8002e78 <HAL_RCC_ClockConfig>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80015dc:	f000 fc06 	bl	8001dec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 fe26 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015f8:	f000 fbf8 	bl	8001dec <Error_Handler>
  }
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b01f      	add	sp, #124	; 0x7c
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	40007000 	.word	0x40007000
 8001608:	ffffe7ff 	.word	0xffffe7ff

0800160c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	2308      	movs	r3, #8
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	0018      	movs	r0, r3
 8001618:	2310      	movs	r3, #16
 800161a:	001a      	movs	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	f002 ffed 	bl	80045fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	003b      	movs	r3, r7
 8001624:	0018      	movs	r0, r3
 8001626:	2308      	movs	r3, #8
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f002 ffe6 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_TIM2_Init+0xb4>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	05d2      	lsls	r2, r2, #23
 8001636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_TIM2_Init+0xb4>)
 800163a:	22fa      	movs	r2, #250	; 0xfa
 800163c:	01d2      	lsls	r2, r2, #7
 800163e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_TIM2_Init+0xb4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000*p_stade_4;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_TIM2_Init+0xb8>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	0013      	movs	r3, r2
 800164c:	015b      	lsls	r3, r3, #5
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	189b      	adds	r3, r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	001a      	movs	r2, r3
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0xb4>)
 800165a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0xb4>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_TIM2_Init+0xb4>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0xb4>)
 800166a:	0018      	movs	r0, r3
 800166c:	f001 ff5c 	bl	8003528 <HAL_TIM_Base_Init>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001674:	f000 fbba 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001678:	2108      	movs	r1, #8
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	0152      	lsls	r2, r2, #5
 8001680:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001682:	187a      	adds	r2, r7, r1
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_TIM2_Init+0xb4>)
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f002 f8a5 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001692:	f000 fbab 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	003b      	movs	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	003b      	movs	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a2:	003a      	movs	r2, r7
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_TIM2_Init+0xb4>)
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f002 fa73 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80016b2:	f000 fb9b 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b006      	add	sp, #24
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	200001d0 	.word	0x200001d0
 80016c4:	20000178 	.word	0x20000178

080016c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	2308      	movs	r3, #8
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	0018      	movs	r0, r3
 80016d4:	2310      	movs	r3, #16
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f002 ff8f 	bl	80045fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	003b      	movs	r3, r7
 80016e0:	0018      	movs	r0, r3
 80016e2:	2308      	movs	r3, #8
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f002 ff88 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_TIM3_Init+0xa0>)
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <MX_TIM3_Init+0xa4>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_TIM3_Init+0xa0>)
 80016f4:	22fa      	movs	r2, #250	; 0xfa
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_TIM3_Init+0xa0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM3_Init+0xa0>)
 8001702:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <MX_TIM3_Init+0xa8>)
 8001704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_TIM3_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_TIM3_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_TIM3_Init+0xa0>)
 8001714:	0018      	movs	r0, r3
 8001716:	f001 ff07 	bl	8003528 <HAL_TIM_Base_Init>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800171e:	f000 fb65 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	2108      	movs	r1, #8
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	0152      	lsls	r2, r2, #5
 800172a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172c:	187a      	adds	r2, r7, r1
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_TIM3_Init+0xa0>)
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f002 f850 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800173c:	f000 fb56 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	003b      	movs	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	003b      	movs	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174c:	003a      	movs	r2, r7
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_TIM3_Init+0xa0>)
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f002 fa1e 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800175c:	f000 fb46 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b006      	add	sp, #24
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000017c 	.word	0x2000017c
 800176c:	40000400 	.word	0x40000400
 8001770:	00007530 	.word	0x00007530

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_USART2_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001780:	22e1      	movs	r2, #225	; 0xe1
 8001782:	0252      	lsls	r2, r2, #9
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017b8:	0018      	movs	r0, r3
 80017ba:	f002 fa2f 	bl	8003c1c <HAL_UART_Init>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f000 fb13 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000020c 	.word	0x2000020c
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	240c      	movs	r4, #12
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	0018      	movs	r0, r3
 80017e0:	2314      	movs	r3, #20
 80017e2:	001a      	movs	r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	f002 ff09 	bl	80045fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_GPIO_Init+0x100>)
 80017ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <MX_GPIO_Init+0x100>)
 80017f0:	2104      	movs	r1, #4
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <MX_GPIO_Init+0x100>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	2204      	movs	r2, #4
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <MX_GPIO_Init+0x100>)
 8001804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <MX_GPIO_Init+0x100>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	430a      	orrs	r2, r1
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <MX_GPIO_Init+0x100>)
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	4013      	ands	r3, r2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <MX_GPIO_Init+0x100>)
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <MX_GPIO_Init+0x100>)
 8001820:	2101      	movs	r1, #1
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_GPIO_Init+0x100>)
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <MX_GPIO_Init+0x104>)
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	0018      	movs	r0, r3
 800183a:	f000 ff09 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800183e:	23a0      	movs	r3, #160	; 0xa0
 8001840:	05db      	lsls	r3, r3, #23
 8001842:	2200      	movs	r2, #0
 8001844:	2120      	movs	r1, #32
 8001846:	0018      	movs	r0, r3
 8001848:	f000 ff02 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	0192      	lsls	r2, r2, #6
 8001852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001854:	193b      	adds	r3, r7, r4
 8001856:	4a21      	ldr	r2, [pc, #132]	; (80018dc <MX_GPIO_Init+0x108>)
 8001858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001860:	193b      	adds	r3, r7, r4
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <MX_GPIO_Init+0x104>)
 8001864:	0019      	movs	r1, r3
 8001866:	0010      	movs	r0, r2
 8001868:	f000 fd74 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186c:	0021      	movs	r1, r4
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2201      	movs	r2, #1
 8001878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	000c      	movs	r4, r1
 8001888:	187b      	adds	r3, r7, r1
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_GPIO_Init+0x104>)
 800188c:	0019      	movs	r1, r3
 800188e:	0010      	movs	r0, r2
 8001890:	f000 fd60 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001894:	0021      	movs	r1, r4
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2220      	movs	r2, #32
 800189a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2201      	movs	r2, #1
 80018a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ae:	187a      	adds	r2, r7, r1
 80018b0:	23a0      	movs	r3, #160	; 0xa0
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	0011      	movs	r1, r2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 fd4c 	bl	8002354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2007      	movs	r0, #7
 80018c2:	f000 fd15 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f000 fd27 	bl	800231a <HAL_NVIC_EnableIRQ>

}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b009      	add	sp, #36	; 0x24
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	50000800 	.word	0x50000800
 80018dc:	10210000 	.word	0x10210000

080018e0 <MY_Period_Init>:

/* USER CODE BEGIN 4 */
static void MY_Period_Init(int time_irrigation)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	p_stade_1 = (time_irrigation*60*4)/(10*3);			//40s, 3 samples
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0013      	movs	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	211e      	movs	r1, #30
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fc91 	bl	800021c <__divsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	001a      	movs	r2, r3
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MY_Period_Init+0x60>)
 8001900:	601a      	str	r2, [r3, #0]
	p_stade_2 = (time_irrigation*60*3)/(10*4);			//22.5s, 4 samples
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	22b4      	movs	r2, #180	; 0xb4
 8001906:	4353      	muls	r3, r2
 8001908:	2128      	movs	r1, #40	; 0x28
 800190a:	0018      	movs	r0, r3
 800190c:	f7fe fc86 	bl	800021c <__divsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MY_Period_Init+0x64>)
 8001916:	601a      	str	r2, [r3, #0]
	p_stade_3 = (time_irrigation*60*2)/(10*5);			//12s, 5 samples
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	0013      	movs	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	2132      	movs	r1, #50	; 0x32
 8001924:	0018      	movs	r0, r3
 8001926:	f7fe fc79 	bl	800021c <__divsi3>
 800192a:	0003      	movs	r3, r0
 800192c:	001a      	movs	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MY_Period_Init+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
	p_stade_4 = 2;										//2s
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MY_Period_Init+0x6c>)
 8001934:	2202      	movs	r2, #2
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200001c0 	.word	0x200001c0
 8001944:	20000170 	.word	0x20000170
 8001948:	200001c8 	.word	0x200001c8
 800194c:	20000178 	.word	0x20000178

08001950 <MX_TIM2_Init_stade_1>:


static void MX_TIM2_Init_stade_1(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	2308      	movs	r3, #8
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	0018      	movs	r0, r3
 800195c:	2310      	movs	r3, #16
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f002 fe4b 	bl	80045fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	003b      	movs	r3, r7
 8001968:	0018      	movs	r0, r3
 800196a:	2308      	movs	r3, #8
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f002 fe44 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	05d2      	lsls	r2, r2, #23
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 800197e:	22fa      	movs	r2, #250	; 0xfa
 8001980:	01d2      	lsls	r2, r2, #7
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000*p_stade_1;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_TIM2_Init_stade_1+0xb8>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	0013      	movs	r3, r2
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	189b      	adds	r3, r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	001a      	movs	r2, r3
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 800199e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 fdba 	bl	8003528 <HAL_TIM_Base_Init>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init_stade_1+0x6c>
  {
    Error_Handler();
 80019b8:	f000 fa18 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	2108      	movs	r1, #8
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	0152      	lsls	r2, r2, #5
 80019c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c6:	187a      	adds	r2, r7, r1
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f001 ff03 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init_stade_1+0x8a>
  {
    Error_Handler();
 80019d6:	f000 fa09 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	003b      	movs	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	003b      	movs	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e6:	003a      	movs	r2, r7
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_TIM2_Init_stade_1+0xb4>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f002 f8d1 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init_stade_1+0xaa>
  {
    Error_Handler();
 80019f6:	f000 f9f9 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b006      	add	sp, #24
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	200001d0 	.word	0x200001d0
 8001a08:	200001c0 	.word	0x200001c0

08001a0c <MX_TIM2_Init_stade_2>:

static void MX_TIM2_Init_stade_2(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	2308      	movs	r3, #8
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	0018      	movs	r0, r3
 8001a18:	2310      	movs	r3, #16
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f002 fded 	bl	80045fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	003b      	movs	r3, r7
 8001a24:	0018      	movs	r0, r3
 8001a26:	2308      	movs	r3, #8
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f002 fde6 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	05d2      	lsls	r2, r2, #23
 8001a36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a3a:	22fa      	movs	r2, #250	; 0xfa
 8001a3c:	01d2      	lsls	r2, r2, #7
 8001a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000*p_stade_2;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_TIM2_Init_stade_2+0xb8>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	015b      	lsls	r3, r3, #5
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	001a      	movs	r2, r3
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f001 fd5c 	bl	8003528 <HAL_TIM_Base_Init>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init_stade_2+0x6c>
  {
    Error_Handler();
 8001a74:	f000 f9ba 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	2108      	movs	r1, #8
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	0152      	lsls	r2, r2, #5
 8001a80:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a82:	187a      	adds	r2, r7, r1
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 fea5 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init_stade_2+0x8a>
  {
    Error_Handler();
 8001a92:	f000 f9ab 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	003b      	movs	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa2:	003a      	movs	r2, r7
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_TIM2_Init_stade_2+0xb4>)
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f002 f873 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init_stade_2+0xaa>
  {
    Error_Handler();
 8001ab2:	f000 f99b 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b006      	add	sp, #24
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	200001d0 	.word	0x200001d0
 8001ac4:	20000170 	.word	0x20000170

08001ac8 <MX_TIM2_Init_stade_3>:

static void MX_TIM2_Init_stade_3(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f002 fd8f 	bl	80045fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	003b      	movs	r3, r7
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f002 fd88 	bl	80045fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	05d2      	lsls	r2, r2, #23
 8001af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001af6:	22fa      	movs	r2, #250	; 0xfa
 8001af8:	01d2      	lsls	r2, r2, #7
 8001afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000*p_stade_3;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM2_Init_stade_3+0xb8>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	0013      	movs	r3, r2
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	189b      	adds	r3, r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	001a      	movs	r2, r3
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f001 fcfe 	bl	8003528 <HAL_TIM_Base_Init>
 8001b2c:	1e03      	subs	r3, r0, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init_stade_3+0x6c>
  {
    Error_Handler();
 8001b30:	f000 f95c 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	2108      	movs	r1, #8
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	0152      	lsls	r2, r2, #5
 8001b3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3e:	187a      	adds	r2, r7, r1
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f001 fe47 	bl	80037d8 <HAL_TIM_ConfigClockSource>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init_stade_3+0x8a>
  {
    Error_Handler();
 8001b4e:	f000 f94d 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	003b      	movs	r3, r7
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	003b      	movs	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	003a      	movs	r2, r7
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_TIM2_Init_stade_3+0xb4>)
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f002 f815 	bl	8003b94 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init_stade_3+0xaa>
  {
    Error_Handler();
 8001b6e:	f000 f93d 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b006      	add	sp, #24
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	200001d0 	.word	0x200001d0
 8001b80:	200001c8 	.word	0x200001c8

08001b84 <irrigation>:
 *
 *
  */

void irrigation(int seuil_low, int seuil_high)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	if (min == time_irri+1)							//wait 1 minute before starting another loop
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <irrigation+0x17c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <irrigation+0x180>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d123      	bne.n	8001be4 <irrigation+0x60>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,SET);	//LED on
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <irrigation+0x184>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fd54 	bl	8002650 <HAL_GPIO_WritePin>
		Update_Period(&p_stade_1, &p_stade_2, &p_stade_3, &p_stade_4);	//update sampling period
 8001ba8:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <irrigation+0x188>)
 8001baa:	4a59      	ldr	r2, [pc, #356]	; (8001d10 <irrigation+0x18c>)
 8001bac:	4959      	ldr	r1, [pc, #356]	; (8001d14 <irrigation+0x190>)
 8001bae:	485a      	ldr	r0, [pc, #360]	; (8001d18 <irrigation+0x194>)
 8001bb0:	f000 f8c6 	bl	8001d40 <Update_Period>
		/* prepare for another loop */
		Humitide_fin_stade1 = 0;
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <irrigation+0x198>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
		min = 0;
 8001bba:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <irrigation+0x180>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
		/*	restart to read data from sensor */
		HAL_TIM_Base_Stop_IT(&htim2);
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <irrigation+0x19c>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f001 fcfe 	bl	80035c4 <HAL_TIM_Base_Stop_IT>
		MX_TIM2_Init_stade_1();
 8001bc8:	f7ff fec2 	bl	8001950 <MX_TIM2_Init_stade_1>
		TIM2->SR &= ~TIM_SR_UIF;
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	05db      	lsls	r3, r3, #23
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim2);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <irrigation+0x19c>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f001 fcce 	bl	8003580 <HAL_TIM_Base_Start_IT>
	}

	/* read a new data from the sensor */
 	if (flag == 0)
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <irrigation+0x1a0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d000      	beq.n	8001bee <irrigation+0x6a>
 8001bec:	e084      	b.n	8001cf8 <irrigation+0x174>
	{
		flag = 1;
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <irrigation+0x1a0>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
//		{
//			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
//			time_irri = min;
//		}

		if (i == sample_1)							//swap to stade2
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <irrigation+0x1a4>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <irrigation+0x1a8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d119      	bne.n	8001c34 <irrigation+0xb0>
		{
			Humitide_fin_stade1 = Humitide_sol[i];
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <irrigation+0x1a4>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <irrigation+0x1ac>)
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	58d2      	ldr	r2, [r2, r3]
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <irrigation+0x198>)
 8001c0c:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <irrigation+0x19c>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f001 fcd7 	bl	80035c4 <HAL_TIM_Base_Stop_IT>
			MX_TIM2_Init_stade_2();
 8001c16:	f7ff fef9 	bl	8001a0c <MX_TIM2_Init_stade_2>
			TIM2->SR &= ~TIM_SR_UIF;
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	05db      	lsls	r3, r3, #23
 8001c24:	2101      	movs	r1, #1
 8001c26:	438a      	bics	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <irrigation+0x19c>)
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 fca7 	bl	8003580 <HAL_TIM_Base_Start_IT>
			Error_Handler();
		}

	}

}
 8001c32:	e061      	b.n	8001cf8 <irrigation+0x174>
		else if (i == sample_1+sample_2)			//swap to stade3
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <irrigation+0x1a8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <irrigation+0x1b0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	18d2      	adds	r2, r2, r3
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <irrigation+0x1a4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d112      	bne.n	8001c6c <irrigation+0xe8>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <irrigation+0x19c>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f001 fcbb 	bl	80035c4 <HAL_TIM_Base_Stop_IT>
			MX_TIM2_Init_stade_3();
 8001c4e:	f7ff ff3b 	bl	8001ac8 <MX_TIM2_Init_stade_3>
			TIM2->SR &= ~TIM_SR_UIF;
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	438a      	bics	r2, r1
 8001c60:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <irrigation+0x19c>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f001 fc8b 	bl	8003580 <HAL_TIM_Base_Start_IT>
}
 8001c6a:	e045      	b.n	8001cf8 <irrigation+0x174>
		else if (i == sample_1+sample_2+sample_3 )	//swap to stade4
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <irrigation+0x1a8>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <irrigation+0x1b0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	18d2      	adds	r2, r2, r3
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <irrigation+0x1b4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	18d2      	adds	r2, r2, r3
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <irrigation+0x1a4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d112      	bne.n	8001caa <irrigation+0x126>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <irrigation+0x19c>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f001 fc9c 	bl	80035c4 <HAL_TIM_Base_Stop_IT>
			MX_TIM2_Init();
 8001c8c:	f7ff fcbe 	bl	800160c <MX_TIM2_Init>
			TIM2->SR &= ~TIM_SR_UIF;
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	05db      	lsls	r3, r3, #23
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	05db      	lsls	r3, r3, #23
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <irrigation+0x19c>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 fc6c 	bl	8003580 <HAL_TIM_Base_Start_IT>
}
 8001ca8:	e026      	b.n	8001cf8 <irrigation+0x174>
		else if (i >= sample_1+sample_2+sample_3 && Humitide_sol[i] <= seuil_h)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <irrigation+0x1a8>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <irrigation+0x1b0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <irrigation+0x1b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	18d2      	adds	r2, r2, r3
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <irrigation+0x1a4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dc18      	bgt.n	8001cf4 <irrigation+0x170>
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <irrigation+0x1a4>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <irrigation+0x1ac>)
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	58d2      	ldr	r2, [r2, r3]
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <irrigation+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dc0f      	bgt.n	8001cf4 <irrigation+0x170>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,RESET);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <irrigation+0x184>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f000 fcb8 	bl	8002650 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <irrigation+0x19c>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f001 fc6e 	bl	80035c4 <HAL_TIM_Base_Stop_IT>
			time_irri = min+1;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <irrigation+0x180>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <irrigation+0x17c>)
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	e001      	b.n	8001cf8 <irrigation+0x174>
			Error_Handler();
 8001cf4:	f000 f87a 	bl	8001dec <Error_Handler>
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000130 	.word	0x20000130
 8001d04:	2000016c 	.word	0x2000016c
 8001d08:	50000800 	.word	0x50000800
 8001d0c:	20000178 	.word	0x20000178
 8001d10:	200001c8 	.word	0x200001c8
 8001d14:	20000170 	.word	0x20000170
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	200001c4 	.word	0x200001c4
 8001d20:	200001d0 	.word	0x200001d0
 8001d24:	20000164 	.word	0x20000164
 8001d28:	20000160 	.word	0x20000160
 8001d2c:	20000134 	.word	0x20000134
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000138 	.word	0x20000138
 8001d38:	2000013c 	.word	0x2000013c
 8001d3c:	200001bc 	.word	0x200001bc

08001d40 <Update_Period>:

void Update_Period(int* stade1, int* stade2, int* stade3, int* stade4)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6178      	str	r0, [r7, #20]
 8001d48:	6139      	str	r1, [r7, #16]
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]

	if (Humitide_fin_stade1 > DH*0.4+seuil_h )
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <Update_Period+0x94>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fb04 	bl	8001360 <__aeabi_i2d>
 8001d58:	0004      	movs	r4, r0
 8001d5a:	000d      	movs	r5, r1
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <Update_Period+0x98>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fafd 	bl	8001360 <__aeabi_i2d>
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <Update_Period+0x9c>)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <Update_Period+0xa0>)
 8001d6a:	f7ff f887 	bl	8000e7c <__aeabi_dmul>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	000b      	movs	r3, r1
 8001d72:	603a      	str	r2, [r7, #0]
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <Update_Period+0xa4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff faf0 	bl	8001360 <__aeabi_i2d>
 8001d80:	0002      	movs	r2, r0
 8001d82:	000b      	movs	r3, r1
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f7fe fc54 	bl	8000634 <__aeabi_dadd>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	000b      	movs	r3, r1
 8001d90:	0020      	movs	r0, r4
 8001d92:	0029      	movs	r1, r5
 8001d94:	f7fe fb58 	bl	8000448 <__aeabi_dcmpgt>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d005      	beq.n	8001da8 <Update_Period+0x68>
	{
		*stade1 = *stade1 + 2;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1c9a      	adds	r2, r3, #2
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
		{
			sample_1 = 0;
		}
	}

}
 8001da6:	e011      	b.n	8001dcc <Update_Period+0x8c>
	else if (Humitide_fin_stade1 < seuil_h)
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <Update_Period+0x94>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <Update_Period+0xa4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	da0b      	bge.n	8001dcc <Update_Period+0x8c>
		sample_1--;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <Update_Period+0xa8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1e5a      	subs	r2, r3, #1
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <Update_Period+0xa8>)
 8001dbc:	601a      	str	r2, [r3, #0]
		if (sample_1 < 0)
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <Update_Period+0xa8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da02      	bge.n	8001dcc <Update_Period+0x8c>
			sample_1 = 0;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <Update_Period+0xa8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b006      	add	sp, #24
 8001dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd4:	200001c4 	.word	0x200001c4
 8001dd8:	200001b8 	.word	0x200001b8
 8001ddc:	9999999a 	.word	0x9999999a
 8001de0:	3fd99999 	.word	0x3fd99999
 8001de4:	200001bc 	.word	0x200001bc
 8001de8:	20000134 	.word	0x20000134

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_MspInit+0x24>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x24>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_MspInit+0x24>)
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_MspInit+0x24>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0549      	lsls	r1, r1, #21
 8001e12:	430a      	orrs	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d10e      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_TIM_Base_MspInit+0x60>)
 8001e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_TIM_Base_MspInit+0x60>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	200f      	movs	r0, #15
 8001e46:	f000 fa53 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f000 fa65 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e50:	e012      	b.n	8001e78 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_TIM_Base_MspInit+0x64>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10d      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_TIM_Base_MspInit+0x60>)
 8001e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_TIM_Base_MspInit+0x60>)
 8001e62:	2102      	movs	r1, #2
 8001e64:	430a      	orrs	r2, r1
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2010      	movs	r0, #16
 8001e6e:	f000 fa3f 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e72:	2010      	movs	r0, #16
 8001e74:	f000 fa51 	bl	800231a <HAL_NVIC_EnableIRQ>
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40000400 	.word	0x40000400

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	230c      	movs	r3, #12
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	0018      	movs	r0, r3
 8001e96:	2314      	movs	r3, #20
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f002 fbae 	bl	80045fc <memset>
  if(huart->Instance==USART2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_UART_MspInit+0x80>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d129      	bne.n	8001efe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_UART_MspInit+0x84>)
 8001eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_UART_MspInit+0x84>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0289      	lsls	r1, r1, #10
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_UART_MspInit+0x84>)
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_UART_MspInit+0x84>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_UART_MspInit+0x84>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ed0:	210c      	movs	r1, #12
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	220c      	movs	r2, #12
 8001ed6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2202      	movs	r2, #2
 8001edc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2204      	movs	r2, #4
 8001eee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	187a      	adds	r2, r7, r1
 8001ef2:	23a0      	movs	r3, #160	; 0xa0
 8001ef4:	05db      	lsls	r3, r3, #23
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fa2b 	bl	8002354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b008      	add	sp, #32
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	40004400 	.word	0x40004400
 8001f0c:	40021000 	.word	0x40021000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f91c 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	019b      	lsls	r3, r3, #6
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 fb9d 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  a++;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f5a:	601a      	str	r2, [r3, #0]
  if (a == 3)
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d102      	bne.n	8001f6a <EXTI4_15_IRQHandler+0x26>
  {
	  a =0;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  }
  seuil_l = seuil[a][0];
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <EXTI4_15_IRQHandler+0x50>)
 8001f70:	00d2      	lsls	r2, r2, #3
 8001f72:	58d2      	ldr	r2, [r2, r3]
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <EXTI4_15_IRQHandler+0x54>)
 8001f76:	601a      	str	r2, [r3, #0]
  seuil_h = seuil[a][1];
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <EXTI4_15_IRQHandler+0x4c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <EXTI4_15_IRQHandler+0x50>)
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	3304      	adds	r3, #4
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <EXTI4_15_IRQHandler+0x58>)
 8001f88:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000168 	.word	0x20000168
 8001f94:	20000118 	.word	0x20000118
 8001f98:	200001cc 	.word	0x200001cc
 8001f9c:	200001bc 	.word	0x200001bc

08001fa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <TIM2_IRQHandler+0x24>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f001 fb2e 	bl	8003608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  i++;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <TIM2_IRQHandler+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <TIM2_IRQHandler+0x28>)
 8001fb4:	601a      	str	r2, [r3, #0]
  flag = 0;
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <TIM2_IRQHandler+0x2c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	200001d0 	.word	0x200001d0
 8001fc8:	20000160 	.word	0x20000160
 8001fcc:	20000164 	.word	0x20000164

08001fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <TIM3_IRQHandler+0x30>)
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f001 fb16 	bl	8003608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  min++;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <TIM3_IRQHandler+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <TIM3_IRQHandler+0x34>)
 8001fe4:	601a      	str	r2, [r3, #0]
  if (min == time_irri+1)
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <TIM3_IRQHandler+0x38>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <TIM3_IRQHandler+0x34>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d102      	bne.n	8001ffa <TIM3_IRQHandler+0x2a>
  {
	  i = 0;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <TIM3_IRQHandler+0x3c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]

  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000017c 	.word	0x2000017c
 8002004:	2000016c 	.word	0x2000016c
 8002008:	20000130 	.word	0x20000130
 800200c:	20000160 	.word	0x20000160

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <SystemInit+0x64>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <SystemInit+0x64>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	0049      	lsls	r1, r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <SystemInit+0x64>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <SystemInit+0x64>)
 8002028:	4913      	ldr	r1, [pc, #76]	; (8002078 <SystemInit+0x68>)
 800202a:	400a      	ands	r2, r1
 800202c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <SystemInit+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <SystemInit+0x64>)
 8002034:	4911      	ldr	r1, [pc, #68]	; (800207c <SystemInit+0x6c>)
 8002036:	400a      	ands	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <SystemInit+0x64>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <SystemInit+0x64>)
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <SystemInit+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <SystemInit+0x64>)
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <SystemInit+0x70>)
 800204e:	400a      	ands	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <SystemInit+0x64>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <SystemInit+0x64>)
 8002058:	490a      	ldr	r1, [pc, #40]	; (8002084 <SystemInit+0x74>)
 800205a:	400a      	ands	r2, r1
 800205c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SystemInit+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <SystemInit+0x78>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	0512      	lsls	r2, r2, #20
 800206a:	609a      	str	r2, [r3, #8]
#endif
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	88ff400c 	.word	0x88ff400c
 800207c:	fef6fff6 	.word	0xfef6fff6
 8002080:	fffbffff 	.word	0xfffbffff
 8002084:	ff02ffff 	.word	0xff02ffff
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800208e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002090:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002092:	e003      	b.n	800209c <LoopCopyDataInit>

08002094 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002096:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002098:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800209a:	3104      	adds	r1, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800209c:	480b      	ldr	r0, [pc, #44]	; (80020cc <LoopForever+0xa>)
  ldr  r3, =_edata
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <LoopForever+0xe>)
  adds  r2, r0, r1
 80020a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020a4:	d3f6      	bcc.n	8002094 <CopyDataInit>
  ldr  r2, =_sbss
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LoopForever+0x12>)
  b  LoopFillZerobss
 80020a8:	e002      	b.n	80020b0 <LoopFillZerobss>

080020aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80020aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80020ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ae:	3204      	adds	r2, #4

080020b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <LoopForever+0x16>)
  cmp  r2, r3
 80020b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020b4:	d3f9      	bcc.n	80020aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020b6:	f7ff ffab 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f002 fa7b 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7ff f9b3 	bl	8001428 <main>

080020c2 <LoopForever>:

LoopForever:
    b LoopForever
 80020c2:	e7fe      	b.n	80020c2 <LoopForever>
   ldr   r0, =_estack
 80020c4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80020c8:	080046e0 	.word	0x080046e0
  ldr  r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020d0:	20000144 	.word	0x20000144
  ldr  r2, =_sbss
 80020d4:	20000144 	.word	0x20000144
  ldr  r3, = _ebss
 80020d8:	20000294 	.word	0x20000294

080020dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_COMP_IRQHandler>
	...

080020e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_Init+0x3c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Init+0x3c>)
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f811 	bl	8002120 <HAL_InitTick>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d003      	beq.n	800210a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e001      	b.n	800210e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800210a:	f7ff fe75 	bl	8001df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	40022000 	.word	0x40022000

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002128:	230f      	movs	r3, #15
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_InitTick+0x50>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	23fa      	movs	r3, #250	; 0xfa
 8002136:	0099      	lsls	r1, r3, #2
 8002138:	0010      	movs	r0, r2
 800213a:	f7fd ffe5 	bl	8000108 <__udivsi3>
 800213e:	0003      	movs	r3, r0
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f8fa 	bl	800233a <HAL_SYSTICK_Config>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d004      	beq.n	8002154 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800214a:	230f      	movs	r3, #15
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e006      	b.n	8002162 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	2301      	movs	r3, #1
 8002158:	425b      	negs	r3, r3
 800215a:	2200      	movs	r2, #0
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f8c7 	bl	80022f0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000140 	.word	0x20000140

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  uwTick++;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_IncTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_IncTick+0x14>)
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000290 	.word	0x20000290

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_GetTick+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	20000290 	.word	0x20000290

080021a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	0002      	movs	r2, r0
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	231f      	movs	r3, #31
 80021b4:	401a      	ands	r2, r3
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <NVIC_EnableIRQ+0x28>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	e000e100 	.word	0xe000e100

080021cc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b7f      	cmp	r3, #127	; 0x7f
 80021e0:	d932      	bls.n	8002248 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <NVIC_SetPriority+0xd4>)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	0019      	movs	r1, r3
 80021ea:	230f      	movs	r3, #15
 80021ec:	400b      	ands	r3, r1
 80021ee:	3b08      	subs	r3, #8
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3306      	adds	r3, #6
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1dfa      	adds	r2, r7, #7
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	0011      	movs	r1, r2
 8002202:	2203      	movs	r2, #3
 8002204:	400a      	ands	r2, r1
 8002206:	00d2      	lsls	r2, r2, #3
 8002208:	21ff      	movs	r1, #255	; 0xff
 800220a:	4091      	lsls	r1, r2
 800220c:	000a      	movs	r2, r1
 800220e:	43d2      	mvns	r2, r2
 8002210:	401a      	ands	r2, r3
 8002212:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	019b      	lsls	r3, r3, #6
 8002218:	22ff      	movs	r2, #255	; 0xff
 800221a:	401a      	ands	r2, r3
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	0018      	movs	r0, r3
 8002222:	2303      	movs	r3, #3
 8002224:	4003      	ands	r3, r0
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222a:	481d      	ldr	r0, [pc, #116]	; (80022a0 <NVIC_SetPriority+0xd4>)
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	001c      	movs	r4, r3
 8002232:	230f      	movs	r3, #15
 8002234:	4023      	ands	r3, r4
 8002236:	3b08      	subs	r3, #8
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	430a      	orrs	r2, r1
 800223c:	3306      	adds	r3, #6
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	18c3      	adds	r3, r0, r3
 8002242:	3304      	adds	r3, #4
 8002244:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002246:	e027      	b.n	8002298 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <NVIC_SetPriority+0xd8>)
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b25b      	sxtb	r3, r3
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	33c0      	adds	r3, #192	; 0xc0
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	589b      	ldr	r3, [r3, r2]
 8002258:	1dfa      	adds	r2, r7, #7
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	0011      	movs	r1, r2
 800225e:	2203      	movs	r2, #3
 8002260:	400a      	ands	r2, r1
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	21ff      	movs	r1, #255	; 0xff
 8002266:	4091      	lsls	r1, r2
 8002268:	000a      	movs	r2, r1
 800226a:	43d2      	mvns	r2, r2
 800226c:	401a      	ands	r2, r3
 800226e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	019b      	lsls	r3, r3, #6
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	401a      	ands	r2, r3
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	0018      	movs	r0, r3
 800227e:	2303      	movs	r3, #3
 8002280:	4003      	ands	r3, r0
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <NVIC_SetPriority+0xd8>)
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b25b      	sxtb	r3, r3
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	430a      	orrs	r2, r1
 8002292:	33c0      	adds	r3, #192	; 0xc0
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	501a      	str	r2, [r3, r0]
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b003      	add	sp, #12
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <SysTick_Config+0x40>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e010      	b.n	80022e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <SysTick_Config+0x44>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3a01      	subs	r2, #1
 80022c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	2301      	movs	r3, #1
 80022c8:	425b      	negs	r3, r3
 80022ca:	2103      	movs	r1, #3
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ff7d 	bl	80021cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SysTick_Config+0x44>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x44>)
 80022da:	2207      	movs	r2, #7
 80022dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00ffffff 	.word	0x00ffffff
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	210f      	movs	r1, #15
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	187b      	adds	r3, r7, r1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff5d 	bl	80021cc <NVIC_SetPriority>
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	0002      	movs	r2, r0
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b25b      	sxtb	r3, r3
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff37 	bl	80021a0 <NVIC_EnableIRQ>
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff ffaf 	bl	80022a8 <SysTick_Config>
 800234a:	0003      	movs	r3, r0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800236a:	e155      	b.n	8002618 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4091      	lsls	r1, r2
 8002376:	000a      	movs	r2, r1
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d100      	bne.n	8002384 <HAL_GPIO_Init+0x30>
 8002382:	e146      	b.n	8002612 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x40>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	58d3      	ldr	r3, [r2, r3]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2107      	movs	r1, #7
 80023c0:	400b      	ands	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	409a      	lsls	r2, r3
 80023c6:	0013      	movs	r3, r2
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d00b      	beq.n	80023fc <HAL_GPIO_Init+0xa8>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f0:	2b11      	cmp	r3, #17
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d130      	bne.n	800245e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	43da      	mvns	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002432:	2201      	movs	r2, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	2201      	movs	r2, #1
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	401a      	ands	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	0013      	movs	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	055b      	lsls	r3, r3, #21
 80024ca:	4013      	ands	r3, r2
 80024cc:	d100      	bne.n	80024d0 <HAL_GPIO_Init+0x17c>
 80024ce:	e0a0      	b.n	8002612 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_GPIO_Init+0x2dc>)
 80024d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d4:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x2dc>)
 80024d6:	2101      	movs	r1, #1
 80024d8:	430a      	orrs	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80024dc:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_GPIO_Init+0x2e0>)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	589b      	ldr	r3, [r3, r2]
 80024e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2203      	movs	r2, #3
 80024ee:	4013      	ands	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	409a      	lsls	r2, r3
 80024f6:	0013      	movs	r3, r2
 80024f8:	43da      	mvns	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	23a0      	movs	r3, #160	; 0xa0
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	429a      	cmp	r2, r3
 8002508:	d01f      	beq.n	800254a <HAL_GPIO_Init+0x1f6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_GPIO_Init+0x2e4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x1f2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_GPIO_Init+0x2e8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x1ee>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a48      	ldr	r2, [pc, #288]	; (8002640 <HAL_GPIO_Init+0x2ec>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x1ea>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a47      	ldr	r2, [pc, #284]	; (8002644 <HAL_GPIO_Init+0x2f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x1e6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	; (8002648 <HAL_GPIO_Init+0x2f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x1e2>
 8002532:	2305      	movs	r3, #5
 8002534:	e00a      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 8002536:	2306      	movs	r3, #6
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 800253a:	2304      	movs	r3, #4
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x1f8>
 800254a:	2300      	movs	r3, #0
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	2103      	movs	r1, #3
 8002550:	400a      	ands	r2, r1
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4935      	ldr	r1, [pc, #212]	; (8002634 <HAL_GPIO_Init+0x2e0>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_GPIO_Init+0x2f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43da      	mvns	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	4013      	ands	r3, r2
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_GPIO_Init+0x2f8>)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_GPIO_Init+0x2f8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43da      	mvns	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	4013      	ands	r3, r2
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_GPIO_Init+0x2f8>)
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_GPIO_Init+0x2f8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	035b      	lsls	r3, r3, #13
 80025d6:	4013      	ands	r3, r2
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_GPIO_Init+0x2f8>)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_GPIO_Init+0x2f8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	039b      	lsls	r3, r3, #14
 8002600:	4013      	ands	r3, r2
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_GPIO_Init+0x2f8>)
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	40da      	lsrs	r2, r3
 8002620:	1e13      	subs	r3, r2, #0
 8002622:	d000      	beq.n	8002626 <HAL_GPIO_Init+0x2d2>
 8002624:	e6a2      	b.n	800236c <HAL_GPIO_Init+0x18>
  }
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b006      	add	sp, #24
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40021000 	.word	0x40021000
 8002634:	40010000 	.word	0x40010000
 8002638:	50000400 	.word	0x50000400
 800263c:	50000800 	.word	0x50000800
 8002640:	50000c00 	.word	0x50000c00
 8002644:	50001000 	.word	0x50001000
 8002648:	50001c00 	.word	0x50001c00
 800264c:	40010400 	.word	0x40010400

08002650 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	0008      	movs	r0, r1
 800265a:	0011      	movs	r1, r2
 800265c:	1cbb      	adds	r3, r7, #2
 800265e:	1c02      	adds	r2, r0, #0
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	1c7b      	adds	r3, r7, #1
 8002664:	1c0a      	adds	r2, r1, #0
 8002666:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002668:	1c7b      	adds	r3, r7, #1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002678:	e003      	b.n	8002682 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800267a:	1cbb      	adds	r3, r7, #2
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	0002      	movs	r2, r0
 8002694:	1dbb      	adds	r3, r7, #6
 8002696:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	1dba      	adds	r2, r7, #6
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	4013      	ands	r3, r2
 80026a2:	d008      	beq.n	80026b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80026a6:	1dba      	adds	r2, r7, #6
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026ac:	1dbb      	adds	r3, r7, #6
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 f807 	bl	80026c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 fbbc 	bl	8002e64 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4bc8      	ldr	r3, [pc, #800]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f6:	4bc6      	ldr	r3, [pc, #792]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x36>
 800270c:	e07e      	b.n	800280c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d007      	beq.n	8002724 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x68>
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	429a      	cmp	r2, r3
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4bba      	ldr	r3, [pc, #744]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x5a>
 8002730:	e06b      	b.n	800280a <HAL_RCC_OscConfig+0x132>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d167      	bne.n	800280a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f000 fb92 	bl	8002e64 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x84>
 800274c:	4bb0      	ldr	r3, [pc, #704]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4baf      	ldr	r3, [pc, #700]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e027      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	23a0      	movs	r3, #160	; 0xa0
 8002762:	02db      	lsls	r3, r3, #11
 8002764:	429a      	cmp	r2, r3
 8002766:	d10e      	bne.n	8002786 <HAL_RCC_OscConfig+0xae>
 8002768:	4ba9      	ldr	r3, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	02c9      	lsls	r1, r1, #11
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4ba5      	ldr	r3, [pc, #660]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0249      	lsls	r1, r1, #9
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e012      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 8002786:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800278c:	49a1      	ldr	r1, [pc, #644]	; (8002a14 <HAL_RCC_OscConfig+0x33c>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4b9f      	ldr	r3, [pc, #636]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4b9b      	ldr	r3, [pc, #620]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b9a      	ldr	r3, [pc, #616]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027a6:	499c      	ldr	r1, [pc, #624]	; (8002a18 <HAL_RCC_OscConfig+0x340>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fcea 	bl	800218c <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7ff fce5 	bl	800218c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d902      	bls.n	80027d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	f000 fb49 	bl	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d2:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	4013      	ands	r3, r2
 80027dc:	d0ef      	beq.n	80027be <HAL_RCC_OscConfig+0xe6>
 80027de:	e015      	b.n	800280c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fcd4 	bl	800218c <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ea:	f7ff fccf 	bl	800218c <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e333      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fc:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	4013      	ands	r3, r2
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x112>
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2202      	movs	r2, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_RCC_OscConfig+0x140>
 8002816:	e098      	b.n	800294a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2220      	movs	r2, #32
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002826:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800282c:	2120      	movs	r1, #32
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	2220      	movs	r2, #32
 8002836:	4393      	bics	r3, r2
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d13d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1ea>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13a      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800284c:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2204      	movs	r2, #4
 8002852:	4013      	ands	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_RCC_OscConfig+0x188>
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e301      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a6d      	ldr	r2, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x344>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002876:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2209      	movs	r2, #9
 800287c:	4393      	bics	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002888:	f000 fc20 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800288c:	0001      	movs	r1, r0
 800288e:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	220f      	movs	r2, #15
 8002896:	4013      	ands	r3, r2
 8002898:	4a61      	ldr	r2, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x348>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x34c>)
 80028a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80028a4:	2513      	movs	r5, #19
 80028a6:	197c      	adds	r4, r7, r5
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7ff fc39 	bl	8002120 <HAL_InitTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028b2:	197b      	adds	r3, r7, r5
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d047      	beq.n	800294a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80028ba:	2313      	movs	r3, #19
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	e2d0      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d027      	beq.n	8002918 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028c8:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2209      	movs	r2, #9
 80028ce:	4393      	bics	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7ff fc57 	bl	800218c <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff fc52 	bl	800218c <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e2b6      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a45      	ldr	r2, [pc, #276]	; (8002a1c <HAL_RCC_OscConfig+0x344>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e018      	b.n	800294a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fc32 	bl	800218c <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292e:	f7ff fc2d 	bl	800218c <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e291      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d1f1      	bne.n	800292e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2210      	movs	r2, #16
 8002950:	4013      	ands	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x27e>
 8002954:	e09f      	b.n	8002a96 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d13f      	bne.n	80029dc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d005      	beq.n	8002974 <HAL_RCC_OscConfig+0x29c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e277      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x350>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	0a19      	lsrs	r1, r3, #8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	061a      	lsls	r2, r3, #24
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	0b5b      	lsrs	r3, r3, #13
 80029a2:	3301      	adds	r3, #1
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	210f      	movs	r1, #15
 80029b2:	400b      	ands	r3, r1
 80029b4:	491a      	ldr	r1, [pc, #104]	; (8002a20 <HAL_RCC_OscConfig+0x348>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x34c>)
 80029bc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80029be:	2513      	movs	r5, #19
 80029c0:	197c      	adds	r4, r7, r5
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fbac 	bl	8002120 <HAL_InitTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029cc:	197b      	adds	r3, r7, r5
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d060      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80029d4:	2313      	movs	r3, #19
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	e243      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03e      	beq.n	8002a62 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0049      	lsls	r1, r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7ff fbcb 	bl	800218c <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029fa:	e017      	b.n	8002a2c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fc:	f7ff fbc6 	bl	800218c <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e22a      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffffe0ff 	.word	0xffffe0ff
 8002a20:	08004664 	.word	0x08004664
 8002a24:	20000140 	.word	0x20000140
 8002a28:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a2c:	4bc6      	ldr	r3, [pc, #792]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0e1      	beq.n	80029fc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a38:	4bc3      	ldr	r3, [pc, #780]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4ac3      	ldr	r2, [pc, #780]	; (8002d4c <HAL_RCC_OscConfig+0x674>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a46:	4bc0      	ldr	r3, [pc, #768]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4c:	4bbe      	ldr	r3, [pc, #760]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	0a19      	lsrs	r1, r3, #8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	061a      	lsls	r2, r3, #24
 8002a5a:	4bbb      	ldr	r3, [pc, #748]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	e019      	b.n	8002a96 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a62:	4bb9      	ldr	r3, [pc, #740]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4bb8      	ldr	r3, [pc, #736]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a68:	49b9      	ldr	r1, [pc, #740]	; (8002d50 <HAL_RCC_OscConfig+0x678>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fb8d 	bl	800218c <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a78:	f7ff fb88 	bl	800218c <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1ec      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a8a:	4baf      	ldr	r3, [pc, #700]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d019      	beq.n	8002adc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	4ba7      	ldr	r3, [pc, #668]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aac:	4ba6      	ldr	r3, [pc, #664]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7ff fb6a 	bl	800218c <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abe:	f7ff fb65 	bl	800218c <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1c9      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad0:	4b9d      	ldr	r3, [pc, #628]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0f1      	beq.n	8002abe <HAL_RCC_OscConfig+0x3e6>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b9a      	ldr	r3, [pc, #616]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	4b99      	ldr	r3, [pc, #612]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7ff fb50 	bl	800218c <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af2:	f7ff fb4b 	bl	800218c <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1af      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b04:	4b90      	ldr	r3, [pc, #576]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d1f1      	bne.n	8002af2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2204      	movs	r2, #4
 8002b14:	4013      	ands	r3, r2
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x442>
 8002b18:	e0af      	b.n	8002c7a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1a:	2323      	movs	r3, #35	; 0x23
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	055b      	lsls	r3, r3, #21
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d10a      	bne.n	8002b44 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0549      	lsls	r1, r1, #21
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b3c:	2323      	movs	r3, #35	; 0x23
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	4b83      	ldr	r3, [pc, #524]	; (8002d54 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d11a      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b50:	4b80      	ldr	r3, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0049      	lsls	r1, r1, #1
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff fb15 	bl	800218c <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b68:	f7ff fb10 	bl	800218c <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e174      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4ca>
 8002b92:	4b6d      	ldr	r3, [pc, #436]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b96:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0049      	lsls	r1, r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	651a      	str	r2, [r3, #80]	; 0x50
 8002ba0:	e031      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4ec>
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bb0:	4967      	ldr	r1, [pc, #412]	; (8002d50 <HAL_RCC_OscConfig+0x678>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bbc:	4966      	ldr	r1, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc2:	e020      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	23a0      	movs	r3, #160	; 0xa0
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d10e      	bne.n	8002bee <HAL_RCC_OscConfig+0x516>
 8002bd0:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	00c9      	lsls	r1, r1, #3
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	; 0x50
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf2:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bf4:	4956      	ldr	r1, [pc, #344]	; (8002d50 <HAL_RCC_OscConfig+0x678>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfe:	4b52      	ldr	r3, [pc, #328]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c00:	4955      	ldr	r1, [pc, #340]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fabd 	bl	800218c <HAL_GetTick>
 8002c12:	0003      	movs	r3, r0
 8002c14:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c16:	e009      	b.n	8002c2c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff fab8 	bl	800218c <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <HAL_RCC_OscConfig+0x684>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e11b      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2c:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0ef      	beq.n	8002c18 <HAL_RCC_OscConfig+0x540>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7ff faa7 	bl	800218c <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7ff faa2 	bl	800218c <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	4a43      	ldr	r2, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x684>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e105      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1ef      	bne.n	8002c44 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c64:	2323      	movs	r3, #35	; 0x23
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c74:	493a      	ldr	r1, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x688>)
 8002c76:	400a      	ands	r2, r1
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4013      	ands	r3, r2
 8002c82:	d049      	beq.n	8002d18 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d026      	beq.n	8002cda <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca4:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	0189      	lsls	r1, r1, #6
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff fa6b 	bl	800218c <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbc:	f7ff fa66 	bl	800218c <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0ca      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d0f1      	beq.n	8002cbc <HAL_RCC_OscConfig+0x5e4>
 8002cd8:	e01e      	b.n	8002d18 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002cec:	491e      	ldr	r1, [pc, #120]	; (8002d68 <HAL_RCC_OscConfig+0x690>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fa4b 	bl	800218c <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfc:	f7ff fa46 	bl	800218c <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0aa      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d1f1      	bne.n	8002cfc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d100      	bne.n	8002d22 <HAL_RCC_OscConfig+0x64a>
 8002d20:	e09f      	b.n	8002e62 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d100      	bne.n	8002d2a <HAL_RCC_OscConfig+0x652>
 8002d28:	e078      	b.n	8002e1c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d159      	bne.n	8002de6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <HAL_RCC_OscConfig+0x670>)
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <HAL_RCC_OscConfig+0x694>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fa25 	bl	800218c <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x6aa>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	ffff1fff 	.word	0xffff1fff
 8002d50:	fffffeff 	.word	0xfffffeff
 8002d54:	40007000 	.word	0x40007000
 8002d58:	fffffbff 	.word	0xfffffbff
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	efffffff 	.word	0xefffffff
 8002d64:	40010000 	.word	0x40010000
 8002d68:	ffffdfff 	.word	0xffffdfff
 8002d6c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7ff fa0c 	bl	800218c <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e070      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	049b      	lsls	r3, r3, #18
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x798>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	431a      	orrs	r2, r3
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	0449      	lsls	r1, r1, #17
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f9e6 	bl	800218c <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7ff f9e1 	bl	800218c <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e045      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	049b      	lsls	r3, r3, #18
 8002de0:	4013      	ands	r3, r2
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x6ee>
 8002de4:	e03d      	b.n	8002e62 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002dec:	4921      	ldr	r1, [pc, #132]	; (8002e74 <HAL_RCC_OscConfig+0x79c>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff f9cb 	bl	800218c <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7ff f9c6 	bl	800218c <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e02a      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	049b      	lsls	r3, r3, #18
 8002e16:	4013      	ands	r3, r2
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x724>
 8002e1a:	e022      	b.n	8002e62 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01d      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x794>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	23f0      	movs	r3, #240	; 0xf0
 8002e42:	039b      	lsls	r3, r3, #14
 8002e44:	401a      	ands	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	401a      	ands	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b00a      	add	sp, #40	; 0x28
 8002e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	ff02ffff 	.word	0xff02ffff
 8002e74:	feffffff 	.word	0xfeffffff

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e10d      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d911      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eac:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0f4      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	22f0      	movs	r2, #240	; 0xf0
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d100      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x70>
 8002ee6:	e089      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef0:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d120      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d3      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	049b      	lsls	r3, r3, #18
 8002f10:	4013      	ands	r3, r2
 8002f12:	d114      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0c7      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f20:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0bc      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0b4      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4393      	bics	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f52:	f7ff f91b 	bl	800218c <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d111      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7ff f912 	bl	800218c <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e097      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d1ef      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xec>
 8002f84:	e03a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d111      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8e:	e009      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7ff f8fc 	bl	800218c <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	4a47      	ldr	r2, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e081      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d1ef      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x118>
 8002fb0:	e024      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11b      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fba:	e009      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7ff f8e6 	bl	800218c <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	4a3c      	ldr	r2, [pc, #240]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e06b      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd0:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	220c      	movs	r2, #12
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d1ef      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x144>
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7ff f8d5 	bl	800218c <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e05a      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d211      	bcs.n	800302e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	4393      	bics	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e03c      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	d00a      	beq.n	800306c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x248>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306c:	f000 f82e 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003070:	0001      	movs	r1, r0
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	220f      	movs	r2, #15
 800307a:	4013      	ands	r3, r2
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_RCC_ClockConfig+0x24c>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	000a      	movs	r2, r1
 8003082:	40da      	lsrs	r2, r3
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_ClockConfig+0x250>)
 8003086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003088:	250b      	movs	r5, #11
 800308a:	197c      	adds	r4, r7, r5
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff f847 	bl	8002120 <HAL_InitTick>
 8003092:	0003      	movs	r3, r0
 8003094:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003096:	197b      	adds	r3, r7, r5
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800309e:	230b      	movs	r3, #11
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40021000 	.word	0x40021000
 80030b8:	00001388 	.word	0x00001388
 80030bc:	fffff8ff 	.word	0xfffff8ff
 80030c0:	ffffc7ff 	.word	0xffffc7ff
 80030c4:	08004664 	.word	0x08004664
 80030c8:	20000140 	.word	0x20000140

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	220c      	movs	r2, #12
 80030dc:	4013      	ands	r3, r2
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d00e      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d00f      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d157      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	4013      	ands	r3, r2
 80030f2:	d002      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030f8:	e05d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030fc:	613b      	str	r3, [r7, #16]
      break;
 80030fe:	e05a      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <HAL_RCC_GetSysClockFreq+0x100>)
 8003102:	613b      	str	r3, [r7, #16]
      break;
 8003104:	e057      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0c9b      	lsrs	r3, r3, #18
 800310a:	220f      	movs	r2, #15
 800310c:	4013      	ands	r3, r2
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	0d9b      	lsrs	r3, r3, #22
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
 800311c:	3301      	adds	r3, #1
 800311e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	4013      	ands	r3, r2
 800312a:	d00f      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	000a      	movs	r2, r1
 8003130:	0152      	lsls	r2, r2, #5
 8003132:	1a52      	subs	r2, r2, r1
 8003134:	0193      	lsls	r3, r2, #6
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	185b      	adds	r3, r3, r1
 800313c:	025b      	lsls	r3, r3, #9
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f7fc ffe1 	bl	8000108 <__udivsi3>
 8003146:	0003      	movs	r3, r0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e023      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2210      	movs	r2, #16
 8003152:	4013      	ands	r3, r2
 8003154:	d00f      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	000a      	movs	r2, r1
 800315a:	0152      	lsls	r2, r2, #5
 800315c:	1a52      	subs	r2, r2, r1
 800315e:	0193      	lsls	r3, r2, #6
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	185b      	adds	r3, r3, r1
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7fc ffcc 	bl	8000108 <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e00e      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	000a      	movs	r2, r1
 800317a:	0152      	lsls	r2, r2, #5
 800317c:	1a52      	subs	r2, r2, r1
 800317e:	0193      	lsls	r3, r2, #6
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	185b      	adds	r3, r3, r1
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f7fc ffbc 	bl	8000108 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	e00d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	2207      	movs	r2, #7
 80031a2:	4013      	ands	r3, r2
 80031a4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0212      	lsls	r2, r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      break;
 80031b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b006      	add	sp, #24
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	003d0900 	.word	0x003d0900
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	0800467c 	.word	0x0800467c

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000140 	.word	0x20000140

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ec:	f7ff fff2 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f0:	0001      	movs	r1, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	2207      	movs	r2, #7
 80031fa:	4013      	ands	r3, r2
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	40d9      	lsrs	r1, r3
 8003202:	000b      	movs	r3, r1
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	08004674 	.word	0x08004674

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003218:	f7ff ffdc 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 800321c:	0001      	movs	r1, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	2207      	movs	r2, #7
 8003226:	4013      	ands	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_GetPCLK2Freq+0x28>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	40d9      	lsrs	r1, r3
 800322e:	000b      	movs	r3, r1
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	08004674 	.word	0x08004674

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2220      	movs	r2, #32
 800324e:	4013      	ands	r3, r2
 8003250:	d106      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4013      	ands	r3, r2
 800325c:	d100      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800325e:	e0dd      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003260:	2317      	movs	r3, #23
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003268:	4ba4      	ldr	r3, [pc, #656]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800326a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	055b      	lsls	r3, r3, #21
 8003270:	4013      	ands	r3, r2
 8003272:	d10a      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4ba1      	ldr	r3, [pc, #644]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003278:	4ba0      	ldr	r3, [pc, #640]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	0549      	lsls	r1, r1, #21
 800327e:	430a      	orrs	r2, r1
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003282:	2317      	movs	r3, #23
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b9d      	ldr	r3, [pc, #628]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4013      	ands	r3, r2
 8003294:	d11a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b99      	ldr	r3, [pc, #612]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0049      	lsls	r1, r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7fe ff72 	bl	800218c <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe ff6d 	bl	800218c <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d901      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e118      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b8f      	ldr	r3, [pc, #572]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80032cc:	4b8b      	ldr	r3, [pc, #556]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	23c0      	movs	r3, #192	; 0xc0
 80032d2:	039b      	lsls	r3, r3, #14
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	039b      	lsls	r3, r3, #14
 80032e0:	4013      	ands	r3, r2
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d107      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	23c0      	movs	r3, #192	; 0xc0
 80032ee:	039b      	lsls	r3, r3, #14
 80032f0:	4013      	ands	r3, r2
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d013      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	401a      	ands	r2, r3
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	029b      	lsls	r3, r3, #10
 8003306:	429a      	cmp	r2, r3
 8003308:	d10a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	029b      	lsls	r3, r3, #10
 8003312:	401a      	ands	r2, r3
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	429a      	cmp	r2, r3
 800331a:	d101      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0e8      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003320:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003324:	23c0      	movs	r3, #192	; 0xc0
 8003326:	029b      	lsls	r3, r3, #10
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d049      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	23c0      	movs	r3, #192	; 0xc0
 8003338:	029b      	lsls	r3, r3, #10
 800333a:	4013      	ands	r3, r2
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	429a      	cmp	r2, r3
 8003340:	d004      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	d10d      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	23c0      	movs	r3, #192	; 0xc0
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	4013      	ands	r3, r2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d034      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d02e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800336a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003372:	4b62      	ldr	r3, [pc, #392]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003376:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0309      	lsls	r1, r1, #12
 800337c:	430a      	orrs	r2, r1
 800337e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003380:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003384:	4b5d      	ldr	r3, [pc, #372]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003386:	4960      	ldr	r1, [pc, #384]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003388:	400a      	ands	r2, r1
 800338a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800338c:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d014      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fef6 	bl	800218c <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a4:	e009      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe fef1 	bl	800218c <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e09b      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ba:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4013      	ands	r3, r2
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	23c0      	movs	r3, #192	; 0xc0
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	401a      	ands	r2, r3
 80033d0:	23c0      	movs	r3, #192	; 0xc0
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	23c0      	movs	r3, #192	; 0xc0
 80033e8:	039b      	lsls	r3, r3, #14
 80033ea:	401a      	ands	r2, r3
 80033ec:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	401a      	ands	r2, r3
 8003400:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003402:	430a      	orrs	r2, r1
 8003404:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003406:	2317      	movs	r3, #23
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003416:	493f      	ldr	r1, [pc, #252]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003418:	400a      	ands	r2, r1
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	2203      	movs	r2, #3
 800342c:	4393      	bics	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003436:	430a      	orrs	r2, r1
 8003438:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	220c      	movs	r2, #12
 800344a:	4393      	bics	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003454:	430a      	orrs	r2, r1
 8003456:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a2c      	ldr	r2, [pc, #176]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003472:	430a      	orrs	r2, r1
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2208      	movs	r2, #8
 800347c:	4013      	ands	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003480:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003490:	430a      	orrs	r2, r1
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2240      	movs	r2, #64	; 0x40
 80034ba:	4013      	ands	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034ce:	430a      	orrs	r2, r1
 80034d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	4013      	ands	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b006      	add	sp, #24
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	fffcffff 	.word	0xfffcffff
 8003508:	fff7ffff 	.word	0xfff7ffff
 800350c:	00001388 	.word	0x00001388
 8003510:	ffcfffff 	.word	0xffcfffff
 8003514:	efffffff 	.word	0xefffffff
 8003518:	fffff3ff 	.word	0xfffff3ff
 800351c:	ffffcfff 	.word	0xffffcfff
 8003520:	fbffffff 	.word	0xfbffffff
 8003524:	fff3ffff 	.word	0xfff3ffff

08003528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01e      	b.n	8003578 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2239      	movs	r2, #57	; 0x39
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2238      	movs	r2, #56	; 0x38
 800354a:	2100      	movs	r1, #0
 800354c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7fe fc65 	bl	8001e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2239      	movs	r2, #57	; 0x39
 800355a:	2102      	movs	r1, #2
 800355c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	0019      	movs	r1, r3
 8003568:	0010      	movs	r0, r2
 800356a:	f000 fa1b 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2239      	movs	r2, #57	; 0x39
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2207      	movs	r2, #7
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d007      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2101      	movs	r1, #1
 80035d8:	438a      	bics	r2, r1
 80035da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_TIM_Base_Stop_IT+0x40>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_Base_Stop_IT+0x34>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	438a      	bics	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b002      	add	sp, #8
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	00001111 	.word	0x00001111

08003608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2202      	movs	r2, #2
 8003618:	4013      	ands	r3, r2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d124      	bne.n	8003668 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2202      	movs	r2, #2
 8003626:	4013      	ands	r3, r2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d11d      	bne.n	8003668 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2203      	movs	r2, #3
 8003632:	4252      	negs	r2, r2
 8003634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2203      	movs	r2, #3
 8003644:	4013      	ands	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f992 	bl	8003974 <HAL_TIM_IC_CaptureCallback>
 8003650:	e007      	b.n	8003662 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 f985 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 f991 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2204      	movs	r2, #4
 8003670:	4013      	ands	r3, r2
 8003672:	2b04      	cmp	r3, #4
 8003674:	d125      	bne.n	80036c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11e      	bne.n	80036c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2205      	movs	r2, #5
 800368a:	4252      	negs	r2, r2
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	23c0      	movs	r3, #192	; 0xc0
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 f965 	bl	8003974 <HAL_TIM_IC_CaptureCallback>
 80036aa:	e007      	b.n	80036bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f958 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f964 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2208      	movs	r2, #8
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d124      	bne.n	800371a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2208      	movs	r2, #8
 80036d8:	4013      	ands	r3, r2
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11d      	bne.n	800371a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2209      	movs	r2, #9
 80036e4:	4252      	negs	r2, r2
 80036e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2203      	movs	r2, #3
 80036f6:	4013      	ands	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 f939 	bl	8003974 <HAL_TIM_IC_CaptureCallback>
 8003702:	e007      	b.n	8003714 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0018      	movs	r0, r3
 8003708:	f000 f92c 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 f938 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2210      	movs	r2, #16
 8003722:	4013      	ands	r3, r2
 8003724:	2b10      	cmp	r3, #16
 8003726:	d125      	bne.n	8003774 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2210      	movs	r2, #16
 8003730:	4013      	ands	r3, r2
 8003732:	2b10      	cmp	r3, #16
 8003734:	d11e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2211      	movs	r2, #17
 800373c:	4252      	negs	r2, r2
 800373e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2208      	movs	r2, #8
 8003744:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	23c0      	movs	r3, #192	; 0xc0
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4013      	ands	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f90c 	bl	8003974 <HAL_TIM_IC_CaptureCallback>
 800375c:	e007      	b.n	800376e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f8ff 	bl	8003964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f90b 	bl	8003984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10f      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	4252      	negs	r2, r2
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f8d9 	bl	8003954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d10f      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d108      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2241      	movs	r2, #65	; 0x41
 80037c4:	4252      	negs	r2, r2
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f8e2 	bl	8003994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2238      	movs	r2, #56	; 0x38
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0ab      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x170>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2239      	movs	r2, #57	; 0x39
 80037fc:	2102      	movs	r1, #2
 80037fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2277      	movs	r2, #119	; 0x77
 800380c:	4393      	bics	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <HAL_TIM_ConfigClockSource+0x178>)
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d100      	bne.n	800382a <HAL_TIM_ConfigClockSource+0x52>
 8003828:	e06b      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x12a>
 800382a:	d80e      	bhi.n	800384a <HAL_TIM_ConfigClockSource+0x72>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d100      	bne.n	8003832 <HAL_TIM_ConfigClockSource+0x5a>
 8003830:	e077      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x14a>
 8003832:	d803      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x64>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d100      	bne.n	800383a <HAL_TIM_ConfigClockSource+0x62>
 8003838:	e073      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800383a:	e07c      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800383c:	2b20      	cmp	r3, #32
 800383e:	d100      	bne.n	8003842 <HAL_TIM_ConfigClockSource+0x6a>
 8003840:	e06f      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x14a>
 8003842:	2b30      	cmp	r3, #48	; 0x30
 8003844:	d100      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x70>
 8003846:	e06c      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003848:	e075      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800384a:	2b70      	cmp	r3, #112	; 0x70
 800384c:	d00e      	beq.n	800386c <HAL_TIM_ConfigClockSource+0x94>
 800384e:	d804      	bhi.n	800385a <HAL_TIM_ConfigClockSource+0x82>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d036      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xea>
 8003854:	2b60      	cmp	r3, #96	; 0x60
 8003856:	d044      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003858:	e06d      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	0152      	lsls	r2, r2, #5
 800385e:	4293      	cmp	r3, r2
 8003860:	d068      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0x15c>
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0192      	lsls	r2, r2, #6
 8003866:	4293      	cmp	r3, r2
 8003868:	d017      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800386a:	e064      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f000 f96a 	bl	8003b54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2277      	movs	r2, #119	; 0x77
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
      break;
 8003898:	e04d      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 f953 	bl	8003b54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	01c9      	lsls	r1, r1, #7
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e039      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	001a      	movs	r2, r3
 80038d0:	f000 f8c6 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	; 0x50
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 f920 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e029      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	001a      	movs	r2, r3
 80038f0:	f000 f8e4 	bl	8003abc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	; 0x60
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 f910 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003900:	e019      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	001a      	movs	r2, r3
 8003910:	f000 f8a6 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f900 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003920:	e009      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0019      	movs	r1, r3
 800392c:	0010      	movs	r0, r2
 800392e:	f000 f8f7 	bl	8003b20 <TIM_ITRx_SetConfig>
      break;
 8003932:	e000      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003934:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2239      	movs	r2, #57	; 0x39
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2238      	movs	r2, #56	; 0x38
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}
 8003950:	ffff00ff 	.word	0xffff00ff

08003954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	05db      	lsls	r3, r3, #23
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0x32>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <TIM_Base_SetConfig+0xac>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0x32>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <TIM_Base_SetConfig+0xb0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0x32>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TIM_Base_SetConfig+0xb4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2270      	movs	r2, #112	; 0x70
 80039da:	4393      	bics	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0x66>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <TIM_Base_SetConfig+0xac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0x66>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <TIM_Base_SetConfig+0xb0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0x66>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <TIM_Base_SetConfig+0xb4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <TIM_Base_SetConfig+0xb8>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	4393      	bics	r3, r2
 8003a22:	001a      	movs	r2, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	615a      	str	r2, [r3, #20]
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b004      	add	sp, #16
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40010800 	.word	0x40010800
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	fffffcff 	.word	0xfffffcff

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	2201      	movs	r2, #1
 8003a78:	4393      	bics	r3, r2
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	22f0      	movs	r2, #240	; 0xf0
 8003a8a:	4393      	bics	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b006      	add	sp, #24
 8003aba:	bd80      	pop	{r7, pc}

08003abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4393      	bics	r3, r2
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <TIM_TI2_ConfigInputStage+0x60>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	22a0      	movs	r2, #160	; 0xa0
 8003af8:	4393      	bics	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b006      	add	sp, #24
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	ffff0fff 	.word	0xffff0fff

08003b20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2270      	movs	r2, #112	; 0x70
 8003b34:	4393      	bics	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	2207      	movs	r2, #7
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <TIM_ETR_SetConfig+0x3c>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	021a      	lsls	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	ffff00ff 	.word	0xffff00ff

08003b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2238      	movs	r2, #56	; 0x38
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e032      	b.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2238      	movs	r2, #56	; 0x38
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2239      	movs	r2, #57	; 0x39
 8003bb8:	2102      	movs	r1, #2
 8003bba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2270      	movs	r2, #112	; 0x70
 8003bd0:	4393      	bics	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2280      	movs	r2, #128	; 0x80
 8003be2:	4393      	bics	r3, r2
 8003be4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2239      	movs	r2, #57	; 0x39
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2238      	movs	r2, #56	; 0x38
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e044      	b.n	8003cb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2270      	movs	r2, #112	; 0x70
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe f921 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2101      	movs	r1, #1
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 f830 	bl	8003cc4 <UART_SetConfig>
 8003c64:	0003      	movs	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e024      	b.n	8003cb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 fb57 	bl	800432c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <HAL_UART_Init+0xa4>)
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	212a      	movs	r1, #42	; 0x2a
 8003c9a:	438a      	bics	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fbef 	bl	8004494 <UART_CheckIdleState>
 8003cb6:	0003      	movs	r3, r0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	ffffb7ff 	.word	0xffffb7ff

08003cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc4:	b5b0      	push	{r4, r5, r7, lr}
 8003cc6:	b08e      	sub	sp, #56	; 0x38
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003ccc:	231b      	movs	r3, #27
 8003cce:	2218      	movs	r2, #24
 8003cd0:	4694      	mov	ip, r2
 8003cd2:	44bc      	add	ip, r7
 8003cd4:	4463      	add	r3, ip
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cde:	2313      	movs	r3, #19
 8003ce0:	2218      	movs	r2, #24
 8003ce2:	4694      	mov	ip, r2
 8003ce4:	44bc      	add	ip, r7
 8003ce6:	4463      	add	r3, ip
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4aca      	ldr	r2, [pc, #808]	; (8004038 <UART_SetConfig+0x374>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4ac5      	ldr	r2, [pc, #788]	; (800403c <UART_SetConfig+0x378>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4abf      	ldr	r2, [pc, #764]	; (8004040 <UART_SetConfig+0x37c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4abb      	ldr	r2, [pc, #748]	; (8004044 <UART_SetConfig+0x380>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d62:	430a      	orrs	r2, r1
 8003d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4ab7      	ldr	r2, [pc, #732]	; (8004048 <UART_SetConfig+0x384>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d134      	bne.n	8003dda <UART_SetConfig+0x116>
 8003d70:	4bb6      	ldr	r3, [pc, #728]	; (800404c <UART_SetConfig+0x388>)
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	2203      	movs	r2, #3
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d015      	beq.n	8003da8 <UART_SetConfig+0xe4>
 8003d7c:	d304      	bcc.n	8003d88 <UART_SetConfig+0xc4>
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d00a      	beq.n	8003d98 <UART_SetConfig+0xd4>
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d018      	beq.n	8003db8 <UART_SetConfig+0xf4>
 8003d86:	e01f      	b.n	8003dc8 <UART_SetConfig+0x104>
 8003d88:	231b      	movs	r3, #27
 8003d8a:	2218      	movs	r2, #24
 8003d8c:	4694      	mov	ip, r2
 8003d8e:	44bc      	add	ip, r7
 8003d90:	4463      	add	r3, ip
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e0c5      	b.n	8003f24 <UART_SetConfig+0x260>
 8003d98:	231b      	movs	r3, #27
 8003d9a:	2218      	movs	r2, #24
 8003d9c:	4694      	mov	ip, r2
 8003d9e:	44bc      	add	ip, r7
 8003da0:	4463      	add	r3, ip
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e0bd      	b.n	8003f24 <UART_SetConfig+0x260>
 8003da8:	231b      	movs	r3, #27
 8003daa:	2218      	movs	r2, #24
 8003dac:	4694      	mov	ip, r2
 8003dae:	44bc      	add	ip, r7
 8003db0:	4463      	add	r3, ip
 8003db2:	2204      	movs	r2, #4
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e0b5      	b.n	8003f24 <UART_SetConfig+0x260>
 8003db8:	231b      	movs	r3, #27
 8003dba:	2218      	movs	r2, #24
 8003dbc:	4694      	mov	ip, r2
 8003dbe:	44bc      	add	ip, r7
 8003dc0:	4463      	add	r3, ip
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e0ad      	b.n	8003f24 <UART_SetConfig+0x260>
 8003dc8:	231b      	movs	r3, #27
 8003dca:	2218      	movs	r2, #24
 8003dcc:	4694      	mov	ip, r2
 8003dce:	44bc      	add	ip, r7
 8003dd0:	4463      	add	r3, ip
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	e0a4      	b.n	8003f24 <UART_SetConfig+0x260>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a9c      	ldr	r2, [pc, #624]	; (8004050 <UART_SetConfig+0x38c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d137      	bne.n	8003e54 <UART_SetConfig+0x190>
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <UART_SetConfig+0x388>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	220c      	movs	r2, #12
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d018      	beq.n	8003e22 <UART_SetConfig+0x15e>
 8003df0:	d802      	bhi.n	8003df8 <UART_SetConfig+0x134>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <UART_SetConfig+0x13e>
 8003df6:	e024      	b.n	8003e42 <UART_SetConfig+0x17e>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d00a      	beq.n	8003e12 <UART_SetConfig+0x14e>
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d018      	beq.n	8003e32 <UART_SetConfig+0x16e>
 8003e00:	e01f      	b.n	8003e42 <UART_SetConfig+0x17e>
 8003e02:	231b      	movs	r3, #27
 8003e04:	2218      	movs	r2, #24
 8003e06:	4694      	mov	ip, r2
 8003e08:	44bc      	add	ip, r7
 8003e0a:	4463      	add	r3, ip
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e088      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e12:	231b      	movs	r3, #27
 8003e14:	2218      	movs	r2, #24
 8003e16:	4694      	mov	ip, r2
 8003e18:	44bc      	add	ip, r7
 8003e1a:	4463      	add	r3, ip
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e080      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e22:	231b      	movs	r3, #27
 8003e24:	2218      	movs	r2, #24
 8003e26:	4694      	mov	ip, r2
 8003e28:	44bc      	add	ip, r7
 8003e2a:	4463      	add	r3, ip
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e078      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e32:	231b      	movs	r3, #27
 8003e34:	2218      	movs	r2, #24
 8003e36:	4694      	mov	ip, r2
 8003e38:	44bc      	add	ip, r7
 8003e3a:	4463      	add	r3, ip
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e070      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e42:	231b      	movs	r3, #27
 8003e44:	2218      	movs	r2, #24
 8003e46:	4694      	mov	ip, r2
 8003e48:	44bc      	add	ip, r7
 8003e4a:	4463      	add	r3, ip
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	e067      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a7e      	ldr	r2, [pc, #504]	; (8004054 <UART_SetConfig+0x390>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d107      	bne.n	8003e6e <UART_SetConfig+0x1aa>
 8003e5e:	231b      	movs	r3, #27
 8003e60:	2218      	movs	r2, #24
 8003e62:	4694      	mov	ip, r2
 8003e64:	44bc      	add	ip, r7
 8003e66:	4463      	add	r3, ip
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e05a      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a79      	ldr	r2, [pc, #484]	; (8004058 <UART_SetConfig+0x394>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d107      	bne.n	8003e88 <UART_SetConfig+0x1c4>
 8003e78:	231b      	movs	r3, #27
 8003e7a:	2218      	movs	r2, #24
 8003e7c:	4694      	mov	ip, r2
 8003e7e:	44bc      	add	ip, r7
 8003e80:	4463      	add	r3, ip
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e04d      	b.n	8003f24 <UART_SetConfig+0x260>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6c      	ldr	r2, [pc, #432]	; (8004040 <UART_SetConfig+0x37c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d141      	bne.n	8003f16 <UART_SetConfig+0x252>
 8003e92:	4b6e      	ldr	r3, [pc, #440]	; (800404c <UART_SetConfig+0x388>)
 8003e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e96:	23c0      	movs	r3, #192	; 0xc0
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	00d2      	lsls	r2, r2, #3
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01f      	beq.n	8003ee4 <UART_SetConfig+0x220>
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d802      	bhi.n	8003eb2 <UART_SetConfig+0x1ee>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <UART_SetConfig+0x200>
 8003eb0:	e028      	b.n	8003f04 <UART_SetConfig+0x240>
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00c      	beq.n	8003ed4 <UART_SetConfig+0x210>
 8003eba:	22c0      	movs	r2, #192	; 0xc0
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <UART_SetConfig+0x230>
 8003ec2:	e01f      	b.n	8003f04 <UART_SetConfig+0x240>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	4694      	mov	ip, r2
 8003eca:	44bc      	add	ip, r7
 8003ecc:	4463      	add	r3, ip
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e027      	b.n	8003f24 <UART_SetConfig+0x260>
 8003ed4:	231b      	movs	r3, #27
 8003ed6:	2218      	movs	r2, #24
 8003ed8:	4694      	mov	ip, r2
 8003eda:	44bc      	add	ip, r7
 8003edc:	4463      	add	r3, ip
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e01f      	b.n	8003f24 <UART_SetConfig+0x260>
 8003ee4:	231b      	movs	r3, #27
 8003ee6:	2218      	movs	r2, #24
 8003ee8:	4694      	mov	ip, r2
 8003eea:	44bc      	add	ip, r7
 8003eec:	4463      	add	r3, ip
 8003eee:	2204      	movs	r2, #4
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e017      	b.n	8003f24 <UART_SetConfig+0x260>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2218      	movs	r2, #24
 8003ef8:	4694      	mov	ip, r2
 8003efa:	44bc      	add	ip, r7
 8003efc:	4463      	add	r3, ip
 8003efe:	2208      	movs	r2, #8
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x260>
 8003f04:	231b      	movs	r3, #27
 8003f06:	2218      	movs	r2, #24
 8003f08:	4694      	mov	ip, r2
 8003f0a:	44bc      	add	ip, r7
 8003f0c:	4463      	add	r3, ip
 8003f0e:	2210      	movs	r2, #16
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	e006      	b.n	8003f24 <UART_SetConfig+0x260>
 8003f16:	231b      	movs	r3, #27
 8003f18:	2218      	movs	r2, #24
 8003f1a:	4694      	mov	ip, r2
 8003f1c:	44bc      	add	ip, r7
 8003f1e:	4463      	add	r3, ip
 8003f20:	2210      	movs	r2, #16
 8003f22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a45      	ldr	r2, [pc, #276]	; (8004040 <UART_SetConfig+0x37c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d000      	beq.n	8003f30 <UART_SetConfig+0x26c>
 8003f2e:	e09d      	b.n	800406c <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f30:	231b      	movs	r3, #27
 8003f32:	2218      	movs	r2, #24
 8003f34:	4694      	mov	ip, r2
 8003f36:	44bc      	add	ip, r7
 8003f38:	4463      	add	r3, ip
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d00d      	beq.n	8003f5c <UART_SetConfig+0x298>
 8003f40:	dc02      	bgt.n	8003f48 <UART_SetConfig+0x284>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <UART_SetConfig+0x28e>
 8003f46:	e01d      	b.n	8003f84 <UART_SetConfig+0x2c0>
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d012      	beq.n	8003f72 <UART_SetConfig+0x2ae>
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d015      	beq.n	8003f7c <UART_SetConfig+0x2b8>
 8003f50:	e018      	b.n	8003f84 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003f52:	f7ff f949 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003f56:	0003      	movs	r3, r0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f5a:	e01b      	b.n	8003f94 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	; (800404c <UART_SetConfig+0x388>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2210      	movs	r2, #16
 8003f62:	4013      	ands	r3, r2
 8003f64:	d002      	beq.n	8003f6c <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <UART_SetConfig+0x398>)
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003f6a:	e013      	b.n	8003f94 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003f6c:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <UART_SetConfig+0x39c>)
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f70:	e010      	b.n	8003f94 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003f72:	f7ff f8ab 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003f76:	0003      	movs	r3, r0
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f7a:	e00b      	b.n	8003f94 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f82:	e007      	b.n	8003f94 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f84:	2313      	movs	r3, #19
 8003f86:	2218      	movs	r2, #24
 8003f88:	4694      	mov	ip, r2
 8003f8a:	44bc      	add	ip, r7
 8003f8c:	4463      	add	r3, ip
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
        break;
 8003f92:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d100      	bne.n	8003f9c <UART_SetConfig+0x2d8>
 8003f9a:	e1a6      	b.n	80042ea <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d305      	bcc.n	8003fb8 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d907      	bls.n	8003fc8 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003fb8:	2313      	movs	r3, #19
 8003fba:	2218      	movs	r2, #24
 8003fbc:	4694      	mov	ip, r2
 8003fbe:	44bc      	add	ip, r7
 8003fc0:	4463      	add	r3, ip
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e190      	b.n	80042ea <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	6939      	ldr	r1, [r7, #16]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	000b      	movs	r3, r1
 8003fd6:	0e1b      	lsrs	r3, r3, #24
 8003fd8:	0010      	movs	r0, r2
 8003fda:	0205      	lsls	r5, r0, #8
 8003fdc:	431d      	orrs	r5, r3
 8003fde:	000b      	movs	r3, r1
 8003fe0:	021c      	lsls	r4, r3, #8
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68b8      	ldr	r0, [r7, #8]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	1900      	adds	r0, r0, r4
 8003ff4:	4169      	adcs	r1, r5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f7fc fa34 	bl	8000470 <__aeabi_uldivmod>
 8004008:	0003      	movs	r3, r0
 800400a:	000c      	movs	r4, r1
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <UART_SetConfig+0x3a0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d908      	bls.n	8004028 <UART_SetConfig+0x364>
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <UART_SetConfig+0x3a4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d804      	bhi.n	8004028 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	e160      	b.n	80042ea <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8004028:	2313      	movs	r3, #19
 800402a:	2218      	movs	r2, #24
 800402c:	4694      	mov	ip, r2
 800402e:	44bc      	add	ip, r7
 8004030:	4463      	add	r3, ip
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e158      	b.n	80042ea <UART_SetConfig+0x626>
 8004038:	efff69f3 	.word	0xefff69f3
 800403c:	ffffcfff 	.word	0xffffcfff
 8004040:	40004800 	.word	0x40004800
 8004044:	fffff4ff 	.word	0xfffff4ff
 8004048:	40013800 	.word	0x40013800
 800404c:	40021000 	.word	0x40021000
 8004050:	40004400 	.word	0x40004400
 8004054:	40004c00 	.word	0x40004c00
 8004058:	40005000 	.word	0x40005000
 800405c:	003d0900 	.word	0x003d0900
 8004060:	00f42400 	.word	0x00f42400
 8004064:	000002ff 	.word	0x000002ff
 8004068:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	429a      	cmp	r2, r3
 8004076:	d000      	beq.n	800407a <UART_SetConfig+0x3b6>
 8004078:	e0a9      	b.n	80041ce <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800407a:	231b      	movs	r3, #27
 800407c:	2218      	movs	r2, #24
 800407e:	4694      	mov	ip, r2
 8004080:	44bc      	add	ip, r7
 8004082:	4463      	add	r3, ip
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d86d      	bhi.n	8004166 <UART_SetConfig+0x4a2>
 800408a:	009a      	lsls	r2, r3, #2
 800408c:	4b9f      	ldr	r3, [pc, #636]	; (800430c <UART_SetConfig+0x648>)
 800408e:	18d3      	adds	r3, r2, r3
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004094:	f7ff f8a8 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004098:	0003      	movs	r3, r0
 800409a:	005a      	lsls	r2, r3, #1
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	18d2      	adds	r2, r2, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	0019      	movs	r1, r3
 80040aa:	0010      	movs	r0, r2
 80040ac:	f7fc f82c 	bl	8000108 <__udivsi3>
 80040b0:	0003      	movs	r3, r0
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040b6:	e05e      	b.n	8004176 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040b8:	f7ff f8ac 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80040bc:	0003      	movs	r3, r0
 80040be:	005a      	lsls	r2, r3, #1
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	18d2      	adds	r2, r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0019      	movs	r1, r3
 80040ce:	0010      	movs	r0, r2
 80040d0:	f7fc f81a 	bl	8000108 <__udivsi3>
 80040d4:	0003      	movs	r3, r0
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040da:	e04c      	b.n	8004176 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040dc:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <UART_SetConfig+0x64c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	d00e      	beq.n	8004104 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	4a89      	ldr	r2, [pc, #548]	; (8004314 <UART_SetConfig+0x650>)
 80040ee:	189a      	adds	r2, r3, r2
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0019      	movs	r1, r3
 80040f6:	0010      	movs	r0, r2
 80040f8:	f7fc f806 	bl	8000108 <__udivsi3>
 80040fc:	0003      	movs	r3, r0
 80040fe:	b29b      	uxth	r3, r3
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004102:	e038      	b.n	8004176 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	4a83      	ldr	r2, [pc, #524]	; (8004318 <UART_SetConfig+0x654>)
 800410c:	189a      	adds	r2, r3, r2
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	0019      	movs	r1, r3
 8004114:	0010      	movs	r0, r2
 8004116:	f7fb fff7 	bl	8000108 <__udivsi3>
 800411a:	0003      	movs	r3, r0
 800411c:	b29b      	uxth	r3, r3
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004120:	e029      	b.n	8004176 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004122:	f7fe ffd3 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8004126:	0003      	movs	r3, r0
 8004128:	005a      	lsls	r2, r3, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	18d2      	adds	r2, r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0019      	movs	r1, r3
 8004138:	0010      	movs	r0, r2
 800413a:	f7fb ffe5 	bl	8000108 <__udivsi3>
 800413e:	0003      	movs	r3, r0
 8004140:	b29b      	uxth	r3, r3
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004144:	e017      	b.n	8004176 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0252      	lsls	r2, r2, #9
 8004150:	189a      	adds	r2, r3, r2
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0019      	movs	r1, r3
 8004158:	0010      	movs	r0, r2
 800415a:	f7fb ffd5 	bl	8000108 <__udivsi3>
 800415e:	0003      	movs	r3, r0
 8004160:	b29b      	uxth	r3, r3
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004164:	e007      	b.n	8004176 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004166:	2313      	movs	r3, #19
 8004168:	2218      	movs	r2, #24
 800416a:	4694      	mov	ip, r2
 800416c:	44bc      	add	ip, r7
 800416e:	4463      	add	r3, ip
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
        break;
 8004174:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d920      	bls.n	80041be <UART_SetConfig+0x4fa>
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	4a67      	ldr	r2, [pc, #412]	; (800431c <UART_SetConfig+0x658>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d81c      	bhi.n	80041be <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	b29a      	uxth	r2, r3
 8004188:	200a      	movs	r0, #10
 800418a:	2418      	movs	r4, #24
 800418c:	193b      	adds	r3, r7, r4
 800418e:	181b      	adds	r3, r3, r0
 8004190:	210f      	movs	r1, #15
 8004192:	438a      	bics	r2, r1
 8004194:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	b299      	uxth	r1, r3
 80041a2:	193b      	adds	r3, r7, r4
 80041a4:	181b      	adds	r3, r3, r0
 80041a6:	193a      	adds	r2, r7, r4
 80041a8:	1812      	adds	r2, r2, r0
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	193a      	adds	r2, r7, r4
 80041b6:	1812      	adds	r2, r2, r0
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	e095      	b.n	80042ea <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80041be:	2313      	movs	r3, #19
 80041c0:	2218      	movs	r2, #24
 80041c2:	4694      	mov	ip, r2
 80041c4:	44bc      	add	ip, r7
 80041c6:	4463      	add	r3, ip
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e08d      	b.n	80042ea <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80041ce:	231b      	movs	r3, #27
 80041d0:	2218      	movs	r2, #24
 80041d2:	4694      	mov	ip, r2
 80041d4:	44bc      	add	ip, r7
 80041d6:	4463      	add	r3, ip
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d86a      	bhi.n	80042b4 <UART_SetConfig+0x5f0>
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	4b4f      	ldr	r3, [pc, #316]	; (8004320 <UART_SetConfig+0x65c>)
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041e8:	f7fe fffe 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 80041ec:	0002      	movs	r2, r0
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	18d2      	adds	r2, r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0019      	movs	r1, r3
 80041fc:	0010      	movs	r0, r2
 80041fe:	f7fb ff83 	bl	8000108 <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	b29b      	uxth	r3, r3
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004208:	e05c      	b.n	80042c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800420a:	f7ff f803 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 800420e:	0002      	movs	r2, r0
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	18d2      	adds	r2, r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0019      	movs	r1, r3
 800421e:	0010      	movs	r0, r2
 8004220:	f7fb ff72 	bl	8000108 <__udivsi3>
 8004224:	0003      	movs	r3, r0
 8004226:	b29b      	uxth	r3, r3
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800422a:	e04b      	b.n	80042c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <UART_SetConfig+0x64c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2210      	movs	r2, #16
 8004232:	4013      	ands	r3, r2
 8004234:	d00e      	beq.n	8004254 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	4a39      	ldr	r2, [pc, #228]	; (8004324 <UART_SetConfig+0x660>)
 800423e:	189a      	adds	r2, r3, r2
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0019      	movs	r1, r3
 8004246:	0010      	movs	r0, r2
 8004248:	f7fb ff5e 	bl	8000108 <__udivsi3>
 800424c:	0003      	movs	r3, r0
 800424e:	b29b      	uxth	r3, r3
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004252:	e037      	b.n	80042c4 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	4a33      	ldr	r2, [pc, #204]	; (8004328 <UART_SetConfig+0x664>)
 800425c:	189a      	adds	r2, r3, r2
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0019      	movs	r1, r3
 8004264:	0010      	movs	r0, r2
 8004266:	f7fb ff4f 	bl	8000108 <__udivsi3>
 800426a:	0003      	movs	r3, r0
 800426c:	b29b      	uxth	r3, r3
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004270:	e028      	b.n	80042c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004272:	f7fe ff2b 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8004276:	0002      	movs	r2, r0
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	18d2      	adds	r2, r2, r3
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0019      	movs	r1, r3
 8004286:	0010      	movs	r0, r2
 8004288:	f7fb ff3e 	bl	8000108 <__udivsi3>
 800428c:	0003      	movs	r3, r0
 800428e:	b29b      	uxth	r3, r3
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004292:	e017      	b.n	80042c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0212      	lsls	r2, r2, #8
 800429e:	189a      	adds	r2, r3, r2
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0019      	movs	r1, r3
 80042a6:	0010      	movs	r0, r2
 80042a8:	f7fb ff2e 	bl	8000108 <__udivsi3>
 80042ac:	0003      	movs	r3, r0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042b2:	e007      	b.n	80042c4 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042b4:	2313      	movs	r3, #19
 80042b6:	2218      	movs	r2, #24
 80042b8:	4694      	mov	ip, r2
 80042ba:	44bc      	add	ip, r7
 80042bc:	4463      	add	r3, ip
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
        break;
 80042c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	d908      	bls.n	80042dc <UART_SetConfig+0x618>
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <UART_SetConfig+0x658>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d804      	bhi.n	80042dc <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	e006      	b.n	80042ea <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80042dc:	2313      	movs	r3, #19
 80042de:	2218      	movs	r2, #24
 80042e0:	4694      	mov	ip, r2
 80042e2:	44bc      	add	ip, r7
 80042e4:	4463      	add	r3, ip
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80042f6:	2313      	movs	r3, #19
 80042f8:	2218      	movs	r2, #24
 80042fa:	4694      	mov	ip, r2
 80042fc:	44bc      	add	ip, r7
 80042fe:	4463      	add	r3, ip
 8004300:	781b      	ldrb	r3, [r3, #0]
}
 8004302:	0018      	movs	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	b00e      	add	sp, #56	; 0x38
 8004308:	bdb0      	pop	{r4, r5, r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	08004688 	.word	0x08004688
 8004310:	40021000 	.word	0x40021000
 8004314:	007a1200 	.word	0x007a1200
 8004318:	01e84800 	.word	0x01e84800
 800431c:	0000ffff 	.word	0x0000ffff
 8004320:	080046ac 	.word	0x080046ac
 8004324:	003d0900 	.word	0x003d0900
 8004328:	00f42400 	.word	0x00f42400

0800432c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2201      	movs	r2, #1
 800433a:	4013      	ands	r3, r2
 800433c:	d00b      	beq.n	8004356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a4a      	ldr	r2, [pc, #296]	; (8004470 <UART_AdvFeatureConfig+0x144>)
 8004346:	4013      	ands	r3, r2
 8004348:	0019      	movs	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2202      	movs	r2, #2
 800435c:	4013      	ands	r3, r2
 800435e:	d00b      	beq.n	8004378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4a43      	ldr	r2, [pc, #268]	; (8004474 <UART_AdvFeatureConfig+0x148>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	2204      	movs	r2, #4
 800437e:	4013      	ands	r3, r2
 8004380:	d00b      	beq.n	800439a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a3b      	ldr	r2, [pc, #236]	; (8004478 <UART_AdvFeatureConfig+0x14c>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2208      	movs	r2, #8
 80043a0:	4013      	ands	r3, r2
 80043a2:	d00b      	beq.n	80043bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4a34      	ldr	r2, [pc, #208]	; (800447c <UART_AdvFeatureConfig+0x150>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2210      	movs	r2, #16
 80043c2:	4013      	ands	r3, r2
 80043c4:	d00b      	beq.n	80043de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <UART_AdvFeatureConfig+0x154>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2220      	movs	r2, #32
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00b      	beq.n	8004400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4a25      	ldr	r2, [pc, #148]	; (8004484 <UART_AdvFeatureConfig+0x158>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	0019      	movs	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	4013      	ands	r3, r2
 8004408:	d01d      	beq.n	8004446 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <UART_AdvFeatureConfig+0x15c>)
 8004412:	4013      	ands	r3, r2
 8004414:	0019      	movs	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	035b      	lsls	r3, r3, #13
 800442a:	429a      	cmp	r2, r3
 800442c:	d10b      	bne.n	8004446 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <UART_AdvFeatureConfig+0x160>)
 8004436:	4013      	ands	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	4013      	ands	r3, r2
 800444e:	d00b      	beq.n	8004468 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <UART_AdvFeatureConfig+0x164>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}
 8004470:	fffdffff 	.word	0xfffdffff
 8004474:	fffeffff 	.word	0xfffeffff
 8004478:	fffbffff 	.word	0xfffbffff
 800447c:	ffff7fff 	.word	0xffff7fff
 8004480:	ffffefff 	.word	0xffffefff
 8004484:	ffffdfff 	.word	0xffffdfff
 8004488:	ffefffff 	.word	0xffefffff
 800448c:	ff9fffff 	.word	0xff9fffff
 8004490:	fff7ffff 	.word	0xfff7ffff

08004494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044a2:	f7fd fe73 	bl	800218c <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d10d      	bne.n	80044d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	0399      	lsls	r1, r3, #14
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4b16      	ldr	r3, [pc, #88]	; (800451c <UART_CheckIdleState+0x88>)
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	0013      	movs	r3, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	f000 f82a 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e01f      	b.n	8004514 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2204      	movs	r2, #4
 80044dc:	4013      	ands	r3, r2
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d10d      	bne.n	80044fe <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	03d9      	lsls	r1, r3, #15
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <UART_CheckIdleState+0x88>)
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	0013      	movs	r3, r2
 80044f0:	2200      	movs	r2, #0
 80044f2:	f000 f815 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 80044f6:	1e03      	subs	r3, r0, #0
 80044f8:	d001      	beq.n	80044fe <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e00a      	b.n	8004514 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2270      	movs	r2, #112	; 0x70
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}
 800451c:	01ffffff 	.word	0x01ffffff

08004520 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	e029      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	3301      	adds	r3, #1
 8004536:	d026      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fd fe28 	bl	800218c <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11b      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4915      	ldr	r1, [pc, #84]	; (80045b0 <UART_WaitOnFlagUntilTimeout+0x90>)
 800455a:	400a      	ands	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	438a      	bics	r2, r1
 800456c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2270      	movs	r2, #112	; 0x70
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4013      	ands	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	425a      	negs	r2, r3
 8004596:	4153      	adcs	r3, r2
 8004598:	b2db      	uxtb	r3, r3
 800459a:	001a      	movs	r2, r3
 800459c:	1dfb      	adds	r3, r7, #7
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d0c6      	beq.n	8004532 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b004      	add	sp, #16
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	fffffe5f 	.word	0xfffffe5f

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	2600      	movs	r6, #0
 80045b8:	4d0c      	ldr	r5, [pc, #48]	; (80045ec <__libc_init_array+0x38>)
 80045ba:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	2600      	movs	r6, #0
 80045c6:	f000 f821 	bl	800460c <_init>
 80045ca:	4d0a      	ldr	r5, [pc, #40]	; (80045f4 <__libc_init_array+0x40>)
 80045cc:	4c0a      	ldr	r4, [pc, #40]	; (80045f8 <__libc_init_array+0x44>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	00b3      	lsls	r3, r6, #2
 80045da:	58eb      	ldr	r3, [r5, r3]
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	00b3      	lsls	r3, r6, #2
 80045e4:	58eb      	ldr	r3, [r5, r3]
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	080046d8 	.word	0x080046d8
 80045f0:	080046d8 	.word	0x080046d8
 80045f4:	080046d8 	.word	0x080046d8
 80045f8:	080046dc 	.word	0x080046dc

080045fc <memset>:
 80045fc:	0003      	movs	r3, r0
 80045fe:	1812      	adds	r2, r2, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	7019      	strb	r1, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
